{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/var/www/html/reactjs/ManagerWork/src/components/Signup/Signup.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button, FormGroup, FormControl, InputLabel, TextField, MenuItem, Select, Input, CircularProgress } from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"assets/img/front-logo.png\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.jsx\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport \"assets/css/signup.css\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport { EMAIL_REGEX, ZIP_CODE_LENGTH, MIN_PASSWORD_LENGTH, PASSWORD_PATTERN, DIGIT_ONLY, ZIPCODE_REGEX, MIN_AGE_YEARS, PHONE_NO_INVALID_LENGTH, genderType, NotificationOptions, INVALID_DATA_POST, STATUS_CREATED, MAX_PASSWORD_LENGTH } from \"__helpers/constants\";\nimport PhoneNumber from \"awesome-phonenumber\";\nimport { apiPath } from \"api\";\nimport { store } from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { userService } from \"_services/user.service\";\nimport ReactNotification from \"react-notifications-component\";\nimport { basePath, baseRoutes } from \"base-routes\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport DatePicker from \"react-date-picker\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { NotificationContainer } from \"react-notifications\";\n\nvar Signup = /*#__PURE__*/function (_React$Component) {\n  _inherits(Signup, _React$Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _super.call(this, props);\n    _this.maxDate = new Date();\n\n    _this.handlephoneNumber = function (e) {\n      var _this$setState;\n\n      var name = e.target.name;\n      var value = e.target.value;\n      var phoneNumberValidation = new PhoneNumber(e.target.value).toJSON();\n      var formErrors = _this.state.formErrors;\n      var phoneNumberValid = true;\n      var error = \"\";\n\n      if (value.trim().length) {\n        switch (phoneNumberValidation.possibility) {\n          // case \"is-possible\":\n          //   error = \"\";\n          //   if (\n          //     phoneNumberValidation.number.significant &&\n          //     phoneNumberValidation.number.significant.length ==\n          //       PHONE_NO_INVALID_LENGTH\n          //   ) {\n          //     error = enMsg.phoneTooShort;\n          //   }\n          //   break;\n          case \"invalid-country-code\":\n            error = enMsg.phoneInvalidCountryCode;\n            break;\n\n          case \"too-long\":\n            error = enMsg.phoneTooLong;\n            break;\n\n          case \"too-short\":\n            error = enMsg.phoneTooShort;\n            break;\n\n          case \"unknown\":\n            error = enMsg.phoneUnknown;\n            break;\n\n          default:\n            phoneNumberValidation.valid = true;\n        }\n\n        phoneNumberValid = phoneNumberValidation.valid;\n      }\n\n      formErrors.phone = error; // if(phoneNumberValidation.number.international !== undefined){\n      //   value  = phoneNumberValidation.number.international;\n      // }\n\n      _this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, \"formErrors\", formErrors), _defineProperty(_this$setState, \"phoneValid\", phoneNumberValid), _this$setState));\n    };\n\n    _this.handlePasswordInput = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n\n      if (value.length > MAX_PASSWORD_LENGTH) {\n        return true;\n      }\n\n      _this.setState(_defineProperty({}, name, value), function () {\n        _this.validateField(name, value);\n      });\n    };\n\n    _this.handleUserInput = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n\n      _this.setState(_defineProperty({}, name, value), function () {\n        _this.validateField(name, value);\n      });\n    };\n\n    _this.resetForm = function () {\n      var node = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      node.querySelector(\"#signUpForm\").reset();\n\n      _this.setState({\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        id: \"\",\n        firstName: \"\",\n        mInit: \"\",\n        lastName: \"\",\n        middleName: \"\",\n        phone: \"\",\n        dob: null,\n        gender: \"\",\n        zipcode: \"\",\n        imageRef: \"\",\n        emailValid: false,\n        passwordValid: false,\n        confirmPasswordValid: false,\n        firstNameValid: false,\n        lastNameValid: false,\n\n        /* optional fields default is valid */\n        zipcodeValid: false,\n        dobValid: true,\n        phoneValid: true,\n        roleValid: true,\n        companyName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        businessType: \"\",\n        companyNameValid: false,\n        addressValid: false,\n        cityValid: false,\n        stateValid: false,\n        businessTypeValid: false\n      });\n\n      var labelNodes = node.querySelectorAll(\".MuiInputLabel-shrink.MuiFormLabel-filled:not(.disabled-field-label)\");\n\n      if (typeof labelNodes == \"object\") {\n        labelNodes.forEach(function (currentValue, currentIndex, listObj) {\n          return currentValue.classList.remove(\"MuiInputLabel-shrink\", \"MuiFormLabel-filled\");\n        });\n      } // const errorNodes = node.querySelectorAll(\"p.error-class\");\n      // if (typeof errorNodes == \"object\") {\n      //   errorNodes.forEach(function(currentValue, currentIndex, listObj) {\n      //     currentValue.innerHtml = \"&nbsp;\";\n      //   });\n      // }\n\n    };\n\n    _this.componentDidMount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var spinner;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return userService.generateClientAouth();\n\n            case 2:\n              _this.clientAuthToken = _context.sent;\n              _this._isMounted = true;\n              spinner = document.getElementById('loadingSpinner');\n\n              if (spinner && !spinner.hasAttribute('hidden')) {\n                spinner.setAttribute('hidden', 'true');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleZipCodeInput = function (e) {\n      var value = e.target.value;\n\n      if (value.length > ZIP_CODE_LENGTH) {\n        return true;\n      }\n\n      if (value.trim() == \"\" || value.match(DIGIT_ONLY)) {\n        _this.setState({\n          zipcode: value\n        }, function () {\n          _this.validateField(\"zipcode\", value);\n        });\n      }\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.id, event.target.value));\n    };\n\n    _this.handleDateChange = function (event) {\n      var _this$setState5;\n\n      var name = \"dob\";\n      var value = event;\n      var dobValid = true;\n\n      if (event != null && !_this.dateUtility.isValid(event)) {\n        dobValid = false;\n      }\n\n      _this.setState((_this$setState5 = {}, _defineProperty(_this$setState5, name, value), _defineProperty(_this$setState5, \"dobValid\", dobValid), _this$setState5));\n    };\n\n    _this.maxDate.setYear(_this.maxDate.getFullYear() - MIN_AGE_YEARS);\n\n    _this.dateUtility = new DateFnsUtils();\n    _this.maxDateForMessage = _this.dateUtility.format(_this.maxDate, \"MM/dd/yyyy\");\n    _this.state = {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      id: null,\n      firstName: \"\",\n      mInit: \"\",\n      lastName: \"\",\n      middleName: \"\",\n      phone: \"\",\n      dob: null,\n      gender: \"\",\n      zipcode: \"\",\n      imageRef: \"\",\n      role: \"merchant\",\n      companyName: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      businessType: \"\",\n      formErrors: {\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        id: \"\",\n        firstName: \"\",\n        mInit: \"\",\n        lastName: \"\",\n        middleName: \"\",\n        phone: \"\",\n        dob: \"\",\n        gender: \"\",\n        zipcode: \"\",\n        imageRef: \"\",\n        role: \"merchant\",\n        companyName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        businessType: \"\"\n      },\n      emailValid: false,\n      passwordValid: false,\n      confirmPasswordValid: false,\n      firstNameValid: false,\n      lastNameValid: false,\n\n      /* optional fields default is valid */\n      zipcodeValid: false,\n      dobValid: true,\n      phoneValid: true,\n      roleValid: true,\n      loading: false,\n      companyNameValid: false,\n      addressValid: false,\n      cityValid: false,\n      stateValid: false,\n      businessTypeValid: false\n    };\n    _this._isMounted = false;\n    _this.apiPath = apiPath.signup;\n    _this.clientAuthToken = null;\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleUserInput = _this.handleUserInput.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.validateField = _this.validateField.bind(_assertThisInitialized(_this));\n    _this.handleZipCodeInput = _this.handleZipCodeInput.bind(_assertThisInitialized(_this));\n    _this.resetForm = _this.resetForm.bind(_assertThisInitialized(_this));\n    _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_this));\n    _this.handlePasswordInput = _this.handlePasswordInput.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(fieldName, value) {\n      var fieldValidationErrors = this.state.formErrors;\n      var emailValid = this.state.emailValid;\n      var passwordValid = this.state.passwordValid;\n      var confirmPasswordValid = this.state.confirmPasswordValid;\n      var firstNameValid = this.state.firstNameValid;\n      var lastNameValid = this.state.lastNameValid;\n      var zipcodeValid = this.state.zipcodeValid; // Create adnetwork data\n\n      var companyNameValid = this.state.companyNameValid;\n      var addressValid = this.state.addressValid;\n      var cityValid = this.state.cityValid;\n      var stateValid = this.state.stateValid;\n      var businessTypeValid = this.state.businessTypeValid;\n\n      switch (fieldName) {\n        case \"email\":\n          emailValid = value.trim().match(EMAIL_REGEX);\n          fieldValidationErrors.email = emailValid ? \"\" : enMsg.inValidEmail;\n          break;\n\n        case \"password\":\n          var errorMessage = \"\";\n          passwordValid = true;\n\n          if (value.trim().length < MIN_PASSWORD_LENGTH) {\n            errorMessage = enMsg.shortPassword;\n            passwordValid = false;\n          } else if (!value.trim().match(PASSWORD_PATTERN)) {\n            errorMessage = enMsg.passwordPatternValidation;\n            passwordValid = false;\n          } else if (this.state.confirmPassword === value) {\n            confirmPasswordValid = true;\n          }\n\n          fieldValidationErrors.password = errorMessage;\n          break;\n\n        case \"confirmPassword\":\n          errorMessage = \"\";\n          confirmPasswordValid = true;\n\n          if (value.trim().length && this.state.password !== value) {\n            confirmPasswordValid = false;\n            errorMessage = enMsg.confirmPasswordValidation;\n          }\n\n          fieldValidationErrors.confirmPassword = errorMessage;\n          break;\n\n        case \"firstName\":\n          firstNameValid = value.trim().length ? true : false;\n          fieldValidationErrors.firstName = firstNameValid ? \"\" : enMsg.firstNameRequired;\n          break;\n\n        case \"lastName\":\n          lastNameValid = value.trim().length ? true : false;\n          fieldValidationErrors.lastName = lastNameValid ? \"\" : enMsg.lastNameRequired;\n          break;\n\n        case \"zipcode_lock\":\n          zipcodeValid = false;\n          var error = \"\";\n\n          if (value.trim().length && value.match(DIGIT_ONLY) && value.trim().length != ZIP_CODE_LENGTH) {\n            error = enMsg.zipCodeMinLengthError;\n          } else if (value.trim().length && !value.match(ZIPCODE_REGEX)) {\n            error = enMsg.invalidZipCode;\n          } else {\n            zipcodeValid = true;\n          }\n\n          fieldValidationErrors.zipcode = error;\n          break;\n\n        case \"zipcode\":\n          zipcodeValid = true;\n          zipcodeValid = value.match(ZIPCODE_REGEX);\n\n          if (value.match(DIGIT_ONLY) && value.trim().length != ZIP_CODE_LENGTH) {\n            fieldValidationErrors.zipcode = enMsg.zipCodeMinLengthError;\n          } else if (!value.match(ZIPCODE_REGEX)) {\n            fieldValidationErrors.zipcode = enMsg.invalidZipCode;\n          }\n\n          break;\n\n        case \"companyName\":\n          companyNameValid = value.trim().length ? true : false;\n          fieldValidationErrors.companyName = enMsg.companyNameRequired;\n          break;\n\n        case \"address\":\n          addressValid = value.trim().length ? true : false;\n          fieldValidationErrors.address = enMsg.addressRequired;\n          break;\n\n        case \"city\":\n          cityValid = value.trim().length ? true : false;\n          fieldValidationErrors.city = enMsg.cityRequired;\n          break;\n\n        case \"state\":\n          stateValid = value.trim().length ? true : false;\n          fieldValidationErrors.state = enMsg.stateRequired;\n          break;\n\n        case \"businessType\":\n          businessTypeValid = value.trim().length ? true : false;\n          fieldValidationErrors.businessType = enMsg.businessNameeRequired;\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        formErrors: fieldValidationErrors,\n        emailValid: emailValid,\n        passwordValid: passwordValid,\n        confirmPasswordValid: confirmPasswordValid,\n        firstNameValid: firstNameValid,\n        lastNameValid: lastNameValid,\n        zipcodeValid: zipcodeValid,\n        companyNameValid: companyNameValid,\n        addressValid: addressValid,\n        cityValid: cityValid,\n        stateValid: stateValid,\n        businessTypeValid: businessTypeValid\n      }, this.validateForm);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      return this.state.emailValid && this.state.passwordValid && this.state.confirmPasswordValid && this.state.firstNameValid && this.state.lastNameValid && this.state.zipcodeValid && this.state.phoneValid && this.state.dobValid && this.state.companyNameValid && this.state.addressValid && this.state.cityValid && this.state.stateValid && this.state.businessTypeValid;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var _this2 = this;\n\n        var adnetworkData, adnetworkArr, dob, data, showNotification, response, notifiaciton;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                event.preventDefault();\n                adnetworkData = {\n                  companyName: this.state.companyName,\n                  address: this.state.address,\n                  city: this.state.city,\n                  state: this.state.state,\n                  zipcode: this.state.zipcode,\n                  busbusinessType: this.state.businessType\n                };\n                adnetworkArr = [adnetworkData];\n                dob = this.state.dob;\n\n                if (dob && this.dateUtility.isValid(dob)) {\n                  dob = this.dateUtility.format(new Date(dob), \"yyyy-MM-dd\");\n                }\n\n                data = _defineProperty({\n                  adNetworks: [],\n                  user: {\n                    // id: this.state.id,\n                    // confirmPassword: this.state.confirmPassword,\n                    email: this.state.email,\n                    password: this.state.password,\n                    fName: this.state.firstName,\n                    mInit: this.state.middleName,\n                    lName: this.state.lastName,\n                    mName: this.state.middleName,\n                    phone: this.state.phone,\n                    dob: dob,\n                    gender: this.state.gender,\n                    zipCode: this.state.zipcode,\n                    imageRef: this.state.imageRef // roleValid: this.state.role\n\n                  }\n                }, \"adNetworks\", [adnetworkData]);\n                showNotification = {};\n                _context2.prev = 8;\n                _context2.next = 11;\n                return fetch(this.apiPath, {\n                  method: \"POST\",\n                  headers: clientTokenHeader(),\n                  body: JSON.stringify(data)\n                }).then(function (response) {\n                  if (response.status == INVALID_DATA_POST) {\n                    showNotification = {\n                      title: enMsg.signUpFailedTitle,\n                      message: response.errorMessage,\n                      type: \"danger\"\n                    };\n                  } else if (response.status === STATUS_CREATED) {\n                    showNotification = {\n                      title: enMsg.successSignUpTitle,\n                      message: enMsg.successSignUp,\n                      type: \"success\"\n                    };\n\n                    _this2.props.history.push(basePath + baseRoutes.login.path);\n                  } else {\n                    showNotification = {\n                      title: enMsg.signUpFailedTitle,\n                      message: response,\n                      type: \"danger\"\n                    };\n                  }\n\n                  return response.json();\n                }).then(function (response) {\n                  showNotification = {\n                    title: enMsg.signUpFailedTitle,\n                    message: response.errorMessage,\n                    type: \"danger\"\n                  };\n\n                  if (response && response.user !== undefined) {\n                    //   do not store token as of now\n                    // let user = {\n                    //   authdata: window.btoa(data.email + \":\" + data.password),\n                    //   accessToken: response.accessToken\n                    // };\n                    // localStorage.setItem(\"user\", JSON.stringify(user));\n                    // const { from } = this.props.location.state || {\n                    //   from: { pathname: \"/\" }\n                    // };\n                    showNotification = {\n                      title: enMsg.successSignUpTitle,\n                      message: enMsg.successSignUp,\n                      type: \"success\"\n                    };\n\n                    _this2.props.history.push(basePath + baseRoutes.login.path);\n                  }\n                })[\"catch\"](function (error) {\n                  showNotification = {\n                    title: enMsg.signUpFailedTitle,\n                    message: enMsg.networkFailedError,\n                    type: \"danger\"\n                  };\n                  return response;\n                });\n\n              case 11:\n                response = _context2.sent;\n                _context2.next = 17;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](8);\n                showNotification = {\n                  title: enMsg.signUpFailedTitle,\n                  message: enMsg.networkFailedError,\n                  type: \"danger\"\n                };\n\n              case 17:\n                if (showNotification !== undefined && showNotification.title !== undefined && showNotification.message !== undefined && typeof showNotification.message === \"string\" && showNotification.type !== undefined) {\n                  this.notificationID = store.removeNotification(this.notificationID);\n\n                  if (this.notificationID == undefined) {\n                    notifiaciton = {\n                      title: showNotification.title,\n                      message: showNotification.message,\n                      type: showNotification.type\n                    }; // debugger;\n\n                    notifiaciton = Object.assign(NotificationOptions, notifiaciton);\n                    this.notificationID = store.addNotification(notifiaciton);\n                  }\n\n                  userService.showNotification(showNotification);\n                }\n\n                this._isMounted && this.setState({\n                  loading: false\n                });\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8, 14]]);\n      }));\n\n      function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var classes = this.props.classes;\n      var stylebtn = {\n        color: \"#fff !important\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-outer-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-cover gray-bg-color\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-inner-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo-content loginLogoMain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loginLogoInner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: logo,\n        alt: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"green-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }\n      }, \"Signup\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        id: \"signUpForm\",\n        noValidate: true,\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"First Name\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"firstName\",\n        autoComplete: \"off\",\n        value: this.state.firstName,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.firstNameValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"firstName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Middle Name\",\n        type: \"text\",\n        name: \"middleName\",\n        value: this.state.middleName,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.middleNameValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"middleName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Last Name\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        name: \"lastName\",\n        autoComplete: \"off\",\n        value: this.state.lastName,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.lastNameValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"lastName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Email\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        name: \"email\",\n        value: this.state.email,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.emailValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Password\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handlePasswordInput,\n        inputProps: {\n          maxLength: MAX_PASSWORD_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.passwordValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Confirm Password\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"password\",\n        name: \"confirmPassword\",\n        value: this.state.confirmPassword,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handlePasswordInput,\n        inputProps: {\n          maxLength: MAX_PASSWORD_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.confirmPasswordValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"confirmPassword\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Phone\",\n        name: \"phone\",\n        autoComplete: \"off\",\n        value: this.state.phone,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handlephoneNumber,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.phoneValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"phone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker // variant=\"inline\"\n      , {\n        format: \"MM/dd/yyyy\",\n        margin: \"normal\",\n        id: \"date-picker-dialog\",\n        label: \"DOB\",\n        name: \"dob\",\n        value: this.state.dob,\n        maxDate: this.maxDate,\n        maxDateMessage: \"Date should not be after \".concat(this.maxDateForMessage),\n        onChange: this.handleDateChange,\n        className: \"KeyboardDatePicker\",\n        invalidDateMessage: enMsg.invalidDate // closeAfterSelect={true}\n        ,\n        KeyboardButtonProps: {\n          \"aria-label\": \"change date\",\n          className: \"date-picker-span\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 27\n        }\n      })))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"select-gender\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"gender\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 27\n        }\n      }, \"Gender\"), /*#__PURE__*/React.createElement(Select, {\n        id: \"gender\",\n        color: \"secondary\",\n        name: \"gender\",\n        autoComplete: \"off\",\n        value: this.state.gender,\n        width: \"100px\",\n        onChange: function onChange(event) {\n          return _this3.handleUserInput(event);\n        },\n        input: /*#__PURE__*/React.createElement(Input, {\n          id: \"gender\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 36\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 29\n        }\n      }, \"Select Gender\"), genderType ? Object.keys(genderType).map(function (item, key) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          value: item,\n          key: key,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 37\n          }\n        }, genderType[item]);\n      }) : null), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.genderValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"gender\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 27\n        }\n      })))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"profile-role\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        className: \"disabled-field-label required-label\",\n        htmlFor: \"role\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 27\n        }\n      }, \"Role\"), /*#__PURE__*/React.createElement(Select, {\n        id: \"role\",\n        color: \"secondary\",\n        name: \"role\",\n        value: this.state.role // width=\"100px\"\n        ,\n        style: {\n          color: \"#000\"\n        },\n        required: true,\n        disabled: true,\n        onChange: this.handleUserInput,\n        input: /*#__PURE__*/React.createElement(Input, {\n          id: \"roleInput\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 36\n          }\n        }),\n        inputProps: {\n          disabled: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 29\n        }\n      }, \"Role\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"merchant\",\n        selected: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 29\n        }\n      }, \"Merchant\")), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.roleValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"role\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 27\n        }\n      })))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        style: {\n          display: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"image-ref-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Image Ref\",\n        name: \"name\",\n        value: this.state.imageRef,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.imageRefValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"imageRef\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 25\n        }\n      })))), /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        md: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"green-header\",\n        style: {\n          top: \"0\",\n          margin: \"30px auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 23\n        }\n      }, \"AdNetwork\")), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"signup-zip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Zip Code\",\n        name: \"zipcode\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        value: this.state.zipcode,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleZipCodeInput,\n        inputProps: {\n          maxLength: ZIP_CODE_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.zipcodeValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"zipcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"cusForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Company Name\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"companyName\",\n        autoComplete: \"off\",\n        value: this.state.companyName,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.companyNameValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"companyName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"cusForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"City\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"city\",\n        autoComplete: \"off\",\n        value: this.state.city,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.cityValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"city\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"cusForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Address\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"address\",\n        autoComplete: \"off\",\n        value: this.state.address,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.addressValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"cusForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"State\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"state\",\n        autoComplete: \"off\",\n        value: this.state.state,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.stateValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        md: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"cusForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"BusinessType\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        type: \"text\",\n        name: \"businessType\",\n        autoComplete: \"off\",\n        value: this.state.business,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleUserInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.businessTypeValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"businessType\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 25\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-forgot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        className: this.state.loading ? \"buttonSuccess\" : \"\",\n        disabled: this.state.loading || !this.validateForm(),\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 990,\n          columnNumber: 21\n        }\n      }, \"Signup\", this.state.loading && /*#__PURE__*/React.createElement(CircularProgress, {\n        size: 24,\n        className: \"buttonProgress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.resetForm,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 21\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(Link, {\n        to: baseRoutes.login.path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"secondary\",\n        className: \"back-btn\",\n        style: stylebtn,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 23\n        }\n      }, \"Back\")))))))));\n    }\n  }]);\n\n  return Signup;\n}(React.Component);\n\nexport default Signup;","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/components/Signup/Signup.jsx"],"names":["React","Component","ReactDOM","Button","FormGroup","FormControl","InputLabel","TextField","MenuItem","Select","Input","CircularProgress","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","Link","logo","GridItem","GridContainer","FormErrors","EMAIL_REGEX","ZIP_CODE_LENGTH","MIN_PASSWORD_LENGTH","PASSWORD_PATTERN","DIGIT_ONLY","ZIPCODE_REGEX","MIN_AGE_YEARS","PHONE_NO_INVALID_LENGTH","genderType","NotificationOptions","INVALID_DATA_POST","STATUS_CREATED","MAX_PASSWORD_LENGTH","PhoneNumber","apiPath","store","userService","ReactNotification","basePath","baseRoutes","enMsg","DatePicker","clientTokenHeader","NotificationContainer","Signup","props","maxDate","Date","handlephoneNumber","e","name","target","value","phoneNumberValidation","toJSON","formErrors","state","phoneNumberValid","error","trim","length","possibility","phoneInvalidCountryCode","phoneTooLong","phoneTooShort","phoneUnknown","valid","phone","setState","handlePasswordInput","validateField","handleUserInput","resetForm","node","findDOMNode","querySelector","reset","email","password","confirmPassword","id","firstName","mInit","lastName","middleName","dob","gender","zipcode","imageRef","emailValid","passwordValid","confirmPasswordValid","firstNameValid","lastNameValid","zipcodeValid","dobValid","phoneValid","roleValid","companyName","address","city","businessType","companyNameValid","addressValid","cityValid","stateValid","businessTypeValid","labelNodes","querySelectorAll","forEach","currentValue","currentIndex","listObj","classList","remove","componentDidMount","generateClientAouth","clientAuthToken","_isMounted","spinner","document","getElementById","hasAttribute","setAttribute","handleZipCodeInput","match","handleChange","event","handleDateChange","dateUtility","isValid","setYear","getFullYear","maxDateForMessage","format","role","loading","signup","bind","handleSubmit","fieldName","fieldValidationErrors","inValidEmail","errorMessage","shortPassword","passwordPatternValidation","confirmPasswordValidation","firstNameRequired","lastNameRequired","zipCodeMinLengthError","invalidZipCode","companyNameRequired","addressRequired","cityRequired","stateRequired","businessNameeRequired","validateForm","preventDefault","adnetworkData","busbusinessType","adnetworkArr","data","adNetworks","user","fName","lName","mName","zipCode","showNotification","fetch","method","headers","body","JSON","stringify","then","response","status","title","signUpFailedTitle","message","type","successSignUpTitle","successSignUp","history","push","login","path","json","undefined","networkFailedError","notificationID","removeNotification","notifiaciton","Object","assign","addNotification","classes","stylebtn","color","className","middleNameValid","maxLength","invalidDate","keys","map","item","key","genderValid","disabled","display","imageRefValid","top","margin","business"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,MADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,KARF,EASEC,gBATF,QAUO,mBAVP;AAWA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SACEC,uBADF,EAEEC,kBAFF,QAGO,sBAHP;AAKA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,2BAAjB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAO,uBAAP;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,aAPF,EAQEC,uBARF,EASEC,UATF,EAUEC,mBAVF,EAWEC,iBAXF,EAYEC,cAZF,EAaEC,mBAbF,QAcO,qBAdP;AAgBA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,KAAxB;AAEA,SAASC,KAAT,QAAsB,+BAAtB;AACA,OAAO,8CAAP;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,aAArC;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,qBAAT,QAAsC,qBAAtC;;IAEMC,M;;;;;AAEJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UADnBC,OACmB,GADT,IAAIC,IAAJ,EACS;;AAAA,UAoFnBC,iBApFmB,GAoFC,UAAAC,CAAC,EAAI;AAAA;;AACvB,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAAtB;AACA,UAAIE,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAArB;AACA,UAAMC,qBAAqB,GAAG,IAAIpB,WAAJ,CAAgBgB,CAAC,CAACE,MAAF,CAASC,KAAzB,EAAgCE,MAAhC,EAA9B;AAEA,UAAIC,UAAU,GAAG,MAAKC,KAAL,CAAWD,UAA5B;AACA,UAAIE,gBAAgB,GAAG,IAAvB;AACA,UAAIC,KAAK,GAAG,EAAZ;;AAEA,UAAIN,KAAK,CAACO,IAAN,GAAaC,MAAjB,EAAyB;AACvB,gBAAQP,qBAAqB,CAACQ,WAA9B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAK,sBAAL;AACEH,YAAAA,KAAK,GAAGlB,KAAK,CAACsB,uBAAd;AACA;;AACF,eAAK,UAAL;AACEJ,YAAAA,KAAK,GAAGlB,KAAK,CAACuB,YAAd;AACA;;AACF,eAAK,WAAL;AACEL,YAAAA,KAAK,GAAGlB,KAAK,CAACwB,aAAd;AACA;;AACF,eAAK,SAAL;AACEN,YAAAA,KAAK,GAAGlB,KAAK,CAACyB,YAAd;AACA;;AACF;AACEZ,YAAAA,qBAAqB,CAACa,KAAtB,GAA8B,IAA9B;AAxBJ;;AA0BAT,QAAAA,gBAAgB,GAAGJ,qBAAqB,CAACa,KAAzC;AACD;;AACDX,MAAAA,UAAU,CAACY,KAAX,GAAmBT,KAAnB,CAtCuB,CAuCvB;AACA;AACA;;AACA,YAAKU,QAAL,uDACGlB,IADH,EACUE,KADV,iDAEcG,UAFd,iDAGcE,gBAHd;AAKD,KAnIkB;;AAAA,UAqInBY,mBArImB,GAqIG,UAAApB,CAAC,EAAI;AACzB,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAAtB;AACA,UAAME,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAAvB;;AAEA,UAAIA,KAAK,CAACQ,MAAN,GAAe5B,mBAAnB,EAAwC;AACtC,eAAO,IAAP;AACD;;AAED,YAAKoC,QAAL,qBAAiBlB,IAAjB,EAAwBE,KAAxB,GAAiC,YAAM;AACrC,cAAKkB,aAAL,CAAmBpB,IAAnB,EAAyBE,KAAzB;AACD,OAFD;AAGD,KAhJkB;;AAAA,UAkJnBmB,eAlJmB,GAkJD,UAAAtB,CAAC,EAAI;AACrB,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAAtB;AACA,UAAME,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAAvB;;AAEA,YAAKgB,QAAL,qBAAiBlB,IAAjB,EAAwBE,KAAxB,GAAiC,YAAM;AACrC,cAAKkB,aAAL,CAAmBpB,IAAnB,EAAyBE,KAAzB;AACD,OAFD;AAGD,KAzJkB;;AAAA,UA2JnBoB,SA3JmB,GA2JP,YAAM;AAChB,UAAMC,IAAI,GAAGvE,QAAQ,CAACwE,WAAT,+BAAb;AACAD,MAAAA,IAAI,CAACE,aAAL,CAAmB,aAAnB,EAAkCC,KAAlC;;AACA,YAAKR,QAAL,CAAc;AACZS,QAAAA,KAAK,EAAE,EADK;AAEZC,QAAAA,QAAQ,EAAE,EAFE;AAGZC,QAAAA,eAAe,EAAE,EAHL;AAIZC,QAAAA,EAAE,EAAE,EAJQ;AAKZC,QAAAA,SAAS,EAAE,EALC;AAMZC,QAAAA,KAAK,EAAE,EANK;AAOZC,QAAAA,QAAQ,EAAE,EAPE;AAQZC,QAAAA,UAAU,EAAE,EARA;AASZjB,QAAAA,KAAK,EAAE,EATK;AAUZkB,QAAAA,GAAG,EAAE,IAVO;AAWZC,QAAAA,MAAM,EAAE,EAXI;AAYZC,QAAAA,OAAO,EAAE,EAZG;AAaZC,QAAAA,QAAQ,EAAE,EAbE;AAcZC,QAAAA,UAAU,EAAE,KAdA;AAeZC,QAAAA,aAAa,EAAE,KAfH;AAgBZC,QAAAA,oBAAoB,EAAE,KAhBV;AAiBZC,QAAAA,cAAc,EAAE,KAjBJ;AAkBZC,QAAAA,aAAa,EAAE,KAlBH;;AAmBZ;AACAC,QAAAA,YAAY,EAAE,KApBF;AAqBZC,QAAAA,QAAQ,EAAE,IArBE;AAsBZC,QAAAA,UAAU,EAAE,IAtBA;AAuBZC,QAAAA,SAAS,EAAE,IAvBC;AAyBZC,QAAAA,WAAW,EAAE,EAzBD;AA0BZC,QAAAA,OAAO,EAAE,EA1BG;AA2BZC,QAAAA,IAAI,EAAE,EA3BM;AA4BZ5C,QAAAA,KAAK,EAAE,EA5BK;AA6BZ6C,QAAAA,YAAY,EAAE,EA7BF;AA8BZC,QAAAA,gBAAgB,EAAE,KA9BN;AA+BZC,QAAAA,YAAY,EAAE,KA/BF;AAgCZC,QAAAA,SAAS,EAAE,KAhCC;AAiCZC,QAAAA,UAAU,EAAE,KAjCA;AAkCZC,QAAAA,iBAAiB,EAAE;AAlCP,OAAd;;AAoCA,UAAMC,UAAU,GAAGlC,IAAI,CAACmC,gBAAL,CACjB,sEADiB,CAAnB;;AAIA,UAAI,OAAOD,UAAP,IAAqB,QAAzB,EAAmC;AACjCA,QAAAA,UAAU,CAACE,OAAX,CAAmB,UAASC,YAAT,EAAuBC,YAAvB,EAAqCC,OAArC,EAA8C;AAC/D,iBAAOF,YAAY,CAACG,SAAb,CAAuBC,MAAvB,CACL,sBADK,EAEL,qBAFK,CAAP;AAID,SALD;AAMD,OAlDe,CAoDhB;AACA;AACA;AACA;AACA;AACA;;AACD,KArNkB;;AAAA,UAuNnBC,iBAvNmB,yEAuNC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACW/E,WAAW,CAACgF,mBAAZ,EADX;;AAAA;AAClB,oBAAKC,eADa;AAElB,oBAAKC,UAAL,GAAkB,IAAlB;AACMC,cAAAA,OAHY,GAGFC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAHE;;AAIlB,kBAAIF,OAAO,IAAI,CAACA,OAAO,CAACG,YAAR,CAAqB,QAArB,CAAhB,EAAgD;AAC9CH,gBAAAA,OAAO,CAACI,YAAR,CAAqB,QAArB,EAA+B,MAA/B;AACD;;AANiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvND;;AAAA,UAoOnBC,kBApOmB,GAoOE,UAAA3E,CAAC,EAAI;AACxB,UAAMG,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAAvB;;AACA,UAAIA,KAAK,CAACQ,MAAN,GAAevC,eAAnB,EAAoC;AAClC,eAAO,IAAP;AACD;;AACD,UAAI+B,KAAK,CAACO,IAAN,MAAgB,EAAhB,IAAsBP,KAAK,CAACyE,KAAN,CAAYrG,UAAZ,CAA1B,EAAmD;AACjD,cAAK4C,QAAL,CAAc;AAAEmB,UAAAA,OAAO,EAAEnC;AAAX,SAAd,EAAkC,YAAM;AACtC,gBAAKkB,aAAL,CAAmB,SAAnB,EAA8BlB,KAA9B;AACD,SAFD;AAGD;AACF,KA9OkB;;AAAA,UAiYnB0E,YAjYmB,GAiYJ,UAAAC,KAAK,EAAI;AACtB,YAAK3D,QAAL,qBACG2D,KAAK,CAAC5E,MAAN,CAAa6B,EADhB,EACqB+C,KAAK,CAAC5E,MAAN,CAAaC,KADlC;AAGD,KArYkB;;AAAA,UAuYnB4E,gBAvYmB,GAuYA,UAAAD,KAAK,EAAI;AAAA;;AAC1B,UAAM7E,IAAI,GAAG,KAAb;AACA,UAAIE,KAAK,GAAG2E,KAAZ;AACA,UAAIhC,QAAQ,GAAG,IAAf;;AAEA,UAAIgC,KAAK,IAAI,IAAT,IAAiB,CAAC,MAAKE,WAAL,CAAiBC,OAAjB,CAAyBH,KAAzB,CAAtB,EAAuD;AACrDhC,QAAAA,QAAQ,GAAG,KAAX;AACD;;AACD,YAAK3B,QAAL,yDACGlB,IADH,EACUE,KADV,gDAEY2C,QAFZ;AAID,KAnZkB;;AAEjB,UAAKjD,OAAL,CAAaqF,OAAb,CAAqB,MAAKrF,OAAL,CAAasF,WAAb,KAA6B1G,aAAlD;;AACA,UAAKuG,WAAL,GAAmB,IAAIrH,YAAJ,EAAnB;AAEA,UAAKyH,iBAAL,GAAyB,MAAKJ,WAAL,CAAiBK,MAAjB,CACvB,MAAKxF,OADkB,EAEvB,YAFuB,CAAzB;AAIA,UAAKU,KAAL,GAAa;AACXqB,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,eAAe,EAAE,EAHN;AAIXC,MAAAA,EAAE,EAAE,IAJO;AAKXC,MAAAA,SAAS,EAAE,EALA;AAMXC,MAAAA,KAAK,EAAE,EANI;AAOXC,MAAAA,QAAQ,EAAE,EAPC;AAQXC,MAAAA,UAAU,EAAE,EARD;AASXjB,MAAAA,KAAK,EAAE,EATI;AAUXkB,MAAAA,GAAG,EAAE,IAVM;AAWXC,MAAAA,MAAM,EAAE,EAXG;AAYXC,MAAAA,OAAO,EAAE,EAZE;AAaXC,MAAAA,QAAQ,EAAE,EAbC;AAcX+C,MAAAA,IAAI,EAAE,UAdK;AAgBXrC,MAAAA,WAAW,EAAE,EAhBF;AAiBXC,MAAAA,OAAO,EAAE,EAjBE;AAkBXC,MAAAA,IAAI,EAAE,EAlBK;AAmBX5C,MAAAA,KAAK,EAAE,EAnBI;AAoBX6C,MAAAA,YAAY,EAAE,EApBH;AAqBX9C,MAAAA,UAAU,EAAE;AACVsB,QAAAA,KAAK,EAAE,EADG;AAEVC,QAAAA,QAAQ,EAAE,EAFA;AAGVC,QAAAA,eAAe,EAAE,EAHP;AAIVC,QAAAA,EAAE,EAAE,EAJM;AAKVC,QAAAA,SAAS,EAAE,EALD;AAMVC,QAAAA,KAAK,EAAE,EANG;AAOVC,QAAAA,QAAQ,EAAE,EAPA;AAQVC,QAAAA,UAAU,EAAE,EARF;AASVjB,QAAAA,KAAK,EAAE,EATG;AAUVkB,QAAAA,GAAG,EAAE,EAVK;AAWVC,QAAAA,MAAM,EAAE,EAXE;AAYVC,QAAAA,OAAO,EAAE,EAZC;AAaVC,QAAAA,QAAQ,EAAE,EAbA;AAcV+C,QAAAA,IAAI,EAAE,UAdI;AAgBVrC,QAAAA,WAAW,EAAE,EAhBH;AAiBVC,QAAAA,OAAO,EAAE,EAjBC;AAkBVC,QAAAA,IAAI,EAAE,EAlBI;AAmBV5C,QAAAA,KAAK,EAAE,EAnBG;AAoBV6C,QAAAA,YAAY,EAAE;AApBJ,OArBD;AA2CXZ,MAAAA,UAAU,EAAE,KA3CD;AA4CXC,MAAAA,aAAa,EAAE,KA5CJ;AA6CXC,MAAAA,oBAAoB,EAAE,KA7CX;AA8CXC,MAAAA,cAAc,EAAE,KA9CL;AA+CXC,MAAAA,aAAa,EAAE,KA/CJ;;AAgDX;AACAC,MAAAA,YAAY,EAAE,KAjDH;AAkDXC,MAAAA,QAAQ,EAAE,IAlDC;AAmDXC,MAAAA,UAAU,EAAE,IAnDD;AAoDXC,MAAAA,SAAS,EAAE,IApDA;AAqDXuC,MAAAA,OAAO,EAAE,KArDE;AAuDXlC,MAAAA,gBAAgB,EAAE,KAvDP;AAwDXC,MAAAA,YAAY,EAAE,KAxDH;AAyDXC,MAAAA,SAAS,EAAE,KAzDA;AA0DXC,MAAAA,UAAU,EAAE,KA1DD;AA2DXC,MAAAA,iBAAiB,EAAE;AA3DR,KAAb;AA8DA,UAAKY,UAAL,GAAkB,KAAlB;AACA,UAAKpF,OAAL,GAAeA,OAAO,CAACuG,MAAvB;AACA,UAAKpB,eAAL,GAAuB,IAAvB;AACA,UAAKS,YAAL,GAAoB,MAAKA,YAAL,CAAkBY,IAAlB,+BAApB;AACA,UAAKnE,eAAL,GAAuB,MAAKA,eAAL,CAAqBmE,IAArB,+BAAvB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB;AACA,UAAKpE,aAAL,GAAqB,MAAKA,aAAL,CAAmBoE,IAAnB,+BAArB;AACA,UAAKd,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBc,IAAxB,+BAA1B;AACA,UAAKlE,SAAL,GAAiB,MAAKA,SAAL,CAAekE,IAAf,+BAAjB;AACA,UAAKV,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBU,IAAtB,+BAAxB;AACA,UAAKrE,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBqE,IAAzB,+BAA3B;AAjFiB;AAkFlB;;;;WA8ID,gCAAuB;AACrB,WAAKpB,UAAL,GAAkB,KAAlB;AACD;;;WAaD,uBAAcsB,SAAd,EAAyBxF,KAAzB,EAAgC;AAC9B,UAAIyF,qBAAqB,GAAG,KAAKrF,KAAL,CAAWD,UAAvC;AACA,UAAIkC,UAAU,GAAG,KAAKjC,KAAL,CAAWiC,UAA5B;AACA,UAAIC,aAAa,GAAG,KAAKlC,KAAL,CAAWkC,aAA/B;AACA,UAAIC,oBAAoB,GAAG,KAAKnC,KAAL,CAAWmC,oBAAtC;AACA,UAAIC,cAAc,GAAG,KAAKpC,KAAL,CAAWoC,cAAhC;AACA,UAAIC,aAAa,GAAG,KAAKrC,KAAL,CAAWqC,aAA/B;AACA,UAAIC,YAAY,GAAG,KAAKtC,KAAL,CAAWsC,YAA9B,CAP8B,CAQlC;;AACI,UAAIQ,gBAAgB,GAAG,KAAK9C,KAAL,CAAW8C,gBAAlC;AACA,UAAIC,YAAY,GAAG,KAAK/C,KAAL,CAAW+C,YAA9B;AACA,UAAIC,SAAS,GAAG,KAAKhD,KAAL,CAAWgD,SAA3B;AACA,UAAIC,UAAU,GAAG,KAAKjD,KAAL,CAAWiD,UAA5B;AACA,UAAIC,iBAAiB,GAAG,KAAKlD,KAAL,CAAWkD,iBAAnC;;AAEA,cAAQkC,SAAR;AACE,aAAK,OAAL;AACEnD,UAAAA,UAAU,GAAGrC,KAAK,CAACO,IAAN,GAAakE,KAAb,CAAmBzG,WAAnB,CAAb;AACAyH,UAAAA,qBAAqB,CAAChE,KAAtB,GAA8BY,UAAU,GAAG,EAAH,GAAQjD,KAAK,CAACsG,YAAtD;AACA;;AAEF,aAAK,UAAL;AACE,cAAIC,YAAY,GAAG,EAAnB;AACArD,UAAAA,aAAa,GAAG,IAAhB;;AACA,cAAItC,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsBtC,mBAA1B,EAA+C;AAC7CyH,YAAAA,YAAY,GAAGvG,KAAK,CAACwG,aAArB;AACAtD,YAAAA,aAAa,GAAG,KAAhB;AACD,WAHD,MAGO,IAAI,CAACtC,KAAK,CAACO,IAAN,GAAakE,KAAb,CAAmBtG,gBAAnB,CAAL,EAA2C;AAChDwH,YAAAA,YAAY,GAAGvG,KAAK,CAACyG,yBAArB;AACAvD,YAAAA,aAAa,GAAG,KAAhB;AACD,WAHM,MAGA,IAAI,KAAKlC,KAAL,CAAWuB,eAAX,KAA+B3B,KAAnC,EAA0C;AAC/CuC,YAAAA,oBAAoB,GAAG,IAAvB;AACD;;AACDkD,UAAAA,qBAAqB,CAAC/D,QAAtB,GAAiCiE,YAAjC;AACA;;AAEF,aAAK,iBAAL;AACEA,UAAAA,YAAY,GAAG,EAAf;AACApD,UAAAA,oBAAoB,GAAG,IAAvB;;AACA,cAAIvC,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAuB,KAAKJ,KAAL,CAAWsB,QAAX,KAAwB1B,KAAnD,EAA0D;AACxDuC,YAAAA,oBAAoB,GAAG,KAAvB;AACAoD,YAAAA,YAAY,GAAGvG,KAAK,CAAC0G,yBAArB;AACD;;AACDL,UAAAA,qBAAqB,CAAC9D,eAAtB,GAAwCgE,YAAxC;AACA;;AAEF,aAAK,WAAL;AACEnD,UAAAA,cAAc,GAAGxC,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAA9C;AACAiF,UAAAA,qBAAqB,CAAC5D,SAAtB,GAAkCW,cAAc,GAC5C,EAD4C,GAE5CpD,KAAK,CAAC2G,iBAFV;AAGA;;AAEF,aAAK,UAAL;AACEtD,UAAAA,aAAa,GAAGzC,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAA7C;AACAiF,UAAAA,qBAAqB,CAAC1D,QAAtB,GAAiCU,aAAa,GAC1C,EAD0C,GAE1CrD,KAAK,CAAC4G,gBAFV;AAGA;;AACF,aAAK,cAAL;AACEtD,UAAAA,YAAY,GAAG,KAAf;AACA,cAAIpC,KAAK,GAAG,EAAZ;;AACA,cACEN,KAAK,CAACO,IAAN,GAAaC,MAAb,IACAR,KAAK,CAACyE,KAAN,CAAYrG,UAAZ,CADA,IAEA4B,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAuBvC,eAHzB,EAIE;AACAqC,YAAAA,KAAK,GAAGlB,KAAK,CAAC6G,qBAAd;AACD,WAND,MAMO,IAAIjG,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAuB,CAACR,KAAK,CAACyE,KAAN,CAAYpG,aAAZ,CAA5B,EAAwD;AAC7DiC,YAAAA,KAAK,GAAGlB,KAAK,CAAC8G,cAAd;AACD,WAFM,MAEA;AACLxD,YAAAA,YAAY,GAAG,IAAf;AACD;;AACD+C,UAAAA,qBAAqB,CAACtD,OAAtB,GAAgC7B,KAAhC;AACA;;AAEA,aAAK,SAAL;AACEoC,UAAAA,YAAY,GAAG,IAAf;AACAA,UAAAA,YAAY,GAAG1C,KAAK,CAACyE,KAAN,CAAYpG,aAAZ,CAAf;;AACA,cAAI2B,KAAK,CAACyE,KAAN,CAAYrG,UAAZ,KAA2B4B,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAuBvC,eAAtD,EAAuE;AACrEwH,YAAAA,qBAAqB,CAACtD,OAAtB,GAAgC/C,KAAK,CAAC6G,qBAAtC;AACD,WAFD,MAEO,IAAI,CAACjG,KAAK,CAACyE,KAAN,CAAYpG,aAAZ,CAAL,EAAiC;AACtCoH,YAAAA,qBAAqB,CAACtD,OAAtB,GAAgC/C,KAAK,CAAC8G,cAAtC;AACD;;AACD;;AAEJ,aAAK,aAAL;AACEhD,UAAAA,gBAAgB,GAAGlD,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAAhD;AACAiF,UAAAA,qBAAqB,CAAC3C,WAAtB,GAAoC1D,KAAK,CAAC+G,mBAA1C;AACA;;AACF,aAAK,SAAL;AACEhD,UAAAA,YAAY,GAAGnD,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAA5C;AACAiF,UAAAA,qBAAqB,CAAC1C,OAAtB,GAAgC3D,KAAK,CAACgH,eAAtC;AACA;;AACF,aAAK,MAAL;AACEhD,UAAAA,SAAS,GAAGpD,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAAzC;AACAiF,UAAAA,qBAAqB,CAACzC,IAAtB,GAA6B5D,KAAK,CAACiH,YAAnC;AACA;;AACF,aAAK,OAAL;AACEhD,UAAAA,UAAU,GAAGrD,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAA1C;AACAiF,UAAAA,qBAAqB,CAACrF,KAAtB,GAA8BhB,KAAK,CAACkH,aAApC;AACA;;AACF,aAAK,cAAL;AACEhD,UAAAA,iBAAiB,GAAGtD,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,IAAtB,GAA6B,KAAjD;AACAiF,UAAAA,qBAAqB,CAACxC,YAAtB,GAAqC7D,KAAK,CAACmH,qBAA3C;AACA;;AACF;AACE;AA5FJ;;AA8FA,WAAKvF,QAAL,CACE;AACEb,QAAAA,UAAU,EAAEsF,qBADd;AAEEpD,QAAAA,UAAU,EAAEA,UAFd;AAGEC,QAAAA,aAAa,EAAEA,aAHjB;AAIEC,QAAAA,oBAAoB,EAAEA,oBAJxB;AAKEC,QAAAA,cAAc,EAAEA,cALlB;AAMEC,QAAAA,aAAa,EAAEA,aANjB;AAOEC,QAAAA,YAAY,EAAEA,YAPhB;AAQEQ,QAAAA,gBAAgB,EAAEA,gBARpB;AASEC,QAAAA,YAAY,EAAEA,YAThB;AAUEC,QAAAA,SAAS,EAAEA,SAVb;AAWEC,QAAAA,UAAU,EAAEA,UAXd;AAYEC,QAAAA,iBAAiB,EAAEA;AAZrB,OADF,EAeE,KAAKkD,YAfP;AAiBD;;;WAED,wBAAe;AACb,aACE,KAAKpG,KAAL,CAAWiC,UAAX,IACA,KAAKjC,KAAL,CAAWkC,aADX,IAEA,KAAKlC,KAAL,CAAWmC,oBAFX,IAGA,KAAKnC,KAAL,CAAWoC,cAHX,IAIA,KAAKpC,KAAL,CAAWqC,aAJX,IAKA,KAAKrC,KAAL,CAAWsC,YALX,IAMA,KAAKtC,KAAL,CAAWwC,UANX,IAOA,KAAKxC,KAAL,CAAWuC,QAPX,IAQA,KAAKvC,KAAL,CAAW8C,gBARX,IASA,KAAK9C,KAAL,CAAW+C,YATX,IAUA,KAAK/C,KAAL,CAAWgD,SAVX,IAWA,KAAKhD,KAAL,CAAWiD,UAXX,IAYA,KAAKjD,KAAL,CAAWkD,iBAbb;AAeD;;;;mFAsBD,kBAAmBqB,KAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,qBAAK3D,QAAL,CAAc;AAAEoE,kBAAAA,OAAO,EAAE;AAAX,iBAAd;AACAT,gBAAAA,KAAK,CAAC8B,cAAN;AAEMC,gBAAAA,aAJR,GAIwB;AACpB5D,kBAAAA,WAAW,EAAE,KAAK1C,KAAL,CAAW0C,WADJ;AAEpBC,kBAAAA,OAAO,EAAE,KAAK3C,KAAL,CAAW2C,OAFA;AAGpBC,kBAAAA,IAAI,EAAE,KAAK5C,KAAL,CAAW4C,IAHG;AAIpB5C,kBAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWA,KAJE;AAKpB+B,kBAAAA,OAAO,EAAE,KAAK/B,KAAL,CAAW+B,OALA;AAMpBwE,kBAAAA,eAAe,EAAE,KAAKvG,KAAL,CAAW6C;AANR,iBAJxB;AAYM2D,gBAAAA,YAZN,GAYqB,CAACF,aAAD,CAZrB;AAaMzE,gBAAAA,GAbN,GAaY,KAAK7B,KAAL,CAAW6B,GAbvB;;AAcE,oBAAIA,GAAG,IAAI,KAAK4C,WAAL,CAAiBC,OAAjB,CAAyB7C,GAAzB,CAAX,EAA0C;AACxCA,kBAAAA,GAAG,GAAG,KAAK4C,WAAL,CAAiBK,MAAjB,CAAwB,IAAIvF,IAAJ,CAASsC,GAAT,CAAxB,EAAuC,YAAvC,CAAN;AACD;;AACK4E,gBAAAA,IAjBR;AAkBIC,kBAAAA,UAAU,EAAE,EAlBhB;AAmBIC,kBAAAA,IAAI,EAAE;AACJ;AACA;AACAtF,oBAAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWqB,KAHd;AAIJC,oBAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWsB,QAJjB;AAKJsF,oBAAAA,KAAK,EAAE,KAAK5G,KAAL,CAAWyB,SALd;AAMJC,oBAAAA,KAAK,EAAE,KAAK1B,KAAL,CAAW4B,UANd;AAOJiF,oBAAAA,KAAK,EAAE,KAAK7G,KAAL,CAAW2B,QAPd;AAQJmF,oBAAAA,KAAK,EAAE,KAAK9G,KAAL,CAAW4B,UARd;AASJjB,oBAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWW,KATd;AAUJkB,oBAAAA,GAAG,EAAEA,GAVD;AAWJC,oBAAAA,MAAM,EAAE,KAAK9B,KAAL,CAAW8B,MAXf;AAYJiF,oBAAAA,OAAO,EAAE,KAAK/G,KAAL,CAAW+B,OAZhB;AAaJC,oBAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWgC,QAbjB,CAcJ;;AAdI;AAnBV,iCAmCgB,CAACsE,aAAD,CAnChB;AAqCMU,gBAAAA,gBArCN,GAqCyB,EArCzB;AAAA;AAAA;AAAA,uBAuC2BC,KAAK,CAAC,KAAKvI,OAAN,EAAe;AACzCwI,kBAAAA,MAAM,EAAE,MADiC;AAEzCC,kBAAAA,OAAO,EAAEjI,iBAAiB,EAFe;AAGzCkI,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,IAAf;AAHmC,iBAAf,CAAL,CAKpBc,IALoB,CAKf,UAAAC,QAAQ,EAAI;AAChB,sBAAIA,QAAQ,CAACC,MAAT,IAAmBnJ,iBAAvB,EAA0C;AACxC0I,oBAAAA,gBAAgB,GAAG;AACjBU,sBAAAA,KAAK,EAAE1I,KAAK,CAAC2I,iBADI;AAEjBC,sBAAAA,OAAO,EAAEJ,QAAQ,CAACjC,YAFD;AAGjBsC,sBAAAA,IAAI,EAAE;AAHW,qBAAnB;AAMD,mBAPD,MAOO,IAAIL,QAAQ,CAACC,MAAT,KAAoBlJ,cAAxB,EAAwC;AAC7CyI,oBAAAA,gBAAgB,GAAG;AACjBU,sBAAAA,KAAK,EAAE1I,KAAK,CAAC8I,kBADI;AAEjBF,sBAAAA,OAAO,EAAE5I,KAAK,CAAC+I,aAFE;AAGjBF,sBAAAA,IAAI,EAAE;AAHW,qBAAnB;;AAKA,oBAAA,MAAI,CAACxI,KAAL,CAAW2I,OAAX,CAAmBC,IAAnB,CAAwBnJ,QAAQ,GAAGC,UAAU,CAACmJ,KAAX,CAAiBC,IAApD;AACD,mBAPM,MAOA;AACLnB,oBAAAA,gBAAgB,GAAG;AACjBU,sBAAAA,KAAK,EAAE1I,KAAK,CAAC2I,iBADI;AAEjBC,sBAAAA,OAAO,EAAEJ,QAFQ;AAGjBK,sBAAAA,IAAI,EAAE;AAHW,qBAAnB;AAKD;;AACD,yBAAOL,QAAQ,CAACY,IAAT,EAAP;AACD,iBA5BoB,EA6BpBb,IA7BoB,CA6Bf,UAAAC,QAAQ,EAAI;AAChBR,kBAAAA,gBAAgB,GAAG;AACjBU,oBAAAA,KAAK,EAAE1I,KAAK,CAAC2I,iBADI;AAEjBC,oBAAAA,OAAO,EAAEJ,QAAQ,CAACjC,YAFD;AAGjBsC,oBAAAA,IAAI,EAAE;AAHW,mBAAnB;;AAKA,sBAAIL,QAAQ,IAAIA,QAAQ,CAACb,IAAT,KAAkB0B,SAAlC,EAA6C;AAC3C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACArB,oBAAAA,gBAAgB,GAAG;AACjBU,sBAAAA,KAAK,EAAE1I,KAAK,CAAC8I,kBADI;AAEjBF,sBAAAA,OAAO,EAAE5I,KAAK,CAAC+I,aAFE;AAGjBF,sBAAAA,IAAI,EAAE;AAHW,qBAAnB;;AAKA,oBAAA,MAAI,CAACxI,KAAL,CAAW2I,OAAX,CAAmBC,IAAnB,CAAwBnJ,QAAQ,GAAGC,UAAU,CAACmJ,KAAX,CAAiBC,IAApD;AACD;AACF,iBArDoB,WAsDd,UAAAjI,KAAK,EAAI;AACd8G,kBAAAA,gBAAgB,GAAG;AACjBU,oBAAAA,KAAK,EAAE1I,KAAK,CAAC2I,iBADI;AAEjBC,oBAAAA,OAAO,EAAE5I,KAAK,CAACsJ,kBAFE;AAGjBT,oBAAAA,IAAI,EAAE;AAHW,mBAAnB;AAMA,yBAAOL,QAAP;AACD,iBA9DoB,CAvC3B;;AAAA;AAuCUA,gBAAAA,QAvCV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyGIR,gBAAAA,gBAAgB,GAAG;AACjBU,kBAAAA,KAAK,EAAE1I,KAAK,CAAC2I,iBADI;AAEjBC,kBAAAA,OAAO,EAAE5I,KAAK,CAACsJ,kBAFE;AAGjBT,kBAAAA,IAAI,EAAE;AAHW,iBAAnB;;AAzGJ;AAgHE,oBACEb,gBAAgB,KAAKqB,SAArB,IACArB,gBAAgB,CAACU,KAAjB,KAA2BW,SAD3B,IAEArB,gBAAgB,CAACY,OAAjB,KAA6BS,SAF7B,IAGA,OAAOrB,gBAAgB,CAACY,OAAxB,KAAoC,QAHpC,IAIAZ,gBAAgB,CAACa,IAAjB,KAA0BQ,SAL5B,EAME;AACA,uBAAKE,cAAL,GAAsB5J,KAAK,CAAC6J,kBAAN,CAAyB,KAAKD,cAA9B,CAAtB;;AACA,sBAAI,KAAKA,cAAL,IAAuBF,SAA3B,EAAsC;AAChCI,oBAAAA,YADgC,GACjB;AACjBf,sBAAAA,KAAK,EAAEV,gBAAgB,CAACU,KADP;AAEjBE,sBAAAA,OAAO,EAAEZ,gBAAgB,CAACY,OAFT;AAGjBC,sBAAAA,IAAI,EAAEb,gBAAgB,CAACa;AAHN,qBADiB,EAMpC;;AACAY,oBAAAA,YAAY,GAAGC,MAAM,CAACC,MAAP,CAActK,mBAAd,EAAmCoK,YAAnC,CAAf;AACA,yBAAKF,cAAL,GAAsB5J,KAAK,CAACiK,eAAN,CAAsBH,YAAtB,CAAtB;AACD;;AACD7J,kBAAAA,WAAW,CAACoI,gBAAZ,CAA6BA,gBAA7B;AACD;;AACD,qBAAKlD,UAAL,IAAmB,KAAKlD,QAAL,CAAc;AAAEoE,kBAAAA,OAAO,EAAE;AAAX,iBAAd,CAAnB;;AApIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAuIA,kBAAS;AAAA;;AACP,UAAQ6D,OAAR,GAAoB,KAAKxJ,KAAzB,CAAQwJ,OAAR;AACA,UAAMC,QAAQ,GAAG;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAjB;AACA,0BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,GAAG,EAAEvL,IAAV;AAAgB,QAAA,GAAG,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,eAME;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,EAAE,EAAC,YAAT;AAAsB,QAAA,UAAU,MAAhC;AAAiC,QAAA,QAAQ,EAAE,KAAK2H,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,eAAe,EAAE;AAAE6D,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWyB,SANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAKV,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWoC,cADpB;AAEE,QAAA,UAAU,EAAE,KAAKpC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,WAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CADF,eAoBE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,aADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAW4B,UAJpB;AAKE,2BAAgB,oBALlB;AAME,QAAA,QAAQ,EAAE,KAAKb,eANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eASE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWiJ,eADpB;AAEE,QAAA,UAAU,EAAE,KAAKjJ,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF,CApBF,eAsCE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,YAAY,EAAC,KAJf;AAKE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW2B,QALpB;AAME,2BAAgB,oBANlB;AAOE,QAAA,QAAQ,EAAE,KAAKZ,eAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAUE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWqC,aADpB;AAEE,QAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,UAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,CADF,CAtCF,eAyDE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWqB,KAJpB;AAKE,2BAAgB,oBALlB;AAME,QAAA,QAAQ,EAAE,KAAKN,eANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eASE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWiC,UADpB;AAEE,QAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF,CAzDF,eA2EE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWsB,QALpB;AAME,2BAAgB,oBANlB;AAOE,QAAA,QAAQ,EAAE,KAAKT,mBAPjB;AAQE,QAAA,UAAU,EAAE;AAAEqI,UAAAA,SAAS,EAAE1K;AAAb,SARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKwB,KAAL,CAAWkC,aADpB;AAEE,QAAA,UAAU,EAAE,KAAKlC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,UAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CA3EF,eA+FE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,kBADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,IAAI,EAAC,iBAJP;AAKE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWuB,eALpB;AAME,2BAAgB,oBANlB;AAOE,QAAA,QAAQ,EAAE,KAAKV,mBAPjB;AAQE,QAAA,UAAU,EAAE;AAAEqI,UAAAA,SAAS,EAAE1K;AAAb,SARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKwB,KAAL,CAAWmC,oBADpB;AAEE,QAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,iBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CA/FF,eAmHE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWW,KAJpB;AAKE,2BAAgB,oBALlB;AAME,QAAA,QAAQ,EAAE,KAAKnB,iBANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eASE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKQ,KAAL,CAAWwC,UADpB;AAEE,QAAA,UAAU,EAAE,KAAKxC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF,CAnHF,eAqIE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,uBAAD;AAAyB,QAAA,KAAK,EAAE3C,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,kBAAD,CACE;AADF;AAEE,QAAA,MAAM,EAAC,YAFT;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,EAAE,EAAC,oBAJL;AAKE,QAAA,KAAK,EAAC,KALR;AAME,QAAA,IAAI,EAAC,KANP;AAOE,QAAA,KAAK,EAAE,KAAK4C,KAAL,CAAW6B,GAPpB;AAQE,QAAA,OAAO,EAAE,KAAKvC,OARhB;AASE,QAAA,cAAc,qCAA8B,KAAKuF,iBAAnC,CAThB;AAUE,QAAA,QAAQ,EAAE,KAAKL,gBAVjB;AAWE,QAAA,SAAS,EAAC,oBAXZ;AAYE,QAAA,kBAAkB,EAAExF,KAAK,CAACmK,WAZ5B,CAaE;AAbF;AAcE,QAAA,mBAAmB,EAAE;AACnB,wBAAc,aADK;AAEnBH,UAAAA,SAAS,EAAE;AAFQ,SAdvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,CArIF,eA+JE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,MAAD;AACE,QAAA,EAAE,EAAC,QADL;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,YAAY,EAAC,KAJf;AAKE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW8B,MALpB;AAME,QAAA,KAAK,EAAC,OANR;AAOE,QAAA,QAAQ,EAAE,kBAAAyC,KAAK;AAAA,iBAAI,MAAI,CAACxD,eAAL,CAAqBwD,KAArB,CAAJ;AAAA,SAPjB;AAQE,QAAA,KAAK,eAAE,oBAAC,KAAD;AAAO,UAAA,EAAE,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVF,EAWGnG,UAAU,GACPsK,MAAM,CAACU,IAAP,CAAYhL,UAAZ,EAAwBiL,GAAxB,CAA4B,UAACC,IAAD,EAAOC,GAAP,EAAe;AACzC,4BACE,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAED,IAAjB;AAAuB,UAAA,GAAG,EAAEC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGnL,UAAU,CAACkL,IAAD,CADb,CADF;AAKD,OAND,CADO,GAQP,IAnBN,CAFF,eAuBE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKtJ,KAAL,CAAWwJ,WADpB;AAEE,QAAA,UAAU,EAAE,KAAKxJ,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,CADF,CADF,CA/JF,eAiME,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AACE,QAAA,SAAS,EAAC,qCADZ;AAEE,QAAA,OAAO,EAAC,MAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,oBAAC,MAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAW+E,IAJpB,CAKE;AALF;AAME,QAAA,KAAK,EAAE;AACLgE,UAAAA,KAAK,EAAE;AADF,SANT;AASE,QAAA,QAAQ,EAAE,IATZ;AAUE,QAAA,QAAQ,EAAE,IAVZ;AAWE,QAAA,QAAQ,EAAE,KAAKhI,eAXjB;AAYE,QAAA,KAAK,eAAE,oBAAC,KAAD;AAAO,UAAA,EAAE,EAAC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAZT;AAaE,QAAA,UAAU,EAAE;AACV0I,UAAAA,QAAQ,EAAE;AADA,SAbd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAiBE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAkBE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,UAAhB;AAA2B,QAAA,QAAQ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF,CAPF,eA6BE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKzJ,KAAL,CAAWyC,SADpB;AAEE,QAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BF,CADF,CADF,CAjMF,eAyOE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAwB,QAAA,KAAK,EAAE;AAAC2J,UAAAA,OAAO,EAAC;AAAT,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE,KAAK1J,KAAL,CAAWgC,QAHpB;AAIE,2BAAgB,oBAJlB;AAKE,QAAA,QAAQ,EAAE,KAAKjB,eALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAQE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAW2J,aADpB;AAEE,QAAA,UAAU,EAAE,KAAK3J,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,UAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADF,CAzOF,CADF,eA2PE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,EAAd;AAAkB,QAAA,EAAE,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,KAAK,EAAE;AAAC6J,UAAAA,GAAG,EAAC,GAAL;AAAUC,UAAAA,MAAM,EAAC;AAAjB,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF,eAIE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,eAAe,EAAE;AAAEb,UAAAA,SAAS,EAAE;AAAb,SAHnB;AAIE,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW+B,OAJpB;AAKE,2BAAgB,oBALlB;AAME,QAAA,QAAQ,EAAE,KAAKqC,kBANjB;AAOE,QAAA,UAAU,EAAE;AAAE8E,UAAAA,SAAS,EAAErL;AAAb,SAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAUE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKmC,KAAL,CAAWsC,YADpB;AAEE,QAAA,UAAU,EAAE,KAAKtC,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,SAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,CADF,CAJF,eAsBE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,cADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,aAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW0C,WANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAK3B,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAW8C,gBADpB;AAEE,QAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CAtBF,eAyCE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW4C,IANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAK7B,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAWI,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWgD,SADpB;AAEE,QAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,CADA,CAzCF,eA4DE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,SAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW2C,OANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAK5B,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAW+C,YADpB;AAEE,QAAA,UAAU,EAAE,KAAK/C,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,SAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CA5DF,eA+EE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWA,KANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAKe,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAWE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWiD,UADpB;AAEE,QAAA,UAAU,EAAE,KAAKjD,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CA/EF,eAkGE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,CAAd;AAAiB,QAAA,EAAE,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG,oBAAC,SAAD;AACE,QAAA,KAAK,EAAC,cADR;AAEE,QAAA,eAAe,EAAE;AAAEiJ,UAAAA,SAAS,EAAE;AAAb,SAFnB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,cAJP;AAKE,QAAA,YAAY,EAAC,KALf;AAME,QAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAW8J,QANpB;AAOE,2BAAgB,oBAPlB;AAQE,QAAA,QAAQ,EAAE,KAAK/I,eARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,eAWG,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CAAC,KAAKf,KAAL,CAAWkD,iBADpB;AAEE,QAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWD,UAFzB;AAGE,QAAA,SAAS,EAAC,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXH,CADD,CAlGF,CA3PF,eAoXE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,SAAS,EAAE,KAAKC,KAAL,CAAWgF,OAAX,GAAqB,eAArB,GAAuC,EAFpD;AAGE,QAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAWgF,OAAX,IAAsB,CAAC,KAAKoB,YAAL,EAHnC;AAIE,QAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOG,KAAKpG,KAAL,CAAWgF,OAAX,iBACC,oBAAC,gBAAD;AACE,QAAA,IAAI,EAAE,EADR;AAEE,QAAA,SAAS,EAAC,gBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CADF,eAeE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,OAAO,EAAE,KAAKhE,SAFhB;AAGE,QAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAfF,eAsBE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAEjC,UAAU,CAACmJ,KAAX,CAAiBC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,SAAS,EAAC,UAFZ;AAGE,QAAA,KAAK,EAAEW,QAHT;AAIE,QAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAtBF,CApXF,CADF,CADF,CAPF,CADF,CAHF,CADF;AA0aD;;;;EA38BkBtM,KAAK,CAACC,S;;AA88B3B,eAAe2C,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Button,\n  FormGroup,\n  FormControl,\n  InputLabel,\n  TextField,\n  MenuItem,\n  Select,\n  Input,\n  CircularProgress\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\n\nimport { Link } from \"react-router-dom\";\nimport logo from \"assets/img/front-logo.png\";\n\n// core components\nimport GridItem from \"components/Grid/GridItem.jsx\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport \"assets/css/signup.css\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport {\n  EMAIL_REGEX,\n  ZIP_CODE_LENGTH,\n  MIN_PASSWORD_LENGTH,\n  PASSWORD_PATTERN,\n  DIGIT_ONLY,\n  ZIPCODE_REGEX,\n  MIN_AGE_YEARS,\n  PHONE_NO_INVALID_LENGTH,\n  genderType,\n  NotificationOptions,\n  INVALID_DATA_POST,\n  STATUS_CREATED,\n  MAX_PASSWORD_LENGTH\n} from \"__helpers/constants\";\n\nimport PhoneNumber from \"awesome-phonenumber\";\nimport { apiPath } from \"api\";\n\nimport { store } from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { userService } from \"_services/user.service\";\nimport ReactNotification from \"react-notifications-component\";\nimport { basePath, baseRoutes } from \"base-routes\";\n\nimport enMsg from \"__helpers/locale/en/en\";\nimport DatePicker from \"react-date-picker\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { NotificationContainer } from \"react-notifications\";\n\nclass Signup extends React.Component {\n  maxDate = new Date();\n  constructor(props) {\n    super(props);\n    this.maxDate.setYear(this.maxDate.getFullYear() - MIN_AGE_YEARS);\n    this.dateUtility = new DateFnsUtils();\n\n    this.maxDateForMessage = this.dateUtility.format(\n      this.maxDate,\n      \"MM/dd/yyyy\"\n    );\n    this.state = {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      id: null,\n      firstName: \"\",\n      mInit: \"\",\n      lastName: \"\",\n      middleName: \"\",\n      phone: \"\",\n      dob: null,\n      gender: \"\",\n      zipcode: \"\",\n      imageRef: \"\",\n      role: \"merchant\",\n\n      companyName: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      businessType: \"\",\n      formErrors: {\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        id: \"\",\n        firstName: \"\",\n        mInit: \"\",\n        lastName: \"\",\n        middleName: \"\",\n        phone: \"\",\n        dob: \"\",\n        gender: \"\",\n        zipcode: \"\",\n        imageRef: \"\",\n        role: \"merchant\",\n\n        companyName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        businessType: \"\",\n      },\n      emailValid: false,\n      passwordValid: false,\n      confirmPasswordValid: false,\n      firstNameValid: false,\n      lastNameValid: false,\n      /* optional fields default is valid */\n      zipcodeValid: false,\n      dobValid: true,\n      phoneValid: true,\n      roleValid: true,\n      loading: false,\n\n      companyNameValid: false,\n      addressValid: false,\n      cityValid: false,\n      stateValid: false,\n      businessTypeValid: false,\n    };\n\n    this._isMounted = false;\n    this.apiPath = apiPath.signup;\n    this.clientAuthToken = null;\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUserInput = this.handleUserInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateField = this.validateField.bind(this);\n    this.handleZipCodeInput = this.handleZipCodeInput.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.handlePasswordInput = this.handlePasswordInput.bind(this);\n  }\n\n  handlephoneNumber = e => {\n    const name = e.target.name;\n    let value = e.target.value;\n    const phoneNumberValidation = new PhoneNumber(e.target.value).toJSON();\n\n    let formErrors = this.state.formErrors;\n    let phoneNumberValid = true;\n    let error = \"\";\n\n    if (value.trim().length) {\n      switch (phoneNumberValidation.possibility) {\n        // case \"is-possible\":\n        //   error = \"\";\n        //   if (\n        //     phoneNumberValidation.number.significant &&\n        //     phoneNumberValidation.number.significant.length ==\n        //       PHONE_NO_INVALID_LENGTH\n        //   ) {\n        //     error = enMsg.phoneTooShort;\n        //   }\n        //   break;\n        case \"invalid-country-code\":\n          error = enMsg.phoneInvalidCountryCode;\n          break;\n        case \"too-long\":\n          error = enMsg.phoneTooLong;\n          break;\n        case \"too-short\":\n          error = enMsg.phoneTooShort;\n          break;\n        case \"unknown\":\n          error = enMsg.phoneUnknown;\n          break;\n        default:\n          phoneNumberValidation.valid = true;\n      }\n      phoneNumberValid = phoneNumberValidation.valid;\n    }\n    formErrors.phone = error;\n    // if(phoneNumberValidation.number.international !== undefined){\n    //   value  = phoneNumberValidation.number.international;\n    // }\n    this.setState({\n      [name]: value,\n      formErrors: formErrors,\n      phoneValid: phoneNumberValid\n    });\n  };\n\n  handlePasswordInput = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    if (value.length > MAX_PASSWORD_LENGTH) {\n      return true;\n    }\n\n    this.setState({ [name]: value }, () => {\n      this.validateField(name, value);\n    });\n  };\n\n  handleUserInput = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    this.setState({ [name]: value }, () => {\n      this.validateField(name, value);\n    });\n  };\n\n  resetForm = () => {\n    const node = ReactDOM.findDOMNode(this);\n    node.querySelector(\"#signUpForm\").reset();\n    this.setState({\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      id: \"\",\n      firstName: \"\",\n      mInit: \"\",\n      lastName: \"\",\n      middleName: \"\",\n      phone: \"\",\n      dob: null,\n      gender: \"\",\n      zipcode: \"\",\n      imageRef: \"\",\n      emailValid: false,\n      passwordValid: false,\n      confirmPasswordValid: false,\n      firstNameValid: false,\n      lastNameValid: false,\n      /* optional fields default is valid */\n      zipcodeValid: false,\n      dobValid: true,\n      phoneValid: true,\n      roleValid: true,\n\n      companyName: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      businessType: \"\",        \n      companyNameValid: false,\n      addressValid: false,\n      cityValid: false,\n      stateValid: false,\n      businessTypeValid: false \n    });\n    const labelNodes = node.querySelectorAll(\n      \".MuiInputLabel-shrink.MuiFormLabel-filled:not(.disabled-field-label)\"\n    );\n\n    if (typeof labelNodes == \"object\") {\n      labelNodes.forEach(function(currentValue, currentIndex, listObj) {\n        return currentValue.classList.remove(\n          \"MuiInputLabel-shrink\",\n          \"MuiFormLabel-filled\"\n        );\n      });\n    }\n\n    // const errorNodes = node.querySelectorAll(\"p.error-class\");\n    // if (typeof errorNodes == \"object\") {\n    //   errorNodes.forEach(function(currentValue, currentIndex, listObj) {\n    //     currentValue.innerHtml = \"&nbsp;\";\n    //   });\n    // }\n  };\n\n  componentDidMount = async () => {\n    this.clientAuthToken = await userService.generateClientAouth();\n    this._isMounted = true;\n    const spinner = document.getElementById('loadingSpinner');\n    if (spinner && !spinner.hasAttribute('hidden')) {\n      spinner.setAttribute('hidden', 'true');\n    }\n  };\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  handleZipCodeInput = e => {\n    const value = e.target.value;\n    if (value.length > ZIP_CODE_LENGTH) {\n      return true;\n    }\n    if (value.trim() == \"\" || value.match(DIGIT_ONLY)) {\n      this.setState({ zipcode: value }, () => {\n        this.validateField(\"zipcode\", value);\n      });\n    }\n  };\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let emailValid = this.state.emailValid;\n    let passwordValid = this.state.passwordValid;\n    let confirmPasswordValid = this.state.confirmPasswordValid;\n    let firstNameValid = this.state.firstNameValid;\n    let lastNameValid = this.state.lastNameValid;\n    let zipcodeValid = this.state.zipcodeValid;\n// Create adnetwork data\n    let companyNameValid = this.state.companyNameValid;\n    let addressValid = this.state.addressValid;\n    let cityValid = this.state.cityValid;\n    let stateValid = this.state.stateValid;\n    let businessTypeValid = this.state.businessTypeValid;\n\n    switch (fieldName) {\n      case \"email\":\n        emailValid = value.trim().match(EMAIL_REGEX);\n        fieldValidationErrors.email = emailValid ? \"\" : enMsg.inValidEmail;\n        break;\n\n      case \"password\":\n        let errorMessage = \"\";\n        passwordValid = true;\n        if (value.trim().length < MIN_PASSWORD_LENGTH) {\n          errorMessage = enMsg.shortPassword;\n          passwordValid = false;\n        } else if (!value.trim().match(PASSWORD_PATTERN)) {\n          errorMessage = enMsg.passwordPatternValidation;\n          passwordValid = false;\n        } else if (this.state.confirmPassword === value) {\n          confirmPasswordValid = true;\n        }\n        fieldValidationErrors.password = errorMessage;\n        break;\n\n      case \"confirmPassword\":\n        errorMessage = \"\";\n        confirmPasswordValid = true;\n        if (value.trim().length && this.state.password !== value) {\n          confirmPasswordValid = false;\n          errorMessage = enMsg.confirmPasswordValidation;\n        }\n        fieldValidationErrors.confirmPassword = errorMessage;\n        break;\n\n      case \"firstName\":\n        firstNameValid = value.trim().length ? true : false;\n        fieldValidationErrors.firstName = firstNameValid\n          ? \"\"\n          : enMsg.firstNameRequired;\n        break;\n\n      case \"lastName\":\n        lastNameValid = value.trim().length ? true : false;\n        fieldValidationErrors.lastName = lastNameValid\n          ? \"\"\n          : enMsg.lastNameRequired;\n        break;\n      case \"zipcode_lock\":\n        zipcodeValid = false;\n        let error = \"\";\n        if (\n          value.trim().length &&\n          value.match(DIGIT_ONLY) &&\n          value.trim().length != ZIP_CODE_LENGTH\n        ) {\n          error = enMsg.zipCodeMinLengthError;\n        } else if (value.trim().length && !value.match(ZIPCODE_REGEX)) {\n          error = enMsg.invalidZipCode;\n        } else {\n          zipcodeValid = true;\n        }\n        fieldValidationErrors.zipcode = error;\n        break;\n        \n        case \"zipcode\":\n          zipcodeValid = true;\n          zipcodeValid = value.match(ZIPCODE_REGEX);\n          if (value.match(DIGIT_ONLY) && value.trim().length != ZIP_CODE_LENGTH) {\n            fieldValidationErrors.zipcode = enMsg.zipCodeMinLengthError;\n          } else if (!value.match(ZIPCODE_REGEX)) {\n            fieldValidationErrors.zipcode = enMsg.invalidZipCode;\n          }\n          break;\n\n      case \"companyName\":\n        companyNameValid = value.trim().length ? true : false;\n        fieldValidationErrors.companyName = enMsg.companyNameRequired;\n        break;\n      case \"address\":\n        addressValid = value.trim().length ? true : false;\n        fieldValidationErrors.address = enMsg.addressRequired;\n        break;\n      case \"city\":\n        cityValid = value.trim().length ? true : false;\n        fieldValidationErrors.city = enMsg.cityRequired;\n        break;\n      case \"state\":\n        stateValid = value.trim().length ? true : false;\n        fieldValidationErrors.state = enMsg.stateRequired;\n        break;\n      case \"businessType\":\n        businessTypeValid = value.trim().length ? true : false;\n        fieldValidationErrors.businessType = enMsg.businessNameeRequired;\n        break;\n      default:\n        break;\n    }\n    this.setState(\n      {\n        formErrors: fieldValidationErrors,\n        emailValid: emailValid,\n        passwordValid: passwordValid,\n        confirmPasswordValid: confirmPasswordValid,\n        firstNameValid: firstNameValid,\n        lastNameValid: lastNameValid,\n        zipcodeValid: zipcodeValid,\n        companyNameValid: companyNameValid,\n        addressValid: addressValid,\n        cityValid: cityValid,\n        stateValid: stateValid,\n        businessTypeValid: businessTypeValid,\n      },\n      this.validateForm\n    );\n  }\n\n  validateForm() {\n    return (\n      this.state.emailValid &&\n      this.state.passwordValid &&\n      this.state.confirmPasswordValid &&\n      this.state.firstNameValid &&\n      this.state.lastNameValid &&\n      this.state.zipcodeValid &&\n      this.state.phoneValid &&\n      this.state.dobValid &&\n      this.state.companyNameValid &&\n      this.state.addressValid &&\n      this.state.cityValid &&\n      this.state.stateValid &&\n      this.state.businessTypeValid\n    );\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  };\n\n  handleDateChange = event => {\n    const name = \"dob\";\n    let value = event;\n    let dobValid = true;\n\n    if (event != null && !this.dateUtility.isValid(event)) {\n      dobValid = false;\n    }\n    this.setState({\n      [name]: value,\n      dobValid: dobValid\n    });\n  };\n\n  async handleSubmit(event) {\n    this.setState({ loading: true });\n    event.preventDefault();\n\n    const adnetworkData = {\n      companyName: this.state.companyName,\n      address: this.state.address,\n      city: this.state.city,\n      state: this.state.state,\n      zipcode: this.state.zipcode,\n      busbusinessType: this.state.businessType,\n    };\n    let adnetworkArr = [adnetworkData];\n    let dob = this.state.dob;\n    if (dob && this.dateUtility.isValid(dob)) {\n      dob = this.dateUtility.format(new Date(dob), \"yyyy-MM-dd\");\n    }\n    const data = {\n      adNetworks: [],\n      user: {\n        // id: this.state.id,\n        // confirmPassword: this.state.confirmPassword,\n        email: this.state.email,\n        password: this.state.password,\n        fName: this.state.firstName,\n        mInit: this.state.middleName,\n        lName: this.state.lastName,\n        mName: this.state.middleName,\n        phone: this.state.phone,\n        dob: dob,\n        gender: this.state.gender,\n        zipCode: this.state.zipcode,\n        imageRef: this.state.imageRef\n        // roleValid: this.state.role\n      },\n      adNetworks: [adnetworkData],\n    };\n    let showNotification = {};\n    try {\n      const response = await fetch(this.apiPath, {\n        method: \"POST\",\n        headers: clientTokenHeader(),\n        body: JSON.stringify(data)\n      })\n        .then(response => {\n          if (response.status == INVALID_DATA_POST) {\n            showNotification = {\n              title: enMsg.signUpFailedTitle,\n              message: response.errorMessage,\n              type: \"danger\"\n            };\n\n          } else if (response.status === STATUS_CREATED) {\n            showNotification = {\n              title: enMsg.successSignUpTitle,\n              message: enMsg.successSignUp,\n              type: \"success\"\n            };\n            this.props.history.push(basePath + baseRoutes.login.path);\n          } else {\n            showNotification = {\n              title: enMsg.signUpFailedTitle,\n              message: response,\n              type: \"danger\"\n            };\n          }\n          return response.json();\n        })\n        .then(response => {\n          showNotification = {\n            title: enMsg.signUpFailedTitle,\n            message: response.errorMessage,\n            type: \"danger\"\n          };\n          if (response && response.user !== undefined) {\n            //   do not store token as of now\n            // let user = {\n            //   authdata: window.btoa(data.email + \":\" + data.password),\n            //   accessToken: response.accessToken\n            // };\n\n            // localStorage.setItem(\"user\", JSON.stringify(user));\n            // const { from } = this.props.location.state || {\n            //   from: { pathname: \"/\" }\n            // };\n            showNotification = {\n              title: enMsg.successSignUpTitle,\n              message: enMsg.successSignUp,\n              type: \"success\"\n            };\n            this.props.history.push(basePath + baseRoutes.login.path);\n          }\n        })\n        .catch(error => {\n          showNotification = {\n            title: enMsg.signUpFailedTitle,\n            message: enMsg.networkFailedError,\n            type: \"danger\"\n          };\n\n          return response;\n        });\n\n      // throw new Error(error);\n    } catch (error) {\n      showNotification = {\n        title: enMsg.signUpFailedTitle,\n        message: enMsg.networkFailedError,\n        type: \"danger\"\n      };\n    }\n\n    if (\n      showNotification !== undefined &&\n      showNotification.title !== undefined &&\n      showNotification.message !== undefined &&\n      typeof showNotification.message === \"string\" &&\n      showNotification.type !== undefined\n    ) {\n      this.notificationID = store.removeNotification(this.notificationID);\n      if (this.notificationID == undefined) {\n        let notifiaciton = {\n          title: showNotification.title,\n          message: showNotification.message,\n          type: showNotification.type\n        };\n        // debugger;\n        notifiaciton = Object.assign(NotificationOptions, notifiaciton);\n        this.notificationID = store.addNotification(notifiaciton);\n      }\n      userService.showNotification(showNotification)\n    }\n    this._isMounted && this.setState({ loading: false });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const stylebtn = { color: \"#fff !important\" };\n    return (\n      <div className=\"login-outer-cover\">\n        {/* <NotificationContainer/> */}\n        {/* <ReactNotification /> */}\n        <div className=\"login-cover gray-bg-color\">\n          <div className=\"login-inner-cover\">\n            <div className=\"logo-content loginLogoMain\">\n              <div className=\"loginLogoInner\">\n                <img src={logo} alt=\"logo\" />\n              </div>\n            </div>\n            <div className=\"green-header\">Signup</div>\n            <div className=\"login-content\">\n              <div className=\"Login\">\n                <form id=\"signUpForm\" noValidate onSubmit={this.handleSubmit}>\n                  <GridContainer>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"First Name\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"firstName\"\n                          autoComplete=\"off\"\n                          value={this.state.firstName}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.firstNameValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"firstName\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Middle Name\"\n                          type=\"text\"\n                          name=\"middleName\"\n                          value={this.state.middleName}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.middleNameValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"middleName\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Last Name\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          name=\"lastName\"\n                          autoComplete=\"off\"\n                          value={this.state.lastName}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.lastNameValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"lastName\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Email\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          name=\"email\"\n                          value={this.state.email}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.emailValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"email\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Password\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"password\"\n                          name=\"password\"\n                          value={this.state.password}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handlePasswordInput}\n                          inputProps={{ maxLength: MAX_PASSWORD_LENGTH }}\n                        />\n                        <FormErrors\n                          show={!this.state.passwordValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"password\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Confirm Password\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"password\"\n                          name=\"confirmPassword\"\n                          value={this.state.confirmPassword}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handlePasswordInput}\n                          inputProps={{ maxLength: MAX_PASSWORD_LENGTH }}\n                        />\n                        <FormErrors\n                          show={!this.state.confirmPasswordValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"confirmPassword\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <TextField\n                          label=\"Phone\"\n                          name=\"phone\"\n                          autoComplete=\"off\"\n                          value={this.state.phone}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handlephoneNumber}\n                        />\n                        <FormErrors\n                          show={!this.state.phoneValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"phone\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup>\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                          <KeyboardDatePicker\n                            // variant=\"inline\"\n                            format=\"MM/dd/yyyy\"\n                            margin=\"normal\"\n                            id=\"date-picker-dialog\"\n                            label=\"DOB\"\n                            name=\"dob\"\n                            value={this.state.dob}\n                            maxDate={this.maxDate}\n                            maxDateMessage={`Date should not be after ${this.maxDateForMessage}`}\n                            onChange={this.handleDateChange}\n                            className=\"KeyboardDatePicker\"\n                            invalidDateMessage={enMsg.invalidDate}\n                            // closeAfterSelect={true}\n                            KeyboardButtonProps={{\n                              \"aria-label\": \"change date\",\n                              className: \"date-picker-span\"\n                            }}\n                          />\n                        </MuiPickersUtilsProvider>\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className=\"select-gender\">\n                        <FormControl>\n                          <InputLabel htmlFor=\"gender\">Gender</InputLabel>\n                          <Select\n                            id=\"gender\"\n                            color=\"secondary\"\n                            name=\"gender\"\n                            autoComplete=\"off\"\n                            value={this.state.gender}\n                            width=\"100px\"\n                            onChange={event => this.handleUserInput(event)}\n                            input={<Input id=\"gender\" />}\n                          >\n                            <MenuItem value=\"\">Select Gender</MenuItem>\n                            {genderType\n                              ? Object.keys(genderType).map((item, key) => {\n                                  return (\n                                    <MenuItem value={item} key={key}>\n                                      {genderType[item]}\n                                    </MenuItem>\n                                  );\n                                })\n                              : null}\n                          </Select>\n                          <FormErrors\n                            show={!this.state.genderValid}\n                            formErrors={this.state.formErrors}\n                            fieldName=\"gender\"\n                          />\n                        </FormControl>\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className={\"profile-role\"}>\n                        <FormControl>\n                          <InputLabel\n                            className=\"disabled-field-label required-label\"\n                            htmlFor=\"role\"\n                          >\n                            Role\n                          </InputLabel>\n                          <Select\n                            id=\"role\"\n                            color=\"secondary\"\n                            name=\"role\"\n                            value={this.state.role}\n                            // width=\"100px\"\n                            style={{\n                              color: \"#000\"\n                            }}\n                            required={true}\n                            disabled={true}\n                            onChange={this.handleUserInput}\n                            input={<Input id=\"roleInput\" />}\n                            inputProps={{\n                              disabled: true\n                            }}\n                          >\n                            <MenuItem value=\"\">Role</MenuItem>\n                            <MenuItem value=\"merchant\" selected>\n                              Merchant\n                            </MenuItem>\n                          </Select>\n                          <FormErrors\n                            show={!this.state.roleValid}\n                            formErrors={this.state.formErrors}\n                            fieldName=\"role\"\n                          />\n                        </FormControl>\n                      </FormGroup>\n                    </GridItem>\n\n                    <GridItem md={6} xs={6} style={{display:\"none\"}}>\n                      <FormGroup className={\"image-ref-group\"}>\n                        <TextField\n                          label=\"Image Ref\"\n                          name=\"name\"\n                          value={this.state.imageRef}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.imageRefValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"imageRef\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n                  </GridContainer>\n                  <GridContainer>\n                    <GridItem md={12} xs={12}>\n                      <div className=\"green-header\" style={{top:\"0\", margin:\"30px auto\"}}>AdNetwork</div>\n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className={\"signup-zip\"}>\n                        <TextField\n                          label=\"Zip Code\"\n                          name=\"zipcode\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          value={this.state.zipcode}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleZipCodeInput}\n                          inputProps={{ maxLength: ZIP_CODE_LENGTH }}\n                        />\n                        <FormErrors\n                          show={!this.state.zipcodeValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"zipcode\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className={\"cusForm\"}>\n                        <TextField\n                          label=\"Company Name\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"companyName\"\n                          autoComplete=\"off\"\n                          value={this.state.companyName}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.companyNameValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"companyName\"\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                    <FormGroup className={\"cusForm\"}>\n                        <TextField\n                          label=\"City\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"city\"\n                          autoComplete=\"off\"\n                          value={this.state.city}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.cityValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"city\"\n                        />\n                      </FormGroup>  \n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className={\"cusForm\"}>\n                        <TextField\n                          label=\"Address\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"address\"\n                          autoComplete=\"off\"\n                          value={this.state.address}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.addressValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"address\"\n                        />\n                      </FormGroup>  \n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                      <FormGroup className={\"cusForm\"}>\n                        <TextField\n                          label=\"State\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"state\"\n                          autoComplete=\"off\"\n                          value={this.state.state}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.stateValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"state\"\n                        />\n                      </FormGroup>  \n                    </GridItem>\n                    <GridItem md={6} xs={6}>\n                     <FormGroup className={\"cusForm\"}>\n                        <TextField\n                          label=\"BusinessType\"\n                          InputLabelProps={{ className: \"required-label\" }}\n                          type=\"text\"\n                          name=\"businessType\"\n                          autoComplete=\"off\"\n                          value={this.state.business}\n                          data-validators=\"isRequired,isAlpha\"\n                          onChange={this.handleUserInput}\n                        />\n                        <FormErrors\n                          show={!this.state.businessTypeValid}\n                          formErrors={this.state.formErrors}\n                          fieldName=\"businessType\"\n                        />\n                      </FormGroup>  \n                    </GridItem>\n\n                    \n                  </GridContainer>\n\n                  <div className=\"login-forgot\">\n                    <Button\n                      color=\"primary\"\n                      className={this.state.loading ? \"buttonSuccess\" : \"\"}\n                      disabled={this.state.loading || !this.validateForm()}\n                      type=\"submit\"\n                    >\n                      Signup\n                      {this.state.loading && (\n                        <CircularProgress\n                          size={24}\n                          className=\"buttonProgress\"\n                        />\n                      )}\n                    </Button>\n                    <Button\n                      color=\"primary\"\n                      onClick={this.resetForm}\n                      type=\"button\"\n                    >\n                      Reset\n                    </Button>\n                    <Link to={baseRoutes.login.path}>\n                      <Button\n                        color=\"secondary\"\n                        className=\"back-btn\"\n                        style={stylebtn}\n                        type=\"button\"\n                      >\n                        Back\n                      </Button>\n                    </Link>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}