{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/html/reactjs/OrgManage/src/views/Records/ProjectPopup.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogActions, DialogContent, Select, DialogTitle, IconButton, TextField, MenuItem, InputLabel, Button } from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uid } from \"__helpers/utils\";\nimport { projectList } from 'js/actions';\nimport { userService } from \"_services/user.service\";\n\nvar AddProject = function AddProject(props) {\n  var openProjects = props.openProjects,\n      confirmModalClose = props.confirmModalClose,\n      loading = props.loading,\n      projectId = props.projectId;\n  var dispatch = useDispatch();\n  var projectListArr = useSelector(function (state) {\n    return state.projectList;\n  });\n  var updatedProject = projectListArr.filter(function (tList) {\n    if (tList.uid == projectId) {\n      return tList;\n    }\n  });\n  var errorList = {\n    projectName: \"\",\n    projectDescription: \"\"\n  };\n  var errorValidList = {\n    projectName: false,\n    projectDescription: false\n  };\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      getProject = _useState2[0],\n      setProject = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      getProjectDes = _useState4[0],\n      setProjectDes = _useState4[1];\n\n  var _useState5 = useState(errorList),\n      _useState6 = _slicedToArray(_useState5, 2),\n      getError = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(errorValidList),\n      _useState8 = _slicedToArray(_useState7, 2),\n      formValid = _useState8[0],\n      setFormValid = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      getProjectValid = _useState10[0],\n      setProjectValid = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loader = _useState12[0],\n      setLoader = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      getProjectDescriptionValid = _useState14[0],\n      setProjectDescriptionValid = _useState14[1];\n\n  useEffect(function () {\n    if (projectId) {\n      if (updatedProject && updatedProject.length) {\n        setProject(updatedProject[0].projectName);\n        setProjectDes(updatedProject[0].projectDesc);\n        setFormValid({});\n      } else {\n        var showNotification = {\n          title: 'Project Update',\n          message: 'Project not found',\n          type: \"danger\"\n        };\n        userService.showNotification(showNotification);\n        setTimeout(function () {\n          confirmModalClose();\n        }, 1000);\n      }\n    }\n  }, [openProjects]);\n\n  var validateForm = function validateForm() {\n    console.log(formValid);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var _updatedProject, data, showNotification;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setLoader(true);\n              projectListArr = projectListArr && projectListArr.length ? projectListArr : [];\n\n              if (projectId) {\n                _updatedProject = projectListArr.filter(function (tList) {\n                  if (tList.uid == projectId) {\n                    tList.projectName = getProject;\n                    tList.projectDesc = getProjectDes;\n                  }\n\n                  return tList;\n                });\n                dispatch(empList(_updatedProject));\n              } else {\n                data = {\n                  uid: uid(),\n                  projectName: getProject,\n                  projectDesc: getProjectDes,\n                  createDate: new Date()\n                };\n                projectListArr.push(data);\n                dispatch(empList(projectListArr));\n              }\n\n              setProject(\"\");\n              setProjectDes(\"\");\n              setLoader(false);\n              setFormValid(errorValidList);\n              confirmModalClose();\n              showNotification = {\n                title: projectId ? 'Update Project' : 'Create Project',\n                message: projectId ? 'Project updated successfully.' : 'Project created successfully.',\n                type: \"success\"\n              };\n              userService.showNotification(showNotification);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleInput = function handleInput(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    var projectValid = getProjectValid;\n    var projectDescriptionValid = getProjectDescriptionValid;\n    var getErrorList = getError;\n    var getFormValid = formValid;\n\n    switch (name) {\n      case 'projectName':\n        setProject(value);\n        projectValid = value.trim().length > 0;\n        getErrorList.projectName = projectValid ? '' : \"Enter project name\";\n\n        if (projectValid) {\n          delete getFormValid.projectName;\n        } else {\n          getFormValid.projectName = false;\n        }\n\n        break;\n\n      case 'projectDescription':\n        setProjectDes(value);\n        projectDescriptionValid = value.trim().length > 0;\n        getErrorList.projectDescription = projectDescriptionValid ? '' : \"Enter project description\";\n\n        if (projectDescriptionValid) {\n          delete getFormValid.projectDescription;\n        } else {\n          getFormValid.projectDescription = false;\n        }\n\n        break;\n    }\n\n    setProjectValid(projectValid);\n    setProjectDescriptionValid(projectDescriptionValid);\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    className: \"call-modal\",\n    maxWidth: 'lg',\n    open: openProjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    className: \"add-modal-title\",\n    id: \"discharge-planner-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, projectId ? \"Update\" : \"Create\", \" Project\", /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: confirmModalClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"\",\n    label: \"Project Name\",\n    className: \"full-width-input\",\n    name: \"projectName\",\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    value: getProject,\n    onChange: function onChange(e) {\n      return handleInput(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormErrors, {\n    show: !getProjectValid,\n    formErrors: getError,\n    fieldName: \"projectName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: \"Project Description\",\n    className: \"full-width-input\",\n    name: \"projectDescription\",\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    multiline: true,\n    rows: 3,\n    value: getProjectDes,\n    onChange: function onChange(e) {\n      return handleInput(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormErrors, {\n    show: !getProjectDescriptionValid,\n    formErrors: getError,\n    fieldName: \"projectDescription\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    className: \"modal-actions\",\n    justify: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"btn1\",\n    disabled: Object.entries(formValid || {}).length > 0 || loader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 24,\n    className: \"buttonProgress\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  }), projectId ? \"Update\" : \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    className: \"btn2\",\n    onClick: confirmModalClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, \"Cancel\"))));\n};\n\nexport default AddProject;","map":{"version":3,"sources":["/var/www/html/reactjs/OrgManage/src/views/Records/ProjectPopup.jsx"],"names":["React","useState","useEffect","Dialog","DialogActions","DialogContent","Select","DialogTitle","IconButton","TextField","MenuItem","InputLabel","Button","CloseIcon","CircularProgress","FormErrors","useDispatch","useSelector","uid","projectList","userService","AddProject","props","openProjects","confirmModalClose","loading","projectId","dispatch","projectListArr","state","updatedProject","filter","tList","errorList","projectName","projectDescription","errorValidList","getProject","setProject","getProjectDes","setProjectDes","getError","setError","formValid","setFormValid","getProjectValid","setProjectValid","loader","setLoader","getProjectDescriptionValid","setProjectDescriptionValid","length","projectDesc","showNotification","title","message","type","setTimeout","validateForm","console","log","handleSubmit","event","preventDefault","empList","data","createDate","Date","push","handleInput","e","target","name","value","projectValid","projectDescriptionValid","getErrorList","getFormValid","trim","className","Object","entries"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    Select,\n    DialogTitle,\n    IconButton,\n    TextField,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uid } from \"__helpers/utils\";\nimport { projectList } from 'js/actions';\nimport { userService } from \"_services/user.service\";\n\nconst AddProject = (props) => {\n    const { openProjects, confirmModalClose, loading, projectId } = props;\n    const dispatch = useDispatch();\n    let projectListArr = useSelector((state) => state.projectList);\n    const updatedProject = projectListArr.filter((tList) => {\n        if (tList.uid == projectId) {\n            return tList;\n        }\n    })\n    const errorList = {\n        projectName: \"\",\n        projectDescription: \"\",\n    }\n    const errorValidList = {\n        projectName: false,\n        projectDescription: false,\n    }\n    const [getProject, setProject] = useState(\"\")\n    const [getProjectDes, setProjectDes] = useState(\"\")\n    const [getError, setError] = useState(errorList)\n    const [formValid, setFormValid] = useState(errorValidList)\n    const [getProjectValid, setProjectValid] = useState(false)\n    const [loader, setLoader] = useState(false)\n    const [getProjectDescriptionValid, setProjectDescriptionValid] = useState(false)\n    useEffect(() => {\n        if (projectId) {\n            if (updatedProject && updatedProject.length) {\n                setProject(updatedProject[0].projectName);\n                setProjectDes(updatedProject[0].projectDesc);\n                setFormValid({})\n            } else {\n                const showNotification = {\n                    title: 'Project Update',\n                    message: 'Project not found',\n                    type: \"danger\",\n                }\n                userService.showNotification(showNotification);\n                setTimeout(function () {\n                    confirmModalClose();\n                }, 1000);\n            }\n        }\n    }, [openProjects])\n    const validateForm = () => {\n        console.log(formValid)\n    }\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setLoader(true);\n        projectListArr = projectListArr && projectListArr.length ? projectListArr : [];\n        if (projectId) {\n            const updatedProject = projectListArr.filter((tList) => {\n                if (tList.uid == projectId) {\n                    tList.projectName = getProject;\n                    tList.projectDesc = getProjectDes;\n                }\n                return tList;\n            })\n            dispatch(empList(updatedProject));\n        } else {\n            const data = {\n                uid: uid(),\n                projectName: getProject,\n                projectDesc: getProjectDes,\n                createDate: new Date(),\n            }\n            projectListArr.push(data)\n            dispatch(empList(projectListArr));\n        }\n        setProject(\"\");\n        setProjectDes(\"\");\n        setLoader(false);\n        setFormValid(errorValidList)\n        confirmModalClose();\n        const showNotification = {\n            title: projectId ? 'Update Project' : 'Create Project',\n            message: projectId ? 'Project updated successfully.' : 'Project created successfully.',\n            type: \"success\",\n        }\n        userService.showNotification(showNotification);\n    }\n    const handleInput = (e) => {\n        const { name, value } = e.target;\n        let projectValid = getProjectValid;\n        let projectDescriptionValid = getProjectDescriptionValid;\n        let getErrorList = getError;\n        let getFormValid = formValid;\n        switch (name) {\n            case 'projectName':\n                setProject(value);\n                projectValid = value.trim().length > 0;\n                getErrorList.projectName = projectValid ? '' : \"Enter project name\";\n                if (projectValid) {\n                    delete getFormValid.projectName;\n                } else {\n                    getFormValid.projectName = false;\n                }\n                break;\n            case 'projectDescription':\n                setProjectDes(value);\n                projectDescriptionValid = value.trim().length > 0;\n                getErrorList.projectDescription = projectDescriptionValid ? '' : \"Enter project description\";\n                if (projectDescriptionValid) {\n                    delete getFormValid.projectDescription;\n                } else {\n                    getFormValid.projectDescription = false;\n                }\n                break;\n        }\n        setProjectValid(projectValid)\n        setProjectDescriptionValid(projectDescriptionValid)\n    }\n    return (\n        <Dialog\n            className=\"call-modal\"\n            maxWidth={'lg'}\n            open={openProjects}\n        >\n            <DialogTitle className=\"add-modal-title\" id=\"discharge-planner-dialog-title\">\n                {projectId ? \"Update\" : \"Create\"} Project\n                <IconButton aria-label=\"close\">\n                    <CloseIcon onClick={confirmModalClose} />\n                </IconButton>\n            </DialogTitle>\n            <form onSubmit={handleSubmit} noValidate>\n                <DialogContent>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            id=\"\"\n                            label=\"Project Name\"\n                            className=\"full-width-input\"\n                            name=\"projectName\"\n                            InputLabelProps={{ className: \"required-label\" }}\n                            value={getProject}\n                            onChange={e => handleInput(e)} />\n                        <FormErrors\n                            show={!getProjectValid}\n                            formErrors={getError}\n                            fieldName=\"projectName\"\n                        />\n                    </div>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"Project Description\"\n                            className=\"full-width-input\"\n                            name=\"projectDescription\"\n                            InputLabelProps={{ className: \"required-label\" }}\n                            multiline\n                            rows={3}\n                            value={getProjectDes}\n                            onChange={e => handleInput(e)} />\n                        <FormErrors\n                            show={!getProjectDescriptionValid}\n                            formErrors={getError}\n                            fieldName=\"projectDescription\"\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions className=\"modal-actions\" justify=\"center\">\n                    <Button type=\"submit\" className=\"btn1\" disabled={Object.entries(formValid || {}).length > 0 || loader}>\n                        {loading && (\n                            <CircularProgress\n                                size={24}\n                                className=\"buttonProgress\"\n                            />\n                        )}\n                        {projectId ? \"Update\" : \"Create\"}\n                    </Button>\n                    <Button color=\"primary\" className=\"btn2\" onClick={confirmModalClose}>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    )\n}\n\nexport default AddProject"]},"metadata":{},"sourceType":"module"}