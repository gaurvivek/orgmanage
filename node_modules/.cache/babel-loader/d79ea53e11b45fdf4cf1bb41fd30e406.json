{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/reactjs/OrgManage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/var/www/html/reactjs/OrgManage/src/components/Login/Login.jsx\";\nimport React, { Component, useReducer } from \"react\";\nimport { Button, FormGroup, TextField, Checkbox, FormControlLabel, Slide } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Link } from \"react-router-dom\";\nimport \"assets/css/login.css\";\nimport logo from \"assets/img/front-logo.png\";\nimport { basePath, baseRoutes } from \"base-routes\";\nimport { FormErrors } from \"./FormErrors\";\nimport fetch from \"isomorphic-fetch\";\nimport { store } from \"react-notifications-component\";\nimport { userService } from \"_services/user.service\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { connect } from \"react-redux\";\nimport { userdata as _userdata, authData, reduxLoad as _reduxLoad } from \"../../js/actions/index\";\nimport { DATA_LOADING } from \"__helpers/constants\";\nimport { USER_INFO, EMAIL_REGEX, MAX_PASSWORD_LENGTH } from \"__helpers/constants\";\nimport { accessToken } from \"__helpers/utils\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userdata: function userdata(userdataVal) {\n      return dispatch(_userdata(userdataVal));\n    },\n    reduxLoad: function reduxLoad(reduxLoadVal) {\n      return dispatch(_reduxLoad(reduxLoadVal));\n    }\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userdataCal: state.userdata,\n    reduxLoadFlag: state.reduxLoadFlag\n  };\n};\n\nvar LoginClass = /*#__PURE__*/function (_Component) {\n  _inherits(LoginClass, _Component);\n\n  var _super = _createSuper(LoginClass);\n\n  function LoginClass(props) {\n    var _this;\n\n    _classCallCheck(this, LoginClass);\n\n    _this = _super.call(this, props);\n\n    _this.handleUserInput = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n\n      _this.setState(_defineProperty({}, name, value), function () {\n        _this.validateField(name, value);\n      });\n    };\n\n    _this.componentDidMount = function () {\n      var spinner = document.getElementById('loadingSpinner');\n\n      if (spinner && !spinner.hasAttribute('hidden')) {\n        spinner.setAttribute('hidden', 'true');\n      }\n\n      document.title = 'Login'; // add username and password in redux\n\n      console.log(_this.props, _this.state.userdataCal);\n\n      if (!_this.state.userdataCal || !_this.state.userdataCal.userName) {\n        var data = {\n          userName: \"hruday@gmail.com\",\n          password: btoa(\"hruday123\")\n        };\n\n        _this.props.userdata(data);\n\n        _this.setState({\n          userdataCal: data\n        });\n      }\n    };\n\n    _this.changePasswordType = function (e) {\n      var passwordType = _this.state.passwordType == \"password\" ? \"text\" : \"password\";\n\n      _this.setState({\n        passwordType: passwordType\n      });\n    };\n\n    userService.logout();\n\n    var _spinner = document.getElementById('loadingSpinner');\n\n    _this.state = {\n      email: \"hruday@gmail.com\",\n      username: \"hruday@gmail.com\",\n      password: \"hruday123\",\n      formErrors: {\n        username: \"\",\n        password: \"\"\n      },\n      emailValid: false,\n      passwordValid: false,\n      formValid: false,\n      loading: false,\n      isRemember: false,\n      passwordType: \"password\",\n      reduxLoadFlag: false,\n      spinner: _spinner,\n      userdataCal: _this.props.userdataCal\n    };\n    _this.clientAuthToken = null;\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LoginClass, [{\n    key: \"validateField\",\n    value: function validateField(fieldName, value) {\n      var fieldValidationErrors = this.state.formErrors;\n      var emailValid = this.state.emailValid;\n      var passwordValid = this.state.passwordValid;\n\n      switch (fieldName) {\n        case \"email\":\n          emailValid = value.match(EMAIL_REGEX);\n          fieldValidationErrors.email = emailValid ? \"\" : enMsg.inValidUser;\n          emailValid = value.trim().length > 0 ? true : false;\n          fieldValidationErrors.email = emailValid ? \"\" : enMsg.inValidUser;\n          break;\n\n        case \"password\":\n          var error = \"\";\n          passwordValid = true;\n\n          if (!value.trim().length) {\n            passwordValid = false;\n            error = enMsg.passwordRequired;\n          } else if (value.length < 1) {\n            passwordValid = false;\n            error = \"Password too short\";\n          }\n\n          fieldValidationErrors.password = error;\n          break;\n\n        default:\n          emailValid = true;\n          passwordValid = true;\n          break;\n      }\n\n      this.setState({\n        formErrors: fieldValidationErrors,\n        emailValid: emailValid,\n        passwordValid: passwordValid\n      }, this.validateForm);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      return this.state.emailValid && this.state.passwordValid;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var data, showNotification, _accessToken, user;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.props.reduxLoad(false);\n                this.setState({\n                  loading: true\n                });\n                event.preventDefault();\n                data = {\n                  username: this.state.email,\n                  password: btoa(this.state.password)\n                };\n                showNotification = {};\n                console.log(data, this.props.userdata);\n\n                if (data == this.props.userdata) {\n                  _accessToken = _accessToken();\n                  user = {\n                    accessToken: _accessToken,\n                    userRole: \"ADMIN\",\n                    userName: this.state.email\n                  };\n                  this.props.authData(user);\n                  showNotification = {\n                    title: enMsg.loginFailedTitle,\n                    message: \"Login successfully.\",\n                    type: \"success\"\n                  };\n                  window.location.replace(baseRoutes.dashboard.path);\n                } else {\n                  showNotification = {\n                    title: enMsg.loginFailedTitle,\n                    message: \"Invalid credentials, please refer read me file for login credentials.\",\n                    type: \"danger\"\n                  };\n                }\n\n                this.setState({\n                  loading: false\n                });\n                userService.showNotification(showNotification);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-outer-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-cover gray-bg-color\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo-content loginLogoMain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loginLogoInner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: logo,\n        alt: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-inner-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        noValidate: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"User ID/Email Address *\",\n        type: \"email\",\n        name: \"email\",\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: function onChange(event) {\n          return _this2.handleUserInput(event);\n        },\n        value: this.state.email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.emailValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        className: \"possword-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Password *\",\n        type: this.state.passwordType,\n        name: \"password\",\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: function onChange(event) {\n          return _this2.handleUserInput(event);\n        },\n        value: this.state.password,\n        inputProps: {\n          maxLength: MAX_PASSWORD_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.passwordValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"action-btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        className: this.state.loading ? \"buttonSuccess btn1\" : \"btn1\",\n        disabled: this.state.loading || !this.validateForm(),\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }\n      }, \"Login\", this.state.loading && /*#__PURE__*/React.createElement(CircularProgress, {\n        size: 24,\n        className: \"buttonProgress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }\n      })))))))));\n    }\n  }]);\n\n  return LoginClass;\n}(Component);\n\nexport var Login = connect(mapStateToProps, mapDispatchToProps)(LoginClass);\nexport default Login;","map":{"version":3,"sources":["/var/www/html/reactjs/OrgManage/src/components/Login/Login.jsx"],"names":["React","Component","useReducer","Button","FormGroup","TextField","Checkbox","FormControlLabel","Slide","CircularProgress","Link","logo","basePath","baseRoutes","FormErrors","fetch","store","userService","enMsg","clientTokenHeader","connect","userdata","authData","reduxLoad","DATA_LOADING","USER_INFO","EMAIL_REGEX","MAX_PASSWORD_LENGTH","accessToken","mapDispatchToProps","dispatch","userdataVal","reduxLoadVal","mapStateToProps","state","userdataCal","reduxLoadFlag","LoginClass","props","handleUserInput","e","name","target","value","setState","validateField","componentDidMount","spinner","document","getElementById","hasAttribute","setAttribute","title","console","log","userName","data","password","btoa","changePasswordType","passwordType","logout","email","username","formErrors","emailValid","passwordValid","formValid","loading","isRemember","clientAuthToken","handleSubmit","bind","fieldName","fieldValidationErrors","match","inValidUser","trim","length","error","passwordRequired","validateForm","event","preventDefault","showNotification","user","userRole","loginFailedTitle","message","type","window","location","replace","dashboard","path","maxLength","Login"],"mappings":"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","sourcesContent":["import React, { Component, useReducer } from \"react\";\nimport { Button, FormGroup, TextField, Checkbox, FormControlLabel, Slide } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Link } from \"react-router-dom\";\nimport \"assets/css/login.css\";  \nimport logo from \"assets/img/front-logo.png\";\nimport { basePath, baseRoutes } from \"base-routes\";\nimport { FormErrors } from \"./FormErrors\";\nimport fetch from \"isomorphic-fetch\";\nimport { store } from \"react-notifications-component\";\nimport { userService } from \"_services/user.service\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { connect } from \"react-redux\";\nimport {\n  userdata, authData,\n  reduxLoad,\n} from \"../../js/actions/index\";\nimport { DATA_LOADING } from \"__helpers/constants\";\nimport { USER_INFO, EMAIL_REGEX, MAX_PASSWORD_LENGTH } from \"__helpers/constants\";\nimport { accessToken } from \"__helpers/utils\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userdata: userdataVal => dispatch(userdata(userdataVal)),\n    reduxLoad: reduxLoadVal => dispatch(reduxLoad(reduxLoadVal)),\n  };\n}\nconst mapStateToProps = state => {\n  return {\n    userdataCal: state.userdata,\n    reduxLoadFlag: state.reduxLoadFlag,\n  };\n};\nclass LoginClass extends Component {\n  constructor(props) {\n    super(props);\n    userService.logout();\n    let spinner = document.getElementById('loadingSpinner');\n    this.state = {\n      email: \"hruday@gmail.com\",\n      username: \"hruday@gmail.com\",\n      password: \"hruday123\",\n      formErrors: { username: \"\", password: \"\" },\n      emailValid: false,\n      passwordValid: false,\n      formValid: false,\n      loading: false,\n      isRemember: false,\n      passwordType: \"password\",\n      reduxLoadFlag: false,\n      spinner: spinner,\n      userdataCal: this.props.userdataCal,\n    };\n    this.clientAuthToken = null;\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleUserInput = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    this.setState({ [name]: value }, () => {\n      this.validateField(name, value);\n    });\n  };\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let emailValid = this.state.emailValid;\n    let passwordValid = this.state.passwordValid;\n\n    switch (fieldName) {\n      case \"email\":\n        emailValid = value.match(EMAIL_REGEX);\n        fieldValidationErrors.email = emailValid ? \"\" : enMsg.inValidUser;\n        emailValid = value.trim().length > 0 ? true : false;\n        fieldValidationErrors.email = emailValid\n          ? \"\"\n          : enMsg.inValidUser;\n        break;\n      case \"password\":\n        let error = \"\";\n        passwordValid = true;\n        if (!value.trim().length) {\n          passwordValid = false;\n          error = enMsg.passwordRequired;\n        } else if (value.length < 1) {\n          passwordValid = false;\n          error = \"Password too short\";\n        }\n        fieldValidationErrors.password = error;\n        break;\n      default:\n        emailValid = true;\n        passwordValid = true;\n        break;\n    }\n    this.setState(\n      {\n        formErrors: fieldValidationErrors,\n        emailValid: emailValid,\n        passwordValid: passwordValid\n      },\n      this.validateForm\n    );\n  }\n  validateForm() {\n    return this.state.emailValid && this.state.passwordValid;\n  }\n  componentDidMount = () => {\n    const spinner = document.getElementById('loadingSpinner');\n    if (spinner && !spinner.hasAttribute('hidden')) {\n      spinner.setAttribute('hidden', 'true');\n    }\n    document.title = 'Login';\n\n    // add username and password in redux\n    console.log(this.props, this.state.userdataCal)\n    if (!this.state.userdataCal || !this.state.userdataCal.userName){\n      const data = {\n        userName: \"hruday@gmail.com\", password: btoa(\"hruday123\")\n      }\n      this.props.userdata(data)\n      this.setState({\n        userdataCal: data,\n      })\n    }\n\n  };\n  async handleSubmit(event) {\n    this.props.reduxLoad(false);\n    this.setState({ loading: true });\n    event.preventDefault();\n    const data = {\n      username: this.state.email,\n      password: btoa(this.state.password),\n    };\n    let showNotification = {};\n    console.log(data, this.props.userdata)\n    if (data == this.props.userdata){\n      let accessToken = accessToken()\n      let user = {\n        accessToken: accessToken,\n        userRole: \"ADMIN\",\n        userName: this.state.email,\n      };\n      this.props.authData(user)\n      showNotification = {\n        title: enMsg.loginFailedTitle,\n        message: \"Login successfully.\",\n        type: \"success\"\n      };\n      window.location.replace(baseRoutes.dashboard.path);\n    }else{\n      showNotification = {\n        title: enMsg.loginFailedTitle,\n        message: \"Invalid credentials, please refer read me file for login credentials.\",\n        type: \"danger\"\n      };\n    }\n    this.setState({ loading: false });\n    userService.showNotification(showNotification)\n  }\n  changePasswordType = e => {\n    let passwordType = (this.state.passwordType == \"password\") ? \"text\" : \"password\";\n    this.setState({\n      passwordType: passwordType\n    });\n  }\n  render() {\n    return (\n      <div className=\"login-outer-cover\">\n        <div className=\"login-cover gray-bg-color\">\n          <div className=\"logo-content loginLogoMain\">\n            <div className=\"loginLogoInner\">\n              <img src={logo} alt=\"logo\" />\n            </div>\n          </div>\n          <div className=\"login-inner-cover\">\n            <div className=\"login-content\">\n              <div className=\"Login\">\n                <form onSubmit={this.handleSubmit} noValidate>\n                  <FormGroup>\n                    {/* <InputLabel>Email Address</InputLabel> */}\n                    <TextField\n                      label=\"User ID/Email Address *\"\n                      type=\"email\"\n                      name=\"email\"\n                      data-validators=\"isRequired,isAlpha\"\n                      onChange={event => this.handleUserInput(event)}\n                      value={this.state.email}\n                    />\n                    <FormErrors\n                      show={!this.state.emailValid}\n                      formErrors={this.state.formErrors}\n                      fieldName=\"email\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"possword-input\">\n                    <TextField\n                      label=\"Password *\"\n                      type={this.state.passwordType}\n                      name=\"password\"\n                      data-validators=\"isRequired,isAlpha\"\n                      onChange={event => this.handleUserInput(event)}\n                      value={this.state.password}\n                      inputProps={{ maxLength: MAX_PASSWORD_LENGTH }}\n                    />\n                    <FormErrors\n                      show={!this.state.passwordValid}\n                      formErrors={this.state.formErrors}\n                      fieldName=\"password\"\n                    />\n                  </FormGroup>\n                  <div className=\"action-btns\">\n                    <Button\n                      color=\"primary\"\n                      className={this.state.loading ? \"buttonSuccess btn1\" : \"btn1\"}\n                      disabled={this.state.loading || !this.validateForm()}\n                      type=\"submit\"\n                    >\n                      Login\n                      {this.state.loading && (\n                        <CircularProgress\n                          size={24}\n                          className=\"buttonProgress\"\n                        />\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport const Login = connect(\n  mapStateToProps, mapDispatchToProps\n)(LoginClass);\nexport default Login;"]},"metadata":{},"sourceType":"module"}