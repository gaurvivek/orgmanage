{"ast":null,"code":"import _defineProperty from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/var/www/html/reactjs/ManagerWork/src/components/Navbars/AdminNavbarLinks.jsx\";\n\n/*!\n\n=========================================================\n* Material Dashboard React - v1.7.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport Poppers from \"@material-ui/core/Popper\";\nimport { Icon, styles, MenuItem, MenuList, Grow, Paper, ClickAwayListener, Hidden, Divider, withStyles, Avatar, Select, FormGroup, InputLabel, FormControl, Input, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Slide, IconButton, LinearProgress, ListItemText, ListItemAvatar, Typography, List, ListItem, Box } from \"@material-ui/core/\";\nimport CloseIcon from '@material-ui/icons/Close'; // @material-ui/icons\n\nimport Person from \"@material-ui/icons/Person\";\nimport Notifications from \"@material-ui/icons/Notifications\";\nimport Dashboard from \"@material-ui/icons/Dashboard\";\nimport Search from \"@material-ui/icons/Search\";\nimport SelectAllTwoTone from \"@material-ui/icons/SelectAllTwoTone\"; // core components\n\nimport CustomInput from \"components/CustomInput/CustomInput.jsx\";\nimport Button from \"components/CustomButtons/Button.jsx\";\nimport headerLinksStyle from \"assets/jss/material-dashboard-react/components/headerLinksStyle.jsx\";\nimport dummy from \"assets/img/dummy.png\";\nimport { sizeHeight } from \"@material-ui/system\";\nimport { Link } from \"react-router-dom\";\nimport { baseRoutes, basePath } from \"base-routes\";\nimport { layout } from \"admin-routes\";\nimport { userService } from \"_services/user.service\";\nimport { DEFAULT_PROFILE_IMG, NO_USERNAME } from \"__helpers/constants\";\nimport GridItem from \"components/Grid/GridItem\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport dropdown from \"assets/img/dropdown.png\";\nimport AdnetworkSelect from \"components/Sidebar/AdnetworkSelect\";\nimport { connect } from \"react-redux\";\nimport logo from \"assets/img/asglogo.png\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport userImg from \"assets/img/user_img.png\"; // let profileImage;\n// let username;\n// function fillUserDetail() {}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  // console.log(\"StateVal \"+JSON.stringify(state));\n  return {\n    userInfo: state.userInfo,\n    articles: state.articles,\n    adNetwork: state.adNetwork,\n    loadingFlag: state.loadingFlag,\n    adCategories: state.adCategories,\n    adBrands: state.adBrands,\n    adStatus: state.adStatus,\n    adMedium: state.adMedium,\n    adType: state.adType,\n    assetType: state.assetType,\n    assetDisplayType: state.assetDisplayType,\n    campaignStatus: state.campaignStatus,\n    advertisements: state.advertisements,\n    campaings: state.campaings,\n    assets: state.assets,\n    vendors: state.vendors,\n    timestamp: state.timestamp,\n    reduxLoadFlag: state.reduxLoadFlag\n  };\n};\n\nvar AdminNavbarLinksClass = /*#__PURE__*/function (_React$Component) {\n  _inherits(AdminNavbarLinksClass, _React$Component);\n\n  var _super = _createSuper(AdminNavbarLinksClass);\n\n  function AdminNavbarLinksClass(props) {\n    var _this;\n\n    _classCallCheck(this, AdminNavbarLinksClass);\n\n    _this = _super.call(this, props);\n    _this.checkNotification = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var showNotification, apiUrl, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              showNotification = {}; // let apiUrl = apiPath.isNewNotificationList;\n\n              apiUrl = \"http://35.193.238.179:9090/api/pollution/notification?sort=date,desc\";\n              _context.next = 5;\n              return fetch(apiUrl, {\n                method: \"GET\",\n                headers: clientTokenHeader()\n              }).then(function (response) {\n                if (response.status === 400) {} else if (response.ok) {} else {}\n\n                return response.json();\n              }).then(function (data) {\n                // this.setState({ newNotification: data.newNotificationExist })\n                if (data && data.length) {\n                  var readCount = data.length;\n                  data.map(function (nList) {\n                    if (!nList.readStatus) {// readCount = readCount + 1;\n                    }\n                  });\n\n                  _this.setState({\n                    messageCount: readCount,\n                    messageList: data\n                  });\n                }\n\n                _this.setState({\n                  loading: false\n                });\n              })[\"catch\"](function (error) {\n                showNotification = {\n                  title: 'Notification',\n                  message: 'Bad response from server',\n                  type: \"danger\"\n                };\n\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n              response = _context.sent;\n              userService.showNotification(showNotification);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleToggleNotification = function () {\n      _this._isMounted && _this.setState(function (state) {\n        return {\n          openNotifcation: !state.openNotifcation\n        };\n      });\n    };\n\n    _this.handleCloseNotification = function (event) {\n      if (_this.anchorNotification.contains(event.target)) {\n        return;\n      }\n\n      _this.setState({\n        openNotifcation: false\n      });\n    };\n\n    _this.handleToggleProfile = function () {\n      // this.props.history.push(basePath + baseRoutes.profile.path);\n      _this.setState(function (state) {\n        return {\n          openProfile: !state.openProfile\n        };\n      });\n    };\n\n    _this.handleCloseProfile = function (event) {\n      if (_this.anchorProfile.contains(event.target)) {\n        return;\n      }\n\n      _this.setState({\n        openProfile: false\n      });\n    };\n\n    _this.handleLogout = function () {\n      userService.logout();\n      return true; // this.setState(state => ({ openProfile: !state.openProfile }));\n    };\n\n    _this.handleToggleNotificationList = function () {\n      _this._isMounted && _this.setState(function (state) {\n        return {\n          openNotifcationList: !state.openNotifcationList,\n          reportModal: false\n        };\n      });\n    };\n\n    _this.handleCloseNotificationList = function (event) {\n      if (_this.anchorNotificationList.contains(event.target)) {\n        return;\n      }\n\n      _this.setState({\n        openNotifcationList: false,\n        reportMenu: false\n      });\n    };\n\n    _this._isMounted = false;\n    var spinner = document.getElementById('loadingSpinner'); // if (spinner && !spinner.hasAttribute('hidden')) {\n    //   spinner.setAttribute('hidden', 'true');\n    // }\n\n    _this.state = {\n      openNotifcation: false,\n      openProfile: false,\n      // userDetail: props.userDetail,\n      // profileImage: props.userDetail\n      //   ? props.userDetail.profileImage\n      //   : DEFAULT_PROFILE_IMG,\n      // username: props.userDetail ? props.userDetail.username : NO_USERNAME,\n      userDetail: {},\n      profileImage: DEFAULT_PROFILE_IMG,\n      username: NO_USERNAME,\n      loadSpinner: false,\n      spinner: spinner,\n      loading: false,\n      reduxLoadFlag: false,\n      openNotifcationList: false,\n      messageCount: 0,\n      messageList: []\n    };\n    _this.handleToggleProfile = _this.handleToggleProfile.bind(_assertThisInitialized(_this));\n    _this.checkNotification = _this.checkNotification.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AdminNavbarLinksClass, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      Object.getPrototypeOf(this).constructor.STATE = this.state;\n    } // componentDidUpdate(){\n    //   if(this.state.loadSpinner){\n    //     this.state.spinner.removeAttribute('hidden', 'true');\n    //   }else{\n    //     // this.state.spinner.setAttribute('hidden', 'true');\n    //   }\n    // }\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n        var userInfo = {};\n        var selectedAdnetwork = \"\";\n        var adnetworkData = [];\n        var selectedAdnetworkData = {};\n\n        if (this.props.userInfo) {\n          userInfo = this.props.userInfo;\n        }\n\n        if (this.props.adNetwork) {\n          selectedAdnetworkData = this.props.adNetwork;\n          selectedAdnetwork = selectedAdnetworkData ? selectedAdnetworkData.adNetworkId : \"\";\n          adnetworkData = selectedAdnetworkData ? selectedAdnetworkData : [];\n        }\n\n        this.setState({\n          reduxLoadFlag: this.props.reduxLoadFlag,\n          userDetail: userInfo,\n          profileImage: userInfo ? userInfo.imageRef : DEFAULT_PROFILE_IMG,\n          username: userInfo ? userInfo.fName + \" \" + userInfo.lName : NO_USERNAME,\n          adnetworkId: selectedAdnetwork ? selectedAdnetwork : \"\",\n          adNetworkJson: adnetworkData ? adnetworkData : []\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var userInfo, selectedAdnetwork, adnetworkData, selectedAdnetworkData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n\n                if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n                  userInfo = {};\n                  selectedAdnetwork = \"\";\n                  adnetworkData = [];\n                  selectedAdnetworkData = {};\n\n                  if (this.props.userInfo) {\n                    userInfo = this.props.userInfo;\n                  }\n\n                  if (this.props.adNetwork) {\n                    selectedAdnetworkData = this.props.adNetwork;\n                    selectedAdnetwork = selectedAdnetworkData ? selectedAdnetworkData.adNetworkId : \"\";\n                    adnetworkData = selectedAdnetworkData ? selectedAdnetworkData : [];\n                  }\n\n                  this.setState({\n                    reduxLoadFlag: this.props.reduxLoadFlag,\n                    userDetail: userInfo,\n                    profileImage: userInfo ? userInfo.imageRef : DEFAULT_PROFILE_IMG,\n                    username: userInfo ? userInfo.fName + \" \" + userInfo.lName : NO_USERNAME,\n                    adnetworkId: selectedAdnetwork ? selectedAdnetwork : \"\",\n                    adNetworkJson: adnetworkData ? adnetworkData : []\n                  });\n                  this.checkNotification();\n                  this.interval = setInterval(function () {\n                    return _this2.checkNotification();\n                  }, 7000);\n                } // userService.getAll().then(users => {\n                //   if (typeof users === \"object\" && users.fName) {\n                //     // const last = users.length;\n                //     // users = users[last - 1];\n                //     const profileImage = users.imageRef\n                //       ? users.imageRef\n                //       : DEFAULT_PROFILE_IMG;\n                //     const username = users.fName\n                //       ? `${users.fName} ${users.lName}`\n                //       : NO_USERNAME;\n                //     let userDetail = {\n                //       profileImage: profileImage,\n                //       username: username\n                //     };\n                //     this._isMounted && this.setState(\n                //       {\n                //         userDetail: userDetail,\n                //         profileImage: userDetail.profileImage,\n                //         username: username\n                //       },\n                //       () => {\n                //         this.props.updateUserInfo(userDetail);\n                //       }\n                //     );\n                //   }\n                // });\n                // this.fetchData();\n                // if (spinner) {\n                //   spinner.setAttribute('hidden', 'true');\n                // }\n\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchData\",\n    value: function () {\n      var _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var adNetworks;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                adNetworks = [];\n\n                try {} catch (errors) {}\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }()\n  }, {\n    key: \"handleSelectAdnetwork\",\n    value: function handleSelectAdnetwork(eventId) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          messageCount = _this$state.messageCount,\n          messageList = _this$state.messageList,\n          loading = _this$state.loading,\n          openNotifcationList = _this$state.openNotifcationList,\n          openNotifcation = _this$state.openNotifcation,\n          openProfile = _this$state.openProfile,\n          adnetworkId = _this$state.adnetworkId,\n          adnetworkData = _this$state.adnetworkData,\n          adNetworkJson = _this$state.adNetworkJson;\n      var user_image = \"user-image\";\n      var styleuser = {\n        borderRadius: \"50%\",\n        width: \"35px\",\n        height: \"35px\"\n      };\n      var userNameStyle = {\n        \"float\": \"right\",\n        display: \"block\",\n        width: \"calc(100% - 50px)\",\n        color: \"#000\",\n        fontSize: \"13px\",\n        fontWeight: \"500\",\n        lineHeight: \"normal\",\n        marginTop: \"10px\"\n      };\n      var logoutStyle = {\n        \"float\": \"right\",\n        display: \"block\",\n        width: \"calc(100% - 50px)\",\n        color: \"#2b73cd\",\n        fontSize: \"13px\",\n        fontWeight: \"500\",\n        lineHeight: \"normal\",\n        marginTop: \"4px\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mobileMenuSidebar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Hidden, {\n        smDown: true,\n        implementation: \"css\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.manager + \" profile-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleToggleNotificationList,\n        buttonRef: function buttonRef(node) {\n          _this3.anchorNotificationList = node;\n        },\n        color: \"transparent\",\n        \"aria-owns\": openNotifcationList ? \"notification-menu-list-grow\" : null,\n        \"aria-haspopup\": \"true\",\n        className: \"buttonlinkHeader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"notificationicon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Notifications, {\n        className: \"noti_count\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }\n      }), messageCount > 0 ? /*#__PURE__*/React.createElement(\"sup\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }\n      }, messageCount) : null)), /*#__PURE__*/React.createElement(Poppers, {\n        open: openNotifcationList,\n        anchorEl: this.anchorNotificationList,\n        transition: true,\n        disablePortal: true,\n        className: classNames(_defineProperty({}, classes.popperClose, !openNotifcationList)) + \" \" + classes.popperNavXX + ' AdnetworkSelect-popperNav',\n        style: {\n          zIndex: \"9999999\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }\n      }, function (_ref2) {\n        var TransitionProps = _ref2.TransitionProps,\n            placement = _ref2.placement;\n        return /*#__PURE__*/React.createElement(Grow, Object.assign({}, TransitionProps, {\n          id: \"notification-menu-list-grow\",\n          style: {\n            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\"\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(Paper, {\n          className: \"user-menu-box\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(ClickAwayListener, {\n          onClickAway: _this3.handleCloseNotificationList,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"top_noti\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 27\n          }\n        }, \"Notification List\")), /*#__PURE__*/React.createElement(List, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }\n        }, messageList && messageList.length ? messageList.map(function (mList, key) {\n          if (mList.type == \"POLLUTION\") {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n              alignItems: \"flex-start\",\n              className: \"notificate_inner notificationslist\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 39\n              }\n            }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(Avatar, {\n              alt: \"Travis Howard\",\n              src: userImg,\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 43\n              }\n            })), /*#__PURE__*/React.createElement(ListItemText, {\n              primary: mList.type,\n              secondary: /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 45\n                }\n              }, /*#__PURE__*/React.createElement(Typography, {\n                component: \"span\",\n                variant: \"body2\",\n                className: classes.inline,\n                color: \"textPrimary\",\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 47\n                }\n              }, mList.title, \":\"), \" \" + mList.message, /*#__PURE__*/React.createElement(\"p\", {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 467,\n                  columnNumber: 47\n                }\n              }, mList.date)),\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 41\n              }\n            })), /*#__PURE__*/React.createElement(Divider, {\n              variant: \"inset\",\n              component: \"li\",\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 39\n              }\n            }));\n          }\n        }) : loading ? /*#__PURE__*/React.createElement(\"p\", {\n          className: \"no_noti\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 33\n          }\n        }, \"Loading, please wait\") : /*#__PURE__*/React.createElement(\"p\", {\n          className: \"no_noti\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 33\n          }\n        }, \"No notification\"))))));\n      }), /*#__PURE__*/React.createElement(Link, {\n        href: basePath + baseRoutes.dashboard.path ///${user.username}\n        ,\n        to: basePath + baseRoutes.dashboard.path ///${user.username}\n        ,\n        style: userNameStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }\n      }, \"Challenging Wonders\"), /*#__PURE__*/React.createElement(Link, {\n        href: basePath + baseRoutes.dashboard.path ///${user.username}\n        ,\n        to: basePath + baseRoutes.dashboard.path ///${user.username}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        buttonRef: function buttonRef(node) {\n          _this3.anchorProfile = node;\n        },\n        color: window.innerWidth > 959 ? \"transparent\" : \"white\",\n        justIcon: window.innerWidth > 959,\n        simple: !(window.innerWidth > 959),\n        \"aria-owns\": openNotifcation ? \"profile-menu-list-grow\" : null,\n        \"aria-haspopup\": \"true\",\n        onClick: this.handleToggleProfile,\n        className: classes.buttonLink + \" profile-img-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 15\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"avataricon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Avatar, {\n        alt: \"\",\n        src: logo,\n        className: user_image,\n        style: styleuser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 19\n        }\n      })))))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      // if (\n      //   nextProps.userDetail &&\n      //   ((nextProps.userDetail.username !== prevState.username &&\n      //     nextProps.userDetail.username !== NO_USERNAME) ||\n      //     (nextProps.userDetail.profileImage !== prevState.profileImage &&\n      //       nextProps.userDetail.profileImage !== DEFAULT_PROFILE_IMG))\n      // ) {\n      //   return {\n      //     username: nextProps.userDetail.username,\n      //     profileImage: nextProps.userDetail.profileImage\n      //   };\n      // } else return null;\n      return null;\n    }\n  }]);\n\n  return AdminNavbarLinksClass;\n}(React.Component);\n\nAdminNavbarLinksClass.propTypes = {\n  classes: PropTypes.object,\n  updateUserInfo: PropTypes.func\n};\nvar AdminNavbarLinks = connect(mapStateToProps)(AdminNavbarLinksClass);\nexport default withStyles(headerLinksStyle)(AdminNavbarLinks);","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/components/Navbars/AdminNavbarLinks.jsx"],"names":["React","PropTypes","classNames","Poppers","Icon","styles","MenuItem","MenuList","Grow","Paper","ClickAwayListener","Hidden","Divider","withStyles","Avatar","Select","FormGroup","InputLabel","FormControl","Input","CircularProgress","Dialog","DialogActions","DialogContent","DialogTitle","TextField","Slide","IconButton","LinearProgress","ListItemText","ListItemAvatar","Typography","List","ListItem","Box","CloseIcon","Person","Notifications","Dashboard","Search","SelectAllTwoTone","CustomInput","Button","headerLinksStyle","dummy","sizeHeight","Link","baseRoutes","basePath","layout","userService","DEFAULT_PROFILE_IMG","NO_USERNAME","GridItem","GridContainer","dropdown","AdnetworkSelect","connect","logo","clientTokenHeader","userImg","mapStateToProps","state","userInfo","articles","adNetwork","loadingFlag","adCategories","adBrands","adStatus","adMedium","adType","assetType","assetDisplayType","campaignStatus","advertisements","campaings","assets","vendors","timestamp","reduxLoadFlag","AdminNavbarLinksClass","props","checkNotification","setState","loading","showNotification","apiUrl","fetch","method","headers","then","response","status","ok","json","data","length","readCount","map","nList","readStatus","messageCount","messageList","error","title","message","type","handleToggleNotification","_isMounted","openNotifcation","handleCloseNotification","event","anchorNotification","contains","target","handleToggleProfile","openProfile","handleCloseProfile","anchorProfile","handleLogout","logout","handleToggleNotificationList","openNotifcationList","reportModal","handleCloseNotificationList","anchorNotificationList","reportMenu","spinner","document","getElementById","userDetail","profileImage","username","loadSpinner","bind","Object","getPrototypeOf","constructor","STATE","undefined","selectedAdnetwork","adnetworkData","selectedAdnetworkData","adNetworkId","imageRef","fName","lName","adnetworkId","adNetworkJson","interval","setInterval","adNetworks","errors","eventId","classes","user_image","styleuser","borderRadius","width","height","userNameStyle","display","color","fontSize","fontWeight","lineHeight","marginTop","logoutStyle","manager","node","popperClose","popperNavXX","zIndex","TransitionProps","placement","transformOrigin","mList","key","inline","date","dashboard","path","window","innerWidth","buttonLink","nextProps","prevState","Component","propTypes","object","updateUserInfo","func","AdminNavbarLinks"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Material Dashboard React - v1.7.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n// @material-ui/core components\nimport Poppers from \"@material-ui/core/Popper\";\nimport {\n  Icon,\n  styles,\n  MenuItem,\n  MenuList,\n  Grow,\n  Paper,\n  ClickAwayListener,\n  Hidden,\n  Divider,\n  withStyles,\n  Avatar,\n  Select,\n  FormGroup,\n  InputLabel,\n  FormControl,\n  Input,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Slide,\n  IconButton,\n  LinearProgress,\n  ListItemText,\n  ListItemAvatar,\n  Typography,\n  List,\n  ListItem,\n  Box,\n} from \"@material-ui/core/\";\nimport CloseIcon from '@material-ui/icons/Close'\n// @material-ui/icons\nimport Person from \"@material-ui/icons/Person\";\nimport Notifications from \"@material-ui/icons/Notifications\";\nimport Dashboard from \"@material-ui/icons/Dashboard\";\nimport Search from \"@material-ui/icons/Search\";\nimport SelectAllTwoTone from \"@material-ui/icons/SelectAllTwoTone\";\n\n// core components\nimport CustomInput from \"components/CustomInput/CustomInput.jsx\";\nimport Button from \"components/CustomButtons/Button.jsx\";\n\nimport headerLinksStyle from \"assets/jss/material-dashboard-react/components/headerLinksStyle.jsx\";\nimport dummy from \"assets/img/dummy.png\";\nimport { sizeHeight } from \"@material-ui/system\";\nimport { Link } from \"react-router-dom\";\nimport { baseRoutes, basePath } from \"base-routes\";\nimport { layout } from \"admin-routes\";\nimport { userService } from \"_services/user.service\";\nimport { DEFAULT_PROFILE_IMG, NO_USERNAME } from \"__helpers/constants\";\nimport GridItem from \"components/Grid/GridItem\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport dropdown from \"assets/img/dropdown.png\";\nimport AdnetworkSelect from \"components/Sidebar/AdnetworkSelect\";\nimport { connect } from \"react-redux\";\nimport logo from \"assets/img/asglogo.png\";\nimport { clientTokenHeader } from \"__helpers/auth-header\"\nimport userImg from \"assets/img/user_img.png\"\n\n// let profileImage;\n// let username;\n\n// function fillUserDetail() {}\nconst mapStateToProps = state => {\n  // console.log(\"StateVal \"+JSON.stringify(state));\n  return {\n    userInfo: state.userInfo,\n    articles: state.articles,\n    adNetwork: state.adNetwork,\n    loadingFlag: state.loadingFlag,\n    adCategories: state.adCategories,\n    adBrands: state.adBrands,\n    adStatus: state.adStatus,\n    adMedium: state.adMedium,\n    adType: state.adType,\n    assetType: state.assetType,\n    assetDisplayType: state.assetDisplayType,\n    campaignStatus: state.campaignStatus,\n    advertisements: state.advertisements,\n    campaings: state.campaings,\n    assets: state.assets,\n    vendors: state.vendors,\n    timestamp: state.timestamp,\n    reduxLoadFlag: state.reduxLoadFlag,\n  };\n};\nclass AdminNavbarLinksClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    let spinner = document.getElementById('loadingSpinner');\n    // if (spinner && !spinner.hasAttribute('hidden')) {\n    //   spinner.setAttribute('hidden', 'true');\n    // }\n    this.state = {\n      openNotifcation: false,\n      openProfile: false,\n      // userDetail: props.userDetail,\n      // profileImage: props.userDetail\n      //   ? props.userDetail.profileImage\n      //   : DEFAULT_PROFILE_IMG,\n      // username: props.userDetail ? props.userDetail.username : NO_USERNAME,\n      userDetail: {},\n      profileImage: DEFAULT_PROFILE_IMG,\n      username: NO_USERNAME,\n      loadSpinner: false,\n      spinner: spinner,\n      loading: false,\n      reduxLoadFlag: false,\n      openNotifcationList: false,\n      messageCount: 0,\n      messageList: [],\n\n    };\n    this.handleToggleProfile = this.handleToggleProfile.bind(this);\n    this.checkNotification = this.checkNotification.bind(this);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Object.getPrototypeOf(this).constructor.STATE = this.state;\n  }\n  // componentDidUpdate(){\n  //   if(this.state.loadSpinner){\n  //     this.state.spinner.removeAttribute('hidden', 'true');\n  //   }else{\n  //     // this.state.spinner.setAttribute('hidden', 'true');\n  //   }\n  // }\n  componentDidUpdate() {\n    if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n      let userInfo = {};\n      let selectedAdnetwork = \"\";\n      let adnetworkData = [];\n      let selectedAdnetworkData = {};\n      if (this.props.userInfo) {\n        userInfo = this.props.userInfo;\n      }\n      if (this.props.adNetwork) {\n        selectedAdnetworkData = this.props.adNetwork;\n        selectedAdnetwork = (selectedAdnetworkData) ? selectedAdnetworkData.adNetworkId : \"\";\n        adnetworkData = (selectedAdnetworkData) ? selectedAdnetworkData : [];\n      }\n      this.setState({\n        reduxLoadFlag: this.props.reduxLoadFlag,\n        userDetail: userInfo,\n        profileImage: userInfo\n          ? userInfo.imageRef\n          : DEFAULT_PROFILE_IMG,\n        username: userInfo ? userInfo.fName + \" \" + userInfo.lName : NO_USERNAME,\n        adnetworkId: selectedAdnetwork ? selectedAdnetwork : \"\",\n        adNetworkJson: (adnetworkData) ? adnetworkData : [],\n      })\n    }\n  }\n  async componentDidMount() {\n    this._isMounted = true;\n    if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n      let userInfo = {};\n      let selectedAdnetwork = \"\";\n      let adnetworkData = [];\n      let selectedAdnetworkData = {};\n      if (this.props.userInfo) {\n        userInfo = this.props.userInfo;\n      }\n      if (this.props.adNetwork) {\n        selectedAdnetworkData = this.props.adNetwork;\n        selectedAdnetwork = (selectedAdnetworkData) ? selectedAdnetworkData.adNetworkId : \"\";\n        adnetworkData = (selectedAdnetworkData) ? selectedAdnetworkData : [];\n      }\n      this.setState({\n        reduxLoadFlag: this.props.reduxLoadFlag,\n        userDetail: userInfo,\n        profileImage: userInfo\n          ? userInfo.imageRef\n          : DEFAULT_PROFILE_IMG,\n        username: userInfo ? userInfo.fName + \" \" + userInfo.lName : NO_USERNAME,\n        adnetworkId: selectedAdnetwork ? selectedAdnetwork : \"\",\n        adNetworkJson: (adnetworkData) ? adnetworkData : [],\n      })\n      this.checkNotification();\n      this.interval = setInterval(() => this.checkNotification(), 7000);\n    }\n    // userService.getAll().then(users => {\n    //   if (typeof users === \"object\" && users.fName) {\n    //     // const last = users.length;\n    //     // users = users[last - 1];\n    //     const profileImage = users.imageRef\n    //       ? users.imageRef\n    //       : DEFAULT_PROFILE_IMG;\n    //     const username = users.fName\n    //       ? `${users.fName} ${users.lName}`\n    //       : NO_USERNAME;\n    //     let userDetail = {\n    //       profileImage: profileImage,\n    //       username: username\n    //     };\n    //     this._isMounted && this.setState(\n    //       {\n    //         userDetail: userDetail,\n    //         profileImage: userDetail.profileImage,\n    //         username: username\n    //       },\n    //       () => {\n    //         this.props.updateUserInfo(userDetail);\n    //       }\n    //     );\n    //   }\n    // });\n    // this.fetchData();\n\n    // if (spinner) {\n    //   spinner.setAttribute('hidden', 'true');\n    // }\n  }\n  checkNotification = async () => {\n    this.setState({ loading: true })\n    let showNotification = {};\n    // let apiUrl = apiPath.isNewNotificationList;\n    let apiUrl = \"http://35.193.238.179:9090/api/pollution/notification?sort=date,desc\";\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: clientTokenHeader()\n    })\n      .then(response => {\n        if (response.status === 400) {\n\n        } else if (response.ok) {\n\n        } else {\n\n        }\n        return response.json();\n      })\n      .then(data => {\n        // this.setState({ newNotification: data.newNotificationExist })\n        if (data && data.length) {\n          let readCount = data.length;\n          data.map(nList => {\n            if (!nList.readStatus) {\n              // readCount = readCount + 1;\n            }\n          })\n          this.setState({\n            messageCount: readCount,\n            messageList: data,\n          })\n        }\n        this.setState({ loading: false })\n      })\n      .catch(error => {\n        showNotification = {\n          title: 'Notification',\n          message: 'Bad response from server',\n          type: \"danger\"\n        };\n        this.setState({ loading: false })\n      });\n    userService.showNotification(showNotification);\n  }\n  async fetchData() {\n    let adNetworks = [];\n    try {\n\n    } catch (errors) {\n    }\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // if (\n    //   nextProps.userDetail &&\n    //   ((nextProps.userDetail.username !== prevState.username &&\n    //     nextProps.userDetail.username !== NO_USERNAME) ||\n    //     (nextProps.userDetail.profileImage !== prevState.profileImage &&\n    //       nextProps.userDetail.profileImage !== DEFAULT_PROFILE_IMG))\n    // ) {\n    //   return {\n    //     username: nextProps.userDetail.username,\n    //     profileImage: nextProps.userDetail.profileImage\n    //   };\n    // } else return null;\n    return null;\n  }\n\n  handleToggleNotification = () => {\n    this._isMounted && this.setState(state => ({\n      openNotifcation: !state.openNotifcation\n    }));\n  };\n  handleCloseNotification = event => {\n    if (this.anchorNotification.contains(event.target)) {\n      return;\n    }\n    this.setState({ openNotifcation: false });\n  };\n  handleSelectAdnetwork(eventId) {\n  }\n  handleToggleProfile = () => {\n\n    // this.props.history.push(basePath + baseRoutes.profile.path);\n    this.setState(state => ({ openProfile: !state.openProfile }));\n  };\n  handleCloseProfile = event => {\n    if (this.anchorProfile.contains(event.target)) {\n      return;\n    }\n    this.setState({ openProfile: false });\n  };\n\n  handleLogout = () => {\n    userService.logout();\n    return true;\n\n    // this.setState(state => ({ openProfile: !state.openProfile }));\n  };\n  handleToggleNotificationList = () => {\n    this._isMounted && this.setState(state => ({\n      openNotifcationList: !state.openNotifcationList,\n      reportModal: false,\n    }));\n  };\n  handleCloseNotificationList = event => {\n    if (this.anchorNotificationList.contains(event.target)) {\n      return;\n    }\n    this.setState({\n      openNotifcationList: false,\n      reportMenu: false,\n    });\n  };\n  render() {\n    const { classes } = this.props;\n    const { messageCount, messageList, loading, openNotifcationList, openNotifcation, openProfile, adnetworkId, adnetworkData, adNetworkJson } = this.state;\n    const user_image = \"user-image\";\n    const styleuser = {\n      borderRadius: \"50%\",\n      width: \"35px\",\n      height: \"35px\"\n    };\n    const userNameStyle = {\n      float: \"right\",\n      display: \"block\",\n      width: \"calc(100% - 50px)\",\n      color: \"#000\",\n      fontSize: \"13px\",\n      fontWeight: \"500\",\n      lineHeight: \"normal\",\n      marginTop: \"10px\"\n    };\n    const logoutStyle = {\n      float: \"right\",\n      display: \"block\",\n      width: \"calc(100% - 50px)\",\n      color: \"#2b73cd\",\n      fontSize: \"13px\",\n      fontWeight: \"500\",\n      lineHeight: \"normal\",\n      marginTop: \"4px\"\n    };\n\n    return (\n      <div className=\"mobileMenuSidebar\">\n        {/* <div className={classes.manager + \" menuSelectList\"} >\n            <AdnetworkSelect style={{zIndex: \"99999\"}} updateUserInfo={this.props.updateUserInfo} />\n        </div> */}\n        <Hidden smDown implementation=\"css\">\n          <div className={classes.manager + \" profile-box\"}>\n            <Button\n              onClick={this.handleToggleNotificationList}\n              buttonRef={node => {\n                this.anchorNotificationList = node;\n              }}\n              color={\"transparent\"}\n              aria-owns={openNotifcationList ? \"notification-menu-list-grow\" : null}\n              aria-haspopup=\"true\"\n              className=\"buttonlinkHeader\"\n            >\n              <span className=\"notificationicon\">\n                <Notifications className=\"noti_count\" />\n                {\n                  messageCount > 0\n                    ?\n                    <sup>{messageCount}</sup>\n                    :\n                    null\n                }\n              </span>\n            </Button>\n            <Poppers\n              open={openNotifcationList}\n              anchorEl={this.anchorNotificationList}\n              transition\n              disablePortal\n              className={\n                classNames({ [classes.popperClose]: !openNotifcationList }) +\n                \" \" +\n                classes.popperNavXX + ' AdnetworkSelect-popperNav'\n              }\n              style={{ zIndex: \"9999999\" }}\n            >\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  id=\"notification-menu-list-grow\"\n                  style={{\n                    transformOrigin:\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\"\n                  }}\n                >\n                  <Paper className=\"user-menu-box\" >\n                    <ClickAwayListener onClickAway={this.handleCloseNotificationList}>\n                      <Box>\n                        <div className=\"top_noti\">\n                          <h4>Notification List</h4>\n                        </div>\n                        <List>\n                          {\n\n                            messageList && messageList.length\n                              ?\n                              messageList.map((mList, key) => {\n                                if (mList.type == \"POLLUTION\") {\n                                  return (\n                                    <>\n                                      <ListItem alignItems=\"flex-start\" className=\"notificate_inner notificationslist\">\n                                        <ListItemAvatar>\n                                          <Avatar alt=\"Travis Howard\" src={userImg} />\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                          primary={mList.type}\n                                          secondary={\n                                            <React.Fragment>\n                                              <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                              >\n                                                {mList.title}:\n                                            </Typography>\n                                              {\" \" + mList.message}\n                                              <p>{mList.date}</p>\n                                            </React.Fragment>\n                                          }\n                                        />\n                                      </ListItem>\n                                      <Divider variant=\"inset\" component=\"li\" />\n                                    </>\n                                  )\n                                }\n                              })\n                              :\n                              loading\n                                ?\n                                <p className=\"no_noti\">Loading, please wait</p>\n                                :\n                                <p className=\"no_noti\">No notification</p>\n                          }\n                        </List>\n                      </Box>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Poppers>\n\n            <Link\n              href={basePath + baseRoutes.dashboard.path} ///${user.username}\n              to={basePath + baseRoutes.dashboard.path} ///${user.username}\n              style={userNameStyle}\n            >\n              Challenging Wonders\n          </Link>\n            <Link\n              href={basePath + baseRoutes.dashboard.path} ///${user.username}\n              to={basePath + baseRoutes.dashboard.path} ///${user.username}\n            >\n              <Button\n                buttonRef={node => {\n                  this.anchorProfile = node;\n                }}\n                color={window.innerWidth > 959 ? \"transparent\" : \"white\"}\n                justIcon={window.innerWidth > 959}\n                simple={!(window.innerWidth > 959)}\n                aria-owns={openNotifcation ? \"profile-menu-list-grow\" : null}\n                aria-haspopup=\"true\"\n                onClick={this.handleToggleProfile}\n                className={classes.buttonLink + \" profile-img-button\"}\n              >\n                {\" \"}\n                <span className=\"avataricon\">\n                  <Avatar\n                    alt=\"\"\n                    src={logo}\n                    className={user_image}\n                    style={styleuser}\n                  />\n                </span>\n              </Button>\n            </Link>\n          </div>\n        </Hidden>\n      </div>\n    );\n  }\n}\n\nAdminNavbarLinksClass.propTypes = {\n  classes: PropTypes.object,\n  updateUserInfo: PropTypes.func,\n};\nconst AdminNavbarLinks = connect(\n  mapStateToProps\n)(AdminNavbarLinksClass);\nexport default withStyles(headerLinksStyle)(AdminNavbarLinks);\n"]},"metadata":{},"sourceType":"module"}