{"ast":null,"code":"import _toConsumableArray from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/html/reactjs/ManagerWork/src/views/Dashboard/Dashboard.jsx\";\n\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // @material-ui/core\n\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Icon from \"@material-ui/core/Icon\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.jsx\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport Card from \"components/Card/Card.jsx\";\nimport CardHeader from \"components/Card/CardHeader.jsx\";\nimport CardIcon from \"components/Card/CardIcon.jsx\";\nimport CardFooter from \"components/Card/CardFooter.jsx\";\nimport advert from \"assets/img/advert.png\";\nimport assetsIcon from \"assets/img/assets.png\";\nimport vendor from \"assets/img/vendor.png\";\nimport featured from \"assets/img/featured.png\";\nimport clock from \"assets/img/clock.png\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport AddAlert from \"@material-ui/icons/AddAlert\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { generalAuthTokenHeader } from \"__helpers/auth-header\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, // styles,\nMenu, MenuItem, Paper, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Link as MaterialLink, CircularProgress, FormGroup, FormControl, InputLabel, Select, Input, Snackbar, LinearProgress, TextField } from \"@material-ui/core\";\nimport CardBody from \"components/Card/CardBody.jsx\";\nimport dashboardStyle from \"assets/jss/material-dashboard-react/views/dashboardStyle.jsx\";\nimport { userService } from \"_services/user.service\";\nimport \"__helpers/constants\";\nimport { SELECTED_CAMPAIGN } from \"__helpers/constants\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { ANALYTICS_CSV_DATA, ANALYTICS_CSV_ADVERTISEMENT_DATA, PER_PAGE_OPTIONS, RECORD_PER_PAGE } from \"__helpers/constants\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'; // then all Highcharts modules you will need\n\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport dataModule from 'highcharts/modules/data';\nimport { last } from \"@amcharts/amcharts4/.internal/core/utils/Array\";\nimport flatIcon from \"assets/img/flat.svg\";\nimport sunnycon from \"assets/img/sunny.svg\";\nimport logoIcon from \"assets/img/sLogo.png\";\nam4core.useTheme(am4themes_animated);\nHighchartsMore(Highcharts);\ndataModule(Highcharts); // Create chart instance\n\nvar columns = [{\n  id: \"pollutionLevel\",\n  label: \"Pollution Level\"\n}, {\n  id: \"co2\",\n  label: \"CO2 Value\"\n}, {\n  id: \"tVoc\",\n  label: \"tVoc Value\"\n}, {\n  id: \"timestamp\",\n  label: \"Measurement Time\"\n}, {\n  id: \"dateCreated\",\n  label: \"Creation Date\"\n}];\nvar ref = React.createRef();\nvar options = {\n  orientation: 'landscape',\n  unit: 'in',\n  format: [4, 2]\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {// addArticle: article => dispatch(addArticle(article))\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  // console.log(\"StateVal \"+JSON.stringify(state));\n  return {\n    userInfo: state.userInfo,\n    timestamp: state.timestamp,\n    campaings: state.campaings,\n    reduxLoadFlag: state.reduxLoadFlag\n  };\n};\n\nvar MapMarker = function MapMarker(_ref) {\n  var text = _ref.text;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'white',\n      background: 'none 0% 0% repeat scroll rgb(255 255 255)',\n      padding: '8x 5px',\n      display: 'inline-flex',\n      textAlign: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: '100%',\n      transform: 'translate(-50%, -50%)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: \"30px\"\n    },\n    src: logoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar DashboardClass = /*#__PURE__*/function (_React$Component) {\n  _inherits(DashboardClass, _React$Component);\n\n  var _super = _createSuper(DashboardClass);\n\n  function DashboardClass(props) {\n    var _this2;\n\n    _classCallCheck(this, DashboardClass);\n\n    _this2 = _super.call(this, props);\n\n    _this2.handleUserInput = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n\n      _this2.setState(_defineProperty({}, name, value), function () {\n        return _this2.getTodayData();\n      });\n    };\n\n    _this2.handleUserInputAll = function (e) {\n      var name = e.target.name;\n      var value = e.target.value;\n\n      _this2.setState(_defineProperty({}, name, value), function () {\n        return _this2.getAllData();\n      });\n    };\n\n    _this2.handleStartDate = function (value) {\n      var startDate = true;\n\n      if (value == null || !_this2.dateUtility.isValid(value)) {\n        startDate = false;\n      }\n\n      if (startDate) {\n        _this2.setState({\n          selectedDate: value\n        }, function () {\n          return _this2.getTodayData();\n        });\n      }\n\n      _this2.setState({\n        startDate: value,\n        startDateValid: startDate\n      });\n    };\n\n    _this2.dateUtility = new DateFnsUtils();\n    _this2._isMounted = false;\n    var alertNotificationValue = true;\n    _this2.state = {\n      value: 0,\n      page: 0,\n      loading: false,\n      rowsPerPage: RECORD_PER_PAGE,\n      timeStampVal: new Date().toLocaleTimeString(),\n      lastUsers: \"30 mins ago\",\n      currPolution: \"Normal\",\n      lastPollutionTime: \"Just Now\",\n      totalRecords: \"3000\",\n      pollutionData: _this2.props.campaings ? _this2.props.campaings : [],\n      reduxLoadFlag: false,\n      pollutionChartOption: {},\n      highChartOption: {},\n      tempHighChart: {},\n      allDataHighChart: {},\n      center: {\n        lat: 26.261530,\n        lng: 72.965993\n      },\n      zoom: 16,\n      selectedDate: new Date(),\n      todayItems: 20,\n      allItems: 200,\n      latestData: {},\n      todayData: [],\n      allData: [],\n      pollGraphType: \"co2\",\n      todayDate: new Date(),\n      endDate: null,\n      minSDate: new Date(\"10/18/2020\"),\n      minEDate: new Date(),\n      maxSDate: new Date(),\n      maxEDate: new Date(),\n      formErrors: {\n        startDate: \"\",\n        endDate: \"\"\n      },\n      startDateValid: false,\n      endDateValid: false,\n      isAlertSubs: alertNotificationValue ? true : false,\n      isMailSubs: false,\n      alertTvoc: \"50\",\n      alertCo2: \"400\",\n      alertEmail: \"\",\n      showAlert: 1,\n      showMail: 1,\n      syncTime: 15000 // syncTime: 10000,\n\n    };\n    _this2.handleGraphData = _this2.handleGraphData.bind(_assertThisInitialized(_this2));\n    _this2.handlePollutionGraphData = _this2.handlePollutionGraphData.bind(_assertThisInitialized(_this2));\n    _this2.newHighPollChart = _this2.newHighPollChart.bind(_assertThisInitialized(_this2));\n    _this2.tempHighChart = _this2.tempHighChart.bind(_assertThisInitialized(_this2));\n    _this2.allDataHighChart = _this2.allDataHighChart.bind(_assertThisInitialized(_this2));\n    _this2.getLastData = _this2.getLastData.bind(_assertThisInitialized(_this2));\n    _this2.getTodayData = _this2.getTodayData.bind(_assertThisInitialized(_this2));\n    _this2.getAllData = _this2.getAllData.bind(_assertThisInitialized(_this2));\n    _this2.handleStartDate = _this2.handleStartDate.bind(_assertThisInitialized(_this2));\n    _this2.handleStartDateError = _this2.handleStartDateError.bind(_assertThisInitialized(_this2));\n    _this2.backgroundDataApi = _this2.backgroundDataApi.bind(_assertThisInitialized(_this2));\n    _this2.backgroundM = _this2.backgroundM.bind(_assertThisInitialized(_this2));\n    _this2.sendMail = _this2.sendMail.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  _createClass(DashboardClass, [{\n    key: \"getToday\",\n    value: function getToday(dateValue, dateFormat) {\n      var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n      var today = new Date(dateValue);\n      var dd = today.getDate();\n      var mm = today.getMonth() + 1;\n      var mName = monthNames[today.getMonth()];\n      var yyyy = today.getFullYear();\n      var hh = today.getHours();\n      var min = today.getMinutes();\n      var sec = today.getSeconds();\n\n      if (dd < 10) {\n        dd = \"0\".concat(dd);\n      }\n\n      if (mm < 10) {\n        mm = \"0\".concat(mm);\n      }\n\n      if (dateFormat) {\n        if (dateFormat == \"date\") {\n          return \"\".concat(dd, \"-\").concat(mm, \"-\").concat(yyyy);\n        } else {\n          return \"\".concat(hh, \":\").concat(min, \":\").concat(sec);\n        }\n      }\n\n      return \"\".concat(dd, \" \").concat(mName, \" \").concat(hh, \":\").concat(min, \":\").concat(sec);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.chart) {\n        this.chart.dispose();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.getLastData();\n                this.getTodayData();\n                this.getAllData(); // this.handleGraphData();\n                // this.handlePollutionGraphData();\n                // this.newHighPollChart();\n                // this.tempHighChart();\n\n                clearInterval(this.interval);\n                this.backgroundM();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"backgroundM\",\n    value: function () {\n      var _backgroundM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.interval = setInterval(function () {\n                  return _this3.backgroundDataApi();\n                }, this.state.syncTime);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function backgroundM() {\n        return _backgroundM.apply(this, arguments);\n      }\n\n      return backgroundM;\n    }()\n  }, {\n    key: \"backgroundDataApi\",\n    value: function backgroundDataApi() {\n      this.getLastData();\n      this.getTodayData(); // this.setState({\n      //   showAlert: true,\n      // })\n      // this.getAllData();\n    }\n  }, {\n    key: \"sendMail\",\n    value: function () {\n      var _sendMail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dataObj, emailAddr) {\n        var mailBody, data, apiUrl, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                mailBody = \"\\n    Dear,\\n\\n    We have measured danger level air quality. please take appropriate action.\\n    <br>Poor air quality exposure may lead to headaches, sleepiness and stagnant, stale, stuffy air. Poor concentration, loss of attention, increased heart rate and slight nausea may also be present.\\n    <br>Please take care. Stay safe, Stay Healthy!\\n    <br>Thank You\\n    <br>\\n    Regards\\n    <br>\\n    Techno Wonders Team.\\n  \";\n                data = {\n                  message: mailBody,\n                  email: emailAddr,\n                  \"tvoc\": dataObj.pollution ? dataObj.pollution.tvoc : \"N/A\",\n                  \"co2\": dataObj.pollution ? dataObj.pollution.co2 : \"N/A\",\n                  \"temperature\": dataObj.pollution ? dataObj.pollution.temperature : \"N/A\",\n                  \"humidity\": dataObj.pollution ? dataObj.pollution.humidity : \"N/A\",\n                  \"pressure\": dataObj.pollution ? dataObj.pollution.pressure : \"N/A\"\n                };\n                apiUrl = \"http://35.193.238.179:9090/api/pollution/send-mail\";\n                _context3.prev = 3;\n                _context3.next = 6;\n                return fetch(apiUrl, {\n                  method: \"POST\",\n                  headers: generalAuthTokenHeader(),\n                  body: JSON.stringify(data)\n                }).then(function (response) {\n                  if (response.status === 400) {} else if (response.status === 401) {} else if (response.ok) {} else {}\n\n                  return response.json(); // return response.text();\n                }).then(function (data) {\n                  console.log(data);\n                  return true;\n                })[\"catch\"](function (error) {\n                  return response;\n                });\n\n              case 6:\n                response = _context3.sent;\n                _context3.next = 11;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](3);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 9]]);\n      }));\n\n      function sendMail(_x, _x2) {\n        return _sendMail.apply(this, arguments);\n      }\n\n      return sendMail;\n    }()\n  }, {\n    key: \"getLastData\",\n    value: function () {\n      var _getLastData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var apiUrl, lastdata, alertNotificationValue, mailNotificationObj, isAlertSubs, isMailSubs, co2MaxVal, showNotification, alertTvoc, alertCo2, alertEmail, showAlert, _alertTvoc, _alertCo, _alertEmail, showMail, latestDataTime;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                apiUrl = \"http://35.193.238.179:9090/api/pollution/top-data\";\n                _context4.next = 3;\n                return userService.fetchGlobalApisWithoutAuth(apiUrl);\n\n              case 3:\n                lastdata = _context4.sent;\n                alertNotificationValue = false;\n                mailNotificationObj = {};\n                isAlertSubs = alertNotificationValue ? true : false;\n                isMailSubs = mailNotificationObj && mailNotificationObj.email ? true : false;\n\n                if (lastdata && lastdata.max_co2) {\n                  co2MaxVal = 0;\n                  lastdata.maxPollLevel = \"Good\";\n\n                  if (lastdata.max_co2 > 250 && lastdata.max_co2 <= 400 || lastdata.max_tvoc <= 5) {\n                    co2MaxVal = 0;\n                    lastdata.maxPollLevel = \"Good\";\n                  } else if (lastdata.max_co2 > 400 && lastdata.max_co2 <= 1000 || lastdata.max_tvoc > 5 && lastdata.max_tvoc <= 50) {\n                    co2MaxVal = 1;\n                    lastdata.maxPollLevel = \"Normal\";\n                  } else if (lastdata.max_co2 > 1000 && lastdata.max_co2 <= 2000 || lastdata.max_tvoc > 50 && lastdata.max_tvoc <= 325) {\n                    co2MaxVal = 2;\n                    lastdata.maxPollLevel = \"Poor Air\";\n                  } else if (lastdata.max_co2 > 2000 && lastdata.max_co2 <= 5000 || lastdata.max_tvoc > 325 && lastdata.max_tvoc <= 500) {\n                    co2MaxVal = 3;\n                    lastdata.maxPollLevel = \"Air Quality Alert\";\n                  } else if (lastdata.max_co2 > 5000 || lastdata.max_tvoc > 325 && lastdata.max_tvoc <= 500) {\n                    co2MaxVal = 4;\n                    lastdata.maxPollLevel = \"Danger Level\";\n                  } // let co2MaxVal = 0;\n\n\n                  lastdata.minPollLevel = \"Good\";\n\n                  if (lastdata.min_co2 > 250 && lastdata.min_co2 <= 400 || lastdata.min_tvoc <= 5) {\n                    co2MaxVal = 0;\n                    lastdata.minPollLevel = \"Good\";\n                  } else if (lastdata.min_co2 > 400 && lastdata.min_co2 <= 1000 || lastdata.min_tvoc > 5 && lastdata.min_tvoc <= 50) {\n                    co2MaxVal = 1;\n                    lastdata.minPollLevel = \"Normal\";\n                  } else if (lastdata.min_co2 > 1000 && lastdata.min_co2 <= 2000 || lastdata.min_tvoc > 50 && lastdata.min_tvoc <= 325) {\n                    co2MaxVal = 2;\n                    lastdata.minPollLevel = \"Poor Air\";\n                  } else if (lastdata.min_co2 > 2000 && lastdata.min_co2 <= 5000 || lastdata.min_tvoc > 325 && lastdata.min_tvoc <= 500) {\n                    co2MaxVal = 3;\n                    lastdata.minPollLevel = \"Air Quality Alert\";\n                  } else if (lastdata.min_co2 > 5000 || lastdata.min_tvoc > 325 && lastdata.min_tvoc <= 500) {\n                    co2MaxVal = 4;\n                    lastdata.minPollLevel = \"Danger Level\";\n                  } // let co2MaxVal = 0;\n\n\n                  lastdata.pollLevel = \"Good\";\n                  lastdata.pollColor = \"light_green_color\";\n                  showNotification = {};\n\n                  if (lastdata.pollution.co2 > 250 && lastdata.pollution.co2 <= 400 || lastdata.pollution.co2 <= 5) {\n                    co2MaxVal = 0;\n                    lastdata.pollLevel = \"Good\";\n                    lastdata.pollColor = \"light_green_color\";\n                    showNotification = {\n                      title: \"Air Quality Alert\",\n                      message: \"We have measured good air quality\",\n                      type: \"success\"\n                    };\n                  } else if (lastdata.pollution.co2 > 400 && lastdata.pollution.co2 <= 1000 || lastdata.pollution.co2 > 5 && lastdata.pollution.co2 <= 50) {\n                    co2MaxVal = 1;\n                    lastdata.pollLevel = \"Normal\";\n                    lastdata.pollColor = \"orange_color\";\n                    showNotification = {\n                      title: \"Air Quality Alert\",\n                      message: \"We have measured normal air quality\",\n                      type: \"success\"\n                    };\n                  } else if (lastdata.pollution.co2 > 1000 && lastdata.pollution.co2 <= 2000 || lastdata.pollution.co2 > 50 && lastdata.pollution.co2 <= 325) {\n                    co2MaxVal = 2;\n                    lastdata.pollLevel = \"Poor Air\";\n                    lastdata.pollColor = \"light_orange_color\";\n                    showNotification = {\n                      title: \"Air Quality Alert\",\n                      message: \"We have measured medium level poor air quality\",\n                      type: \"warning\"\n                    };\n                  } else if (lastdata.pollution.co2 > 2000 && lastdata.pollution.co2 <= 5000 || lastdata.pollution.co2 > 325 && lastdata.pollution.co2 <= 500) {\n                    co2MaxVal = 3;\n                    lastdata.pollLevel = \"Air Quality Alert\";\n                    lastdata.pollColor = \"light_red_color\";\n                    showNotification = {\n                      title: \"Air Quality Alert\",\n                      message: \"We have measured poor air quality\",\n                      type: \"danger\"\n                    };\n                  } else if (lastdata.pollution.co2 > 5000 || lastdata.pollution.co2 > 325 && lastdata.pollution.co2 <= 500) {\n                    co2MaxVal = 4;\n                    lastdata.pollLevel = \"Danger Level\";\n                    lastdata.pollColor = \"red_color\";\n                    showNotification = {\n                      title: \"Air Quality Alert\",\n                      message: \"We have measured danger level air quality\",\n                      type: \"danger\"\n                    };\n                  }\n\n                  if (isAlertSubs && this.state.showAlert) {\n                    if (this.state.showAlert == 4) {\n                      // showNotification = {\n                      //   title: \"Air Quality Alert\",\n                      //   message: \"We have measured danger level air quality\",\n                      //   type: \"danger\"\n                      // };\n                      alertTvoc = mailNotificationObj && mailNotificationObj.tvoc ? mailNotificationObj.tvoc : \"50\";\n                      alertCo2 = mailNotificationObj && mailNotificationObj.co2 ? mailNotificationObj.co2 : \"400\";\n                      alertEmail = mailNotificationObj && mailNotificationObj.email ? mailNotificationObj.email : \"\";\n\n                      if (alertTvoc <= lastdata.pollution.tvoc || alertCo2 <= lastdata.pollution.co2) {\n                        userService.showNotification(showNotification);\n                        this.setState({\n                          showAlert: 1\n                        });\n                      }\n                    } else {\n                      showAlert = this.state.showAlert;\n                      this.setState({\n                        showAlert: showAlert + 1\n                      });\n                    }\n                  }\n\n                  if (isMailSubs && this.state.showMail) {\n                    if (this.state.showMail == 4) {\n                      _alertTvoc = mailNotificationObj && mailNotificationObj.tvoc ? mailNotificationObj.tvoc : \"50\";\n                      _alertCo = mailNotificationObj && mailNotificationObj.co2 ? mailNotificationObj.co2 : \"400\";\n                      _alertEmail = mailNotificationObj && mailNotificationObj.email ? mailNotificationObj.email : \"\";\n\n                      if (_alertTvoc <= lastdata.pollution.tvoc || _alertCo <= lastdata.pollution.co2) {\n                        this.setState({\n                          showMail: 1\n                        });\n                        this.sendMail(lastdata, _alertEmail);\n                      }\n                    } else {\n                      showMail = this.state.showMail;\n                      this.setState({\n                        showMail: showMail + 1\n                      });\n                    }\n                  }\n\n                  if (lastdata.max_temperature <= 0) {\n                    lastdata.maxTempLevel = \"Cold\";\n                  } else if (lastdata.max_temperature > 0 && lastdata.max_temperature < 10) {\n                    lastdata.maxTempLevel = \"Cold\";\n                  } else if (lastdata.max_temperature > 10 && lastdata.max_temperature < 20) {\n                    lastdata.maxTempLevel = \"Cool\";\n                  } else if (lastdata.max_temperature > 20 && lastdata.max_temperature < 30) {\n                    lastdata.maxTempLevel = \"Warm\";\n                  } else if (lastdata.max_temperature > 30 && lastdata.max_temperature < 40) {\n                    lastdata.maxTempLevel = \"Hot\";\n                  } else {\n                    lastdata.maxTempLevel = \"Hot & Sunny\";\n                  }\n\n                  if (lastdata.min_temperature <= 0) {\n                    lastdata.minTempLevel = \"Cold\";\n                  } else if (lastdata.min_temperature > 0 && lastdata.min_temperature < 10) {\n                    lastdata.minTempLevel = \"Cold\";\n                  } else if (lastdata.min_temperature > 10 && lastdata.min_temperature < 20) {\n                    lastdata.minTempLevel = \"Cool\";\n                  } else if (lastdata.min_temperature > 20 && lastdata.min_temperature < 30) {\n                    lastdata.minTempLevel = \"Warm\";\n                  } else if (lastdata.min_temperature > 30 && lastdata.min_temperature < 45) {\n                    lastdata.minTempLevel = \"Hot\";\n                  } else {\n                    lastdata.minTempLevel = \"Hot & Sunny\";\n                  }\n\n                  if (lastdata.pollution.temperature <= 0) {\n                    lastdata.tempLevel = \"Cold\";\n                  } else if (lastdata.pollution.temperature > 0 && lastdata.pollution.temperature < 10) {\n                    lastdata.tempLevel = \"Cold\";\n                  } else if (lastdata.pollution.temperature > 10 && lastdata.pollution.temperature < 20) {\n                    lastdata.tempLevel = \"Cool\";\n                  } else if (lastdata.pollution.temperature > 20 && lastdata.pollution.temperature < 30) {\n                    lastdata.tempLevel = \"Warm\";\n                  } else if (lastdata.pollution.temperature > 30 && lastdata.pollution.temperature < 40) {\n                    lastdata.tempLevel = \"Hot\";\n                  } else {\n                    lastdata.tempLevel = \"Hot & Sunny\";\n                  }\n\n                  latestDataTime = this.getToday(new Date(lastdata.pollution.timestamp));\n                  lastdata.latestDataTime = latestDataTime;\n                }\n\n                this.setState({\n                  latestData: lastdata\n                }); // console.log(lastdata)\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getLastData() {\n        return _getLastData.apply(this, arguments);\n      }\n\n      return getLastData;\n    }()\n  }, {\n    key: \"getTodayData\",\n    value: function () {\n      var _getTodayData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this4 = this;\n\n        var todayDate, dateVal, apiUrl, todayData;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                todayDate = new Date();\n                dateVal = this.getToday(this.state.selectedDate, \"date\");\n                apiUrl = \"http://35.193.238.179:9090/api/pollution/data?from_date=\" + dateVal + \"&to_date=\" + dateVal + \"&page=0&size=\" + this.state.todayItems + \"&sort=created,desc\";\n                _context5.next = 5;\n                return userService.fetchGlobalApisWithoutAuth(apiUrl);\n\n              case 5:\n                todayData = _context5.sent;\n                this.setState({\n                  todayData: todayData\n                }, function () {\n                  _this4.newHighPollChart();\n\n                  _this4.tempHighChart();\n                });\n                console.log(todayData);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTodayData() {\n        return _getTodayData.apply(this, arguments);\n      }\n\n      return getTodayData;\n    }()\n  }, {\n    key: \"tempHighChart\",\n    value: function tempHighChart() {\n      var _this5 = this;\n\n      var pollutionDataArr = [];\n      var chartLabels = [];\n      var colorsLabels = [];\n      var pollutionLabels = [];\n      var dayWiseData = [];\n\n      if (this.state.todayData && this.state.todayData.length) {\n        this.state.todayData.map(function (pData, key) {\n          var day = new Date(pData.timestamp).getDate();\n\n          var todayVal = _this5.getToday(new Date(pData.timestamp), \"time\");\n\n          if (dayWiseData && dayWiseData[day]) {\n            // console.log(\"main if\", key)\n            var dayData = dayWiseData[day];\n            dayData['data'].push(pData.co2);\n            dayWiseData.map(function (dData, key) {});\n          } else {\n            // console.log(\"main else\", key)\n            var tempData = [];\n            tempData.data = [pData.co2];\n            tempData.day = day;\n            tempData.timestamp = pData.timestamp;\n            tempData.name = pData.timestamp;\n            dayWiseData[day] = tempData;\n          }\n\n          var tempPollData = {};\n          tempPollData.y = pData.temperature;\n          tempPollData.pollution = pData.pollution;\n          tempPollData.dayTemp = \"Normal\";\n          tempPollData.timestamp = new Date(pData.timestamp);\n\n          if (pData.temperature <= 0) {\n            tempPollData.dayTemp = \"Cold\";\n          } else if (pData.temperature > 0 && pData.temperature < 10) {\n            tempPollData.dayTemp = \"Cold\";\n          } else if (pData.temperature > 10 && pData.temperature < 20) {\n            tempPollData.dayTemp = \"Cool\";\n          } else if (pData.temperature > 20 && pData.temperature < 30) {\n            tempPollData.dayTemp = \"Warm\";\n          } else if (pData.temperature > 30 && pData.temperature < 40) {\n            tempPollData.dayTemp = \"Hot\";\n          } else {\n            tempPollData.dayTemp = \"Hot & Sunny\";\n          }\n\n          var colorCode = \"27b35a\";\n\n          if (pData.temperature <= 0) {\n            colorCode = \"#27b35a\";\n          } else if (pData.temperature > 0 && pData.temperature <= 10) {\n            colorCode = \"#27b35a\";\n          } else if (pData.temperature > 10 && pData.temperature <= 20) {\n            colorCode = \"#2cb327\";\n          } else if (pData.temperature > 20 && pData.temperature <= 30) {\n            colorCode = \"#9ab00a\";\n          } else if (pData.temperature > 30 && pData.temperature <= 40) {\n            colorCode = \"#b0120a\";\n          } else {\n            colorCode = \"#b0120a\";\n          }\n\n          tempPollData.color = colorCode; // pollutionDataArr.push(pData.co2);\n\n          pollutionDataArr.push(tempPollData);\n          pollutionLabels.push(pData.pollution);\n          chartLabels.push(todayVal);\n          colorsLabels.push(colorCode);\n        }); // console.log(colorsLabels)\n      }\n\n      var formatedDailyData = [];\n      dayWiseData.map(function (dailyData) {\n        // formatedDailyData.push(dailyData)\n        formatedDailyData = [].concat(_toConsumableArray(formatedDailyData), [dailyData]);\n      });\n      var tempHighChart = {\n        chart: {\n          type: 'spline',\n          backgroundColor: '#ffffff1c',\n          style: {\n            color: '#fff'\n          } // inverted: true,\n          // zoom: \"xy\"\n\n        },\n        title: {\n          text: 'Temperature (°C) Graph',\n          style: {\n            color: '#fff'\n          }\n        },\n        subtitle: {\n          text: 'Day Wise Temperature Graph',\n          style: {\n            color: '#fff'\n          }\n        },\n        xAxis: {\n          title: {\n            text: 'Time',\n            style: {\n              color: '#fff'\n            }\n          },\n          type: 'category',\n          categories: chartLabels,\n          // categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n          labels: {\n            formatter: function formatter() {\n              return chartLabels[this.pos];\n            },\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Temperature (°C)',\n            style: {\n              color: '#fff'\n            }\n          },\n          type: 'logarithmic',\n          min: 1,\n          labels: {\n            overflow: 'justify',\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        tooltip: {\n          useHTML: true,\n          formatter: function formatter() {\n            // console.log(this, this.point.low); // just to see , what data you can access\n            var tempValue = this.point.dayTemp;\n            var colorValue = this.point.color;\n            var yValue = this.point.y;\n            var nameValue = this.series.name;\n            var keyValue = this.point.timestamp; // return '<b>' + this.x +\n            //   '</b>: <b>' + barValue + ' %</b>';\n\n            return '<span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' + nameValue + ': </td>' + '<td style=\"padding:0\"><b>' + yValue + ' (°C)</b></td></tr><tr><td style=\"color:' + colorValue + ';padding:0\">' + tempValue + '</td></tr></table>';\n          }\n        },\n        // tooltip: {\n        //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n        //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n        //   footerFormat: '</table>',\n        //   shared: true,\n        //   useHTML: true\n        // },\n        // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n        colors: colorsLabels,\n        pollutionLabels: pollutionLabels,\n        plotOptions: {\n          columnrange: {\n            dataLabels: {\n              enabled: true,\n              format: '{y}°C'\n            },\n            colorByPoint: true\n          },\n          series: {\n            animation: false\n          },\n          column: {\n            colorByPoint: true\n          },\n          line: {\n            dataLabels: {\n              enabled: true,\n              format: '{y}°C'\n            },\n            enableMouseTracking: true\n          },\n          spline: {\n            marker: {\n              radius: 4,\n              lineColor: '#666666',\n              lineWidth: 1\n            }\n          }\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: 'fff'\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        series: [{\n          name: 'Temperature',\n          data: pollutionDataArr,\n          style: {\n            color: '#fff'\n          },\n          color: '#fff'\n        }]\n      };\n      this.setState({\n        tempHighChart: tempHighChart\n      });\n    }\n  }, {\n    key: \"newHighPollChart\",\n    value: function newHighPollChart() {\n      var _this6 = this;\n\n      var pollutionDataArr = [];\n      var chartLabels = [];\n      var colorsLabels = [];\n      var pollutionLabels = [];\n      var dayWiseData = [];\n\n      if (this.state.todayData && this.state.todayData.length) {\n        this.state.todayData.map(function (pData, key) {\n          var day = new Date(pData.timestamp).getDate(); // if (key > 10) {\n          //   return\n          // }\n\n          var todayVal = _this6.getToday(new Date(pData.timestamp), \"time\");\n\n          if (dayWiseData && dayWiseData[day]) {\n            // console.log(\"main if\", key)\n            var dayData = dayWiseData[day];\n            dayData['data'].push(pData.co2);\n            dayWiseData.map(function (dData, key) {});\n          } else {\n            // console.log(\"main else\", key)\n            var tempData = [];\n            tempData.data = [pData.co2];\n            tempData.day = day;\n            tempData.timestamp = pData.timestamp;\n            tempData.name = pData.timestamp;\n            dayWiseData[day] = tempData;\n          }\n\n          var tempPollData = {};\n          var colorCode = \"#27b35a\";\n\n          if (_this6.state.pollGraphType == \"co2\") {\n            tempPollData.y = pData.co2;\n            tempPollData.timestamp = new Date(pData.timestamp); // pollutionDataArr.push(pData.co2);\n\n            pollutionLabels.push(pData.pollution);\n            chartLabels.push(todayVal);\n            var pollValue = \"Good\";\n\n            if (pData.co2 > 250 && pData.co2 <= 400) {\n              colorCode = \"#27b35a\";\n              pollValue = \"Good\";\n            } else if (pData.co2 > 400 && pData.co2 <= 1000) {\n              colorCode = \"#27b329\";\n              pollValue = \"Normal\";\n            } else if (pData.co2 > 1000 && pData.co2 <= 2000) {\n              colorCode = \"#b08c0a\";\n              pollValue = \"Poor Air\";\n            } else if (pData.co2 > 2000 && pData.co2 <= 5000) {\n              colorCode = \"#b0120a\";\n              pollValue = \"Air Quality Alert\";\n            } else if (pData.co2 > 5000) {\n              colorCode = \"#b0120a\";\n              pollValue = \"Danger Level\";\n            }\n\n            tempPollData.pollution = pollValue;\n            tempPollData.graphUnitType = \"ppm\";\n            pollutionDataArr.push(tempPollData);\n          } else {\n            tempPollData.y = pData.tvoc; // tempPollData.pollution = pData.pollution\n\n            tempPollData.timestamp = new Date(pData.timestamp);\n            var _pollValue = \"Good\"; // pollutionDataArr.push(pData.co2);\n            // pollutionDataArr.push(tempPollData);\n\n            pollutionLabels.push(pData.pollution);\n            chartLabels.push(todayVal);\n\n            if (pData.tvoc <= 5) {\n              colorCode = \"#27b35a\";\n              _pollValue = \"Good\";\n            } else if (pData.tvoc > 5 && pData.tvoc <= 50) {\n              colorCode = \"#27b35a\";\n              _pollValue = \"Normal\";\n            } else if (pData.tvoc > 50 && pData.tvoc <= 325) {\n              colorCode = \"#2cb327\";\n              _pollValue = \"Poor Air\";\n            } else if (pData.tvoc > 325 && pData.tvoc <= 500) {\n              colorCode = \"#9ab00a\";\n            } else {\n              colorCode = \"#b0120a\";\n              _pollValue = \"Danger Level\";\n            }\n\n            tempPollData.pollution = _pollValue;\n            tempPollData.graphUnitType = \"ppb\";\n            pollutionDataArr.push(tempPollData);\n          }\n\n          colorsLabels.push(colorCode);\n        }); // console.log(colorsLabels)\n      }\n\n      var formatedDailyData = [];\n      dayWiseData.map(function (dailyData) {\n        // formatedDailyData.push(dailyData)\n        formatedDailyData = [].concat(_toConsumableArray(formatedDailyData), [dailyData]);\n      });\n      var highChartOption = {\n        chart: {\n          type: 'column',\n          backgroundColor: '#ffffff1c',\n          style: {\n            color: '#fff'\n          } // inverted: true,\n          // zoom: \"xy\"\n\n        },\n        title: {\n          text: 'Air Quality Graph',\n          style: {\n            color: '#fff'\n          }\n        },\n        subtitle: {\n          text: 'Day Wise Air Quality Graph',\n          style: {\n            color: '#fff'\n          }\n        },\n        xAxis: {\n          title: {\n            text: 'Time',\n            style: {\n              color: '#fff'\n            }\n          },\n          type: 'category',\n          categories: chartLabels,\n          labels: {\n            formatter: function formatter() {\n              return chartLabels[this.pos];\n            },\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Units',\n            style: {\n              color: '#fff'\n            }\n          },\n          type: 'logarithmic',\n          min: 1,\n          labels: {\n            overflow: 'justify',\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        tooltip: {\n          useHTML: true,\n          formatter: function formatter() {\n            // console.log(this, this.point.low); // just to see , what data you can access\n            var pollValue = this.point.pollution;\n            var colorValue = this.point.color;\n            var yValue = this.point.y;\n            var nameValue = this.series.name;\n            var keyValue = this.point.timestamp;\n            var unitValue = this.point.graphUnitType; // return '<b>' + this.x +\n            //   '</b>: <b>' + barValue + ' %</b>';\n\n            return '<span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' + \"Measurement\" + ': </td>' + '<td style=\"padding:0\"><b>' + yValue + ' ' + unitValue + '</b></td></tr><tr><td style=\"color:' + colorValue + ';padding:0\">' + pollValue + '</td></tr></table>';\n          }\n        },\n        // tooltip: {\n        //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n        //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n        //   footerFormat: '</table>',\n        //   shared: true,\n        //   useHTML: true\n        // },\n        // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n        colors: colorsLabels,\n        pollutionLabels: pollutionLabels,\n        plotOptions: {\n          columnrange: {\n            dataLabels: {// enabled: true,\n              //  format: '{y}°C'\n            },\n            colorByPoint: true\n          },\n          series: {\n            animation: false\n          },\n          column: {\n            colorByPoint: true\n          }\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: 'fff'\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        series: [{\n          name: 'Pollution',\n          data: pollutionDataArr\n        }]\n      };\n      this.setState({\n        highChartOption: highChartOption\n      });\n    }\n  }, {\n    key: \"getAllData\",\n    value: function () {\n      var _getAllData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this7 = this;\n\n        var apiUrl, allData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                apiUrl = \"http://35.193.238.179:9090/api/pollution/data?page=0&size=\" + this.state.allItems + \"&sort=created,desc\";\n                _context6.next = 3;\n                return userService.fetchGlobalApisWithoutAuth(apiUrl);\n\n              case 3:\n                allData = _context6.sent;\n                this.setState({\n                  allData: allData\n                }, function () {\n                  return _this7.allDataHighChart();\n                });\n                console.log(allData);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAllData() {\n        return _getAllData.apply(this, arguments);\n      }\n\n      return getAllData;\n    }()\n  }, {\n    key: \"allDataHighChart\",\n    value: function allDataHighChart() {\n      var _this8 = this;\n\n      var pollutionDataArr = [];\n      var chartLabels = [];\n      var colorsLabels = [];\n      var pollutionLabels = [];\n      var dayWiseData = [];\n\n      if (this.state.allData && this.state.allData.length) {\n        this.state.allData.map(function (pData, key) {\n          var day = new Date(pData.timestamp).getDate();\n\n          var todayVal = _this8.getToday(new Date(pData.timestamp));\n\n          var allDataObj = [];\n\n          if (pollutionDataArr && pollutionDataArr.length) {\n            console.log(\"if all\");\n            pollutionDataArr = pollutionDataArr.filter(function (pollData, cKey) {\n              var tmpData = pollData;\n\n              if (pollData.name == \"CO2 (ppm)\") {\n                var _tmpData = pollData.data;\n\n                _tmpData.push(pData.co2);\n\n                _tmpData.data = _tmpData;\n              }\n\n              if (pollData.name == \"tVOC (ppb)\") {\n                var _tmpData2 = pollData.data;\n\n                _tmpData2.push(pData.tvoc);\n\n                _tmpData2.data = _tmpData2;\n              }\n\n              if (pollData.name == \"Humidity (g.kg-1)\") {\n                var _tmpData3 = pollData.data;\n\n                _tmpData3.push(pData.humidity);\n\n                _tmpData3.data = _tmpData3;\n              }\n\n              if (pollData.name == \"Pressure (Pa)\") {\n                var _tmpData4 = pollData.data;\n\n                _tmpData4.push(pData.pressure);\n\n                _tmpData4.data = _tmpData4;\n              }\n\n              if (pollData.name == \"Temperature (°C)\") {\n                var _tmpData5 = pollData.data;\n\n                _tmpData5.push(pData.temperature);\n\n                _tmpData5.data = _tmpData5;\n              }\n\n              return tmpData;\n            });\n          } else {\n            console.log(\"else all\");\n            var co2Data = {};\n            co2Data.data = [pData.co2];\n            co2Data.name = \"CO2 (ppm)\";\n            co2Data.color = '#0066FF';\n            co2Data.timestamp = new Date(pData.timestamp);\n            var tVOCData = {};\n            tVOCData.data = [pData.tvoc];\n            tVOCData.name = \"tVOC (ppb)\";\n            tVOCData.color = '#FF0000';\n            tVOCData.timestamp = new Date(pData.timestamp);\n            var humidityData = {};\n            humidityData.data = [pData.humidity];\n            humidityData.name = \"Humidity (g.kg-1)\";\n            humidityData.color = '#0a7eb0';\n            humidityData.timestamp = new Date(pData.timestamp);\n            var pressureData = {};\n            pressureData.data = [pData.pressure];\n            pressureData.name = \"Pressure (Pa)\";\n            pressureData.color = '#b00a60';\n            pressureData.timestamp = new Date(pData.timestamp);\n            var temperatureData = {};\n            temperatureData.data = [pData.temperature];\n            temperatureData.name = \"Temperature (°C)\";\n            temperatureData.color = '#a20ab0';\n            temperatureData.timestamp = new Date(pData.timestamp); // #b0120a', '#ffab91', '#ED5534', '#433C39', '#545150',\n\n            pollutionDataArr.push(co2Data);\n            pollutionDataArr.push(tVOCData);\n            pollutionDataArr.push(humidityData);\n            pollutionDataArr.push(pressureData);\n            pollutionDataArr.push(temperatureData);\n          }\n\n          pollutionLabels.push(pData.pollution);\n          chartLabels.push(todayVal);\n        }); // console.log(colorsLabels)\n      }\n\n      console.log(pollutionDataArr);\n      var formatedDailyData = [];\n      dayWiseData.map(function (dailyData) {\n        // formatedDailyData.push(dailyData)\n        formatedDailyData = [].concat(_toConsumableArray(formatedDailyData), [dailyData]);\n      });\n      var allDataHighChart = {\n        chart: {\n          // type: 'spline',\n          // inverted: true,\n          // zoom: \"xy\"\n          backgroundColor: '#ffffff1c',\n          style: {\n            color: '#fff'\n          }\n        },\n        title: {\n          text: 'Sequence Data',\n          style: {\n            color: '#fff'\n          }\n        },\n        subtitle: {\n          text: 'Day Wise Graph',\n          style: {\n            color: '#fff'\n          }\n        },\n        xAxis: {\n          accessibility: {\n            rangeDescription: 'Measurement'\n          },\n          type: 'category',\n          categories: chartLabels,\n          labels: {\n            overflow: 'justify',\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Units',\n            style: {\n              color: '#fff'\n            }\n          },\n          labels: {\n            overflow: 'justify',\n            style: {\n              color: '#fff'\n            }\n          }\n        },\n        tooltip: {\n          useHTML: true,\n          formatter: function formatter() {\n            // console.log(this, this.point.low); // just to see , what data you can access\n            var pollValue = this.point.pollution;\n            var colorValue = this.point.color;\n            var yValue = this.point.y;\n            var nameValue = this.series.name;\n            var keyValue = this.x; // return '<b>' + this.x +\n            //   '</b>: <b>' + barValue + ' %</b>';\n\n            return '<span style=\"color:' + colorValue + ';padding:0;font-size:10px\">Measurement</span><br><span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' + nameValue + ': </td>' + '<td style=\"padding:0\"><b>' + yValue + '</b></td></tr></table>';\n          }\n        },\n        // tooltip: {\n        //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n        //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n        //   footerFormat: '</table>',\n        //   shared: true,\n        //   useHTML: true\n        // },\n        // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n        colors: colorsLabels,\n        pollutionLabels: pollutionLabels,\n        plotOptions: {\n          series: {\n            label: {\n              connectorAllowed: false\n            }\n          },\n          columnrange: {\n            colorByPoint: true\n          }\n        },\n        legend: {\n          layout: 'vertical',\n          align: 'right',\n          verticalAlign: 'middle',\n          itemStyle: {\n            color: 'fff'\n          }\n        },\n        column: {\n          colorByPoint: true\n        },\n        credits: {\n          enabled: false\n        },\n        // series: [{\n        //   name: 'Measurement',\n        //   data: pollutionDataArr,\n        // }],\n        series: pollutionDataArr,\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 500\n            },\n            chartOptions: {\n              legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom'\n              }\n            }\n          }]\n        }\n      };\n      this.setState({\n        allDataHighChart: allDataHighChart\n      });\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {}\n  }, {\n    key: \"handleGraphData\",\n    value: function handleGraphData() {\n      var pollutionData = am4core.create(\"pollutionData\", am4charts.XYChart); // chart.paddingRight = 20;\n\n      pollutionData.paddingRight = this.props.paddingRight;\n      var data = [];\n\n      if (this.state.pollutionData && this.state.pollutionData.length) {\n        this.state.pollutionData.map(function (pData, key) {\n          data.push({\n            date: new Date(pData.timestamp),\n            name: \"Pollution\",\n            value: pData.co2\n          });\n        }); // let visits = 10;\n        // for (let i = 1; i < 366; i++) {\n        //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n        //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n        // }\n      }\n\n      pollutionData.data = data;\n      var dateAxis = pollutionData.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n      var valueAxis = pollutionData.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.renderer.minWidth = 35;\n      var series = pollutionData.series.push(new am4charts.LineSeries());\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n      series.tooltipText = \"{valueY.value}\";\n      pollutionData.cursor = new am4charts.XYCursor();\n      pollutionData.cursor.behavior = \"none\";\n      pollutionData.seriesContainer.draggable = false;\n      pollutionData.seriesContainer.resizable = false;\n      pollutionData.seriesContainer.draggable = false;\n      pollutionData.seriesContainer.resizable = false; // let scrollbarX = new am4charts.XYChartScrollbar();\n      // scrollbarX.series.push(series);\n      // pollutionData.scrollbarX = scrollbarX;\n      // scrollbarX.interactionsEnabled = false;\n\n      this.pollutionData = pollutionData;\n    }\n  }, {\n    key: \"handlePollutionGraphData\",\n    value: function handlePollutionGraphData() {\n      // Create chart instance\n      var pollutionDataLine = am4core.create(\"pollutionDataLine\", am4charts.XYChart);\n      pollutionDataLine.paddingRight = this.props.paddingRight;\n      var pollutionDataArr = [];\n\n      if (this.state.pollutionData && this.state.pollutionData.length) {\n        this.state.pollutionData.map(function (pData, key) {\n          var day = new Date(pData.timestamp).getDate();\n          pollutionDataArr.push({\n            // date: \"\" + new Date(pData.timestamp),\n            // name: \"Pollution\",\n            // units: pData.co2,\n            \"country\": \"Day: \" + day,\n            \"litres\": pData.co2,\n            \"units\": pData.tvoc,\n            \"pollValue\": pData.pollution,\n            \"measureDate\": pData.timestamp\n          });\n        }); // let visits = 10;\n        // for (let i = 1; i < 366; i++) {\n        //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n        //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n        // }\n      }\n\n      pollutionDataLine.data = pollutionDataArr; // Create axes\n\n      var categoryAxis = pollutionDataLine.xAxes.push(new am4charts.CategoryAxis());\n      categoryAxis.dataFields.category = \"country\";\n      categoryAxis.title.text = \"Countries\";\n      var valueAxis = pollutionDataLine.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.title.text = \"Litres sold (M)\"; // Create series\n\n      var series = pollutionDataLine.series.push(new am4charts.ColumnSeries());\n      series.dataFields.valueY = \"litres\";\n      series.dataFields.categoryX = \"country\";\n      series.name = \"Sales\";\n      series.pollValue = \"pollValue\";\n      series.measureDate = \"measureDate\";\n      series.columns.template.tooltipText = \"Pollution Data\\nPollution: {pollValue}\\nDate: {measureDate}\";\n      series.columns.template.fill = am4core.color(\"#104547\");\n      var series2 = pollutionDataLine.series.push(new am4charts.LineSeries());\n      series2.name = \"Units\";\n      series2.stroke = am4core.color(\"#CDA2AB\");\n      series2.strokeWidth = 3;\n      series2.dataFields.valueY = \"units\";\n      series2.dataFields.categoryX = \"country\";\n      this.pollutionDataLine = pollutionDataLine;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (oldProps.paddingRight !== this.props.paddingRight) {\n        this.chart.paddingRight = this.props.paddingRight;\n      } // if (this.chart.paddingRight !== this.props.paddingRight) {\n      //   this.chart.paddingRight = this.props.paddingRight;\n      // }\n\n\n      console.log(\"outside\");\n\n      if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n        console.log(\"inside\", this.props);\n        var campaings = [];\n        var userInfo = {};\n\n        if (this.props.campaings) {\n          var campaingsList = this.props.campaings;\n          campaings = campaingsList ? campaingsList : [];\n\n          if (this.pollutionData) {\n            var data = [];\n            campaings.map(function (pData, key) {\n              data.push({\n                date: new Date(pData.timestamp),\n                name: \"Pollution\",\n                value: pData.co2\n              });\n            });\n            this.pollutionData.data = data;\n            this.pollutionData.paddingRight = this.props.paddingRight; // console.log(\"insout\", this.props, campaings)\n          }\n        }\n\n        this.setState({\n          pollutionData: campaings,\n          reduxLoadFlag: this.props.reduxLoadFlag\n        });\n      }\n    }\n  }, {\n    key: \"handleStartDateError\",\n    value: function handleStartDateError(error, value) {\n      this.setState({\n        startDateValid: error || value == \"\" || value == null ? false : true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      var classes = this.props.classes;\n      var test = \"test-cover\";\n      var test1 = \"test-cover1\";\n      var test2 = \"test-cover2\";\n      var test3 = \"test-cover3\";\n      var test4 = \"test-cover4\";\n      var clock_cover = \"clock-cover\";\n      var styletest = {\n        padding: \"23px\"\n      };\n      var styletest1 = {\n        padding: \"21px 24px\"\n      };\n      var styletest2 = {\n        padding: \"20px 23px\",\n        background: \"linear-gradient(60deg, #1666ca, #3c86e1)\",\n        boxShadow: \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(168, 198, 234,.4)\"\n      };\n      var styletest3 = {\n        padding: \"19px 25px\",\n        background: \"linear-gradient(60deg, #05b0c5, #20c2d6)\",\n        boxShadow: \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(209, 240, 244,.4)\"\n      };\n      var styletest4 = {\n        background: \"linear-gradient(60deg, #932aad, #a742b9)\",\n        boxShadow: \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(214, 176, 224,.4)\"\n      };\n      var clock_style = {\n        width: \"15px\",\n        height: \"15px\",\n        position: \"relative\",\n        top: \"3px\",\n        marginRight: \"3px\"\n      };\n      var _this$state = this.state,\n          currPolution = _this$state.currPolution,\n          lastPollutionTime = _this$state.lastPollutionTime,\n          totalRecords = _this$state.totalRecords,\n          pollutionData = _this$state.pollutionData,\n          highChartOption = _this$state.highChartOption,\n          tempHighChart = _this$state.tempHighChart,\n          allDataHighChart = _this$state.allDataHighChart,\n          latestData = _this$state.latestData;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1381,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1383,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1384,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: \"dash-tiles box \".concat(latestData && latestData.pollColor ? latestData.pollColor : \"light_green_color\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1385,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        color: \"success\",\n        stats: true,\n        icon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardIcon, {\n        color: \"success\",\n        className: \"box-image-cover new-cover\",\n        style: styletest,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1387,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"card_img\",\n        src: flatIcon,\n        alt: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1388,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.cardCategory + \" white-text current-air\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1390,\n          columnNumber: 17\n        }\n      }, \"Current Air Quality\"), /*#__PURE__*/React.createElement(\"h3\", {\n        className: classes.cardTitle + \" white-text air-quality\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1391,\n          columnNumber: 17\n        }\n      }, latestData && latestData.pollLevel ? latestData.pollLevel : \"Normal\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"full-width d-flex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1392,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1394,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1394,\n          columnNumber: 49\n        }\n      }, \"Max Air Quality\"), \" \", latestData && latestData.maxPollLevel ? latestData.maxPollLevel : \"Normal\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1395,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1395,\n          columnNumber: 49\n        }\n      }, \"Min Air Quality\"), \" \", latestData && latestData.minPollLevel ? latestData.minPollLevel : \"Normal\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"full-width d-flex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 49\n        }\n      }, \"TVOC Measurement\"), \" \", latestData && latestData.pollution ? latestData.pollution.tvoc + \" ppb\" : \"N/A\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1399,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1399,\n          columnNumber: 49\n        }\n      }, \"CO2 Measurement\"), \" \", latestData && latestData.pollution ? latestData.pollution.co2 + \" ppm\" : \"N/A\"))), /*#__PURE__*/React.createElement(CardFooter, {\n        stats: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1402,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.stats + \" white-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1403,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: clock,\n        className: clock_cover + \" white-text\",\n        style: clock_style,\n        alt: \"time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1404,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"white-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410,\n          columnNumber: 19\n        }\n      }, latestData.latestDataTime && latestData.latestDataTime))))), /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1415,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: \"dash-tiles box temp_card_color box_card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        color: \"danger\",\n        stats: true,\n        icon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1417,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardIcon, {\n        color: \"success\",\n        className: test1 + \" new-cover\",\n        style: styletest1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1418,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"card_img\",\n        src: sunnycon,\n        alt: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"h3\", {\n        className: classes.cardTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 17\n        }\n      }, latestData && latestData.tempLevel ? latestData.pollution.temperature + \" °C\" : \"Normal\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"full-width d-flex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1424,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 49\n        }\n      }, \"Maximun Temp:\"), \" \", latestData && latestData.maxTempLevel ? latestData.max_temperature + \" °C\" : \"Normal\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1426,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1426,\n          columnNumber: 49\n        }\n      }, \"Minimum Temp:\"), \" \", latestData && latestData.minTempLevel ? latestData.min_temperature + \" °C\" : \"Normal\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"full-width d-flex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1428,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 55\n        }\n      }, \"Temperature:\"), \" \", latestData && latestData.minTempLevel ? latestData.pollution.temperature + \" °C\" : \"Normal\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1430,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1430,\n          columnNumber: 55\n        }\n      }, \"Humidity:\"), \" \", latestData && latestData.pollution ? latestData.pollution.humidity + \" g.kg-1\" : \"N/A\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"tempratures small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 55\n        }\n      }, \"Pressure\"), \" \", latestData && latestData.pollution ? latestData.pollution.pressure + \" pa\" : \"N/A\"))), /*#__PURE__*/React.createElement(CardFooter, {\n        stats: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1434,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.stats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1435,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: clock,\n        className: clock_cover,\n        style: clock_style,\n        alt: \"time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1436,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"white-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1442,\n          columnNumber: 19\n        }\n      }, latestData.latestDataTime && latestData.latestDataTime)))))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"box-with-bg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1449,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"heading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1450,\n          columnNumber: 11\n        }\n      }, \"Day Wise Graph\"), /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashTimePanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1453,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Graph Type\",\n        select: true,\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        name: \"pollGraphType\",\n        autoComplete: \"off\" // value={this.state.pollGraphType}\n        ,\n        \"data-validators\": \"isRequired,isAlpha\" // onChange={this.handleUserInput}\n        // variant=\"outlined\"\n        ,\n        variant: \"filled\",\n        size: \"small\",\n        margin: \"dense\",\n        SelectProps: {\n          multiple: false,\n          value: this.state.pollGraphType,\n          onChange: this.handleUserInput\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1454,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"co2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1473,\n          columnNumber: 19\n        }\n      }, \"CO2\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"tvoc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1478,\n          columnNumber: 19\n        }\n      }, \"tVoc\"))), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1485,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Records\",\n        select: true,\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        name: \"todayItems\",\n        autoComplete: \"off\" // value={this.state.todayItems}\n        ,\n        \"data-validators\": \"isRequired,isAlpha\" // onChange={this.handleUserInput}\n        ,\n        variant: \"filled\",\n        size: \"small\",\n        margin: \"dense\",\n        SelectProps: {\n          multiple: false,\n          value: this.state.todayItems,\n          onChange: this.handleUserInput\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1486,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"2000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 19\n        }\n      }, \"Today's All Record\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1509,\n          columnNumber: 19\n        }\n      }, \"10\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1514,\n          columnNumber: 19\n        }\n      }, \"20\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"50\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 19\n        }\n      }, \"50\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1524,\n          columnNumber: 19\n        }\n      }, \"100\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"200\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1529,\n          columnNumber: 19\n        }\n      }, \"200\"))), /*#__PURE__*/React.createElement(FormControl, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1536,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        inputVariant: \"standard\",\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1537,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KeyboardDatePicker, (_React$createElement = {\n        inputVariant: \"standard\",\n        label: \"Start Date\",\n        format: \"MM/dd/yyyy\",\n        margin: \"normal\",\n        className: \"\",\n        id: \"start-date-picker-dialog\",\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        InputProps: {\n          autoComplete: \"off\"\n        },\n        name: \"estDate\",\n        animateYearScrolling: true,\n        value: this.state.startDate,\n        minDate: this.state.minSDate,\n        maxDate: this.state.maxSDate,\n        minDateMessage: enMsg.startMinDate,\n        maxDateMessage: enMsg.startMaxDate,\n        onChange: this.handleStartDate,\n        onError: this.handleStartDateError\n      }, _defineProperty(_React$createElement, \"className\", \"KeyboardDatePicker invoice_picker\"), _defineProperty(_React$createElement, \"invalidDateMessage\", enMsg.invalidDate), _defineProperty(_React$createElement, \"KeyboardButtonProps\", {\n        \"aria-label\": \"change date\",\n        className: \"date-picker-span\"\n      }), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 19\n      }), _React$createElement))), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.startDateValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"startDate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1569,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1577,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1578,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(HighchartsReact, {\n        highcharts: Highcharts,\n        options: highChartOption,\n        className: \"chart-css\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        containerProps: {\n          style: {\n            height: \"500px\"\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1579,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1587,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(HighchartsReact, {\n        highcharts: Highcharts,\n        options: tempHighChart,\n        className: \"chart-css\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        containerProps: {\n          style: {\n            height: \"500px\"\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1588,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"box-with-bg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1598,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"heading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1599,\n          columnNumber: 11\n        }\n      }, \"Heading\"), /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1600,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashTimePanel dashTimePanel2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1601,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1602,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Records\",\n        select: true,\n        InputLabelProps: {\n          className: \"required-label\"\n        },\n        name: \"allItems\",\n        autoComplete: \"off\" // value={this.state.allItems}\n        ,\n        \"data-validators\": \"isRequired,isAlpha\" // onChange={this.handleUserInput}\n        ,\n        variant: \"filled\",\n        size: \"small\",\n        margin: \"dense\",\n        SelectProps: {\n          multiple: false,\n          value: this.state.allItems,\n          onChange: this.handleUserInputAll\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1603,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"2000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1621,\n          columnNumber: 19\n        }\n      }, \"All Record\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 19\n        }\n      }, \"100\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"200\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1631,\n          columnNumber: 19\n        }\n      }, \"200\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1636,\n          columnNumber: 19\n        }\n      }, \"500\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"1000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1641,\n          columnNumber: 19\n        }\n      }, \"1000\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"10000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646,\n          columnNumber: 19\n        }\n      }, \"10000\"))))), /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1655,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1656,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(HighchartsReact, {\n        highcharts: Highcharts,\n        options: allDataHighChart,\n        className: \"chart-css\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        containerProps: {\n          style: {\n            height: \"500px\"\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1657,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"googlemap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1668,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GridContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1669,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1670,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '30vh',\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1671,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return DashboardClass;\n}(React.Component);\n\nDashboardClass.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nvar Dashboard = connect(mapStateToProps, mapDispatchToProps)(DashboardClass); // export default Form;\n\nexport default withStyles(dashboardStyle)(Dashboard);","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/views/Dashboard/Dashboard.jsx"],"names":["React","PropTypes","withStyles","Icon","GridItem","GridContainer","Card","CardHeader","CardIcon","CardFooter","advert","assetsIcon","vendor","featured","clock","enMsg","AddAlert","MuiPickersUtilsProvider","KeyboardDatePicker","FormErrors","DateFnsUtils","generalAuthTokenHeader","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Menu","MenuItem","Paper","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Link","MaterialLink","CircularProgress","FormGroup","FormControl","InputLabel","Select","Input","Snackbar","LinearProgress","TextField","CardBody","dashboardStyle","userService","SELECTED_CAMPAIGN","connect","moment","ANALYTICS_CSV_DATA","ANALYTICS_CSV_ADVERTISEMENT_DATA","PER_PAGE_OPTIONS","RECORD_PER_PAGE","am4core","am4charts","am4themes_animated","Highcharts","HighchartsReact","HighchartsMore","dataModule","last","logoIcon","useTheme","columns","id","label","ref","createRef","options","orientation","unit","format","mapDispatchToProps","dispatch","mapStateToProps","state","userInfo","timestamp","campaings","reduxLoadFlag","MapMarker","text","color","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","transform","width","DashboardClass","props","handleUserInput","e","name","target","value","setState","getTodayData","handleUserInputAll","getAllData","handleStartDate","startDate","dateUtility","isValid","selectedDate","startDateValid","_isMounted","alertNotificationValue","page","loading","rowsPerPage","timeStampVal","Date","toLocaleTimeString","lastUsers","currPolution","lastPollutionTime","totalRecords","pollutionData","pollutionChartOption","highChartOption","tempHighChart","allDataHighChart","center","lat","lng","zoom","todayItems","allItems","latestData","todayData","allData","pollGraphType","todayDate","endDate","minSDate","minEDate","maxSDate","maxEDate","formErrors","endDateValid","isAlertSubs","isMailSubs","alertTvoc","alertCo2","alertEmail","showAlert","showMail","syncTime","handleGraphData","bind","handlePollutionGraphData","newHighPollChart","getLastData","handleStartDateError","backgroundDataApi","backgroundM","sendMail","dateValue","dateFormat","monthNames","today","dd","getDate","mm","getMonth","mName","yyyy","getFullYear","hh","getHours","min","getMinutes","sec","getSeconds","chart","dispose","clearInterval","interval","setInterval","dataObj","emailAddr","mailBody","data","message","email","pollution","tvoc","co2","temperature","humidity","pressure","apiUrl","fetch","method","headers","body","JSON","stringify","then","response","status","ok","json","console","log","error","fetchGlobalApisWithoutAuth","lastdata","mailNotificationObj","max_co2","co2MaxVal","maxPollLevel","max_tvoc","minPollLevel","min_co2","min_tvoc","pollLevel","pollColor","showNotification","title","type","max_temperature","maxTempLevel","min_temperature","minTempLevel","tempLevel","latestDataTime","getToday","dateVal","pollutionDataArr","chartLabels","colorsLabels","pollutionLabels","dayWiseData","length","map","pData","key","day","todayVal","dayData","push","dData","tempData","tempPollData","y","dayTemp","colorCode","formatedDailyData","dailyData","backgroundColor","style","subtitle","xAxis","categories","labels","formatter","pos","yAxis","overflow","tooltip","useHTML","tempValue","point","colorValue","yValue","nameValue","series","keyValue","colors","plotOptions","columnrange","dataLabels","enabled","colorByPoint","animation","column","line","enableMouseTracking","spline","marker","radius","lineColor","lineWidth","legend","itemStyle","credits","pollValue","graphUnitType","unitValue","allDataObj","filter","pollData","cKey","tmpData","co2Data","tVOCData","humidityData","pressureData","temperatureData","accessibility","rangeDescription","x","connectorAllowed","layout","align","verticalAlign","responsive","rules","condition","maxWidth","chartOptions","create","XYChart","paddingRight","date","dateAxis","xAxes","DateAxis","renderer","grid","template","location","valueAxis","yAxes","ValueAxis","disabled","minWidth","LineSeries","dataFields","dateX","valueY","tooltipText","cursor","XYCursor","behavior","seriesContainer","draggable","resizable","pollutionDataLine","categoryAxis","CategoryAxis","category","ColumnSeries","categoryX","measureDate","fill","series2","stroke","strokeWidth","oldProps","undefined","campaingsList","classes","test","test1","test2","test3","test4","clock_cover","styletest","styletest1","styletest2","boxShadow","styletest3","styletest4","clock_style","height","position","top","marginRight","flatIcon","cardCategory","cardTitle","stats","sunnycon","className","multiple","onChange","autoComplete","startMinDate","startMaxDate","invalidDate","Component","propTypes","object","isRequired","Dashboard"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Icon from \"@material-ui/core/Icon\";\n\n// core components\nimport GridItem from \"components/Grid/GridItem.jsx\";\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport Card from \"components/Card/Card.jsx\";\nimport CardHeader from \"components/Card/CardHeader.jsx\";\nimport CardIcon from \"components/Card/CardIcon.jsx\";\nimport CardFooter from \"components/Card/CardFooter.jsx\";\nimport advert from \"assets/img/advert.png\";\nimport assetsIcon from \"assets/img/assets.png\";\nimport vendor from \"assets/img/vendor.png\";\nimport featured from \"assets/img/featured.png\";\nimport clock from \"assets/img/clock.png\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport AddAlert from \"@material-ui/icons/AddAlert\";\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\"\nimport { FormErrors } from \"components/Login/FormErrors\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport { generalAuthTokenHeader } from \"__helpers/auth-header\";\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  // styles,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Link as MaterialLink,\n  CircularProgress,\n  FormGroup,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Snackbar,\n  LinearProgress,\n  TextField,\n} from \"@material-ui/core\";\nimport CardBody from \"components/Card/CardBody.jsx\";\nimport dashboardStyle from \"assets/jss/material-dashboard-react/views/dashboardStyle.jsx\";\nimport { userService } from \"_services/user.service\";\nimport {\n} from \"__helpers/constants\";\nimport { SELECTED_CAMPAIGN } from \"__helpers/constants\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport {\n  ANALYTICS_CSV_DATA, ANALYTICS_CSV_ADVERTISEMENT_DATA,\n  PER_PAGE_OPTIONS,\n  RECORD_PER_PAGE,\n} from \"__helpers/constants\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n// then all Highcharts modules you will need\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport dataModule from 'highcharts/modules/data';\nimport { last } from \"@amcharts/amcharts4/.internal/core/utils/Array\";\nimport flatIcon from \"assets/img/flat.svg\"\nimport sunnycon from \"assets/img/sunny.svg\"\nimport logoIcon from \"assets/img/sLogo.png\"\n\n\nam4core.useTheme(am4themes_animated);\nHighchartsMore(Highcharts);\ndataModule(Highcharts);\n// Create chart instance\n\nconst columns = [\n  { id: \"pollutionLevel\", label: \"Pollution Level\" },\n  { id: \"co2\", label: \"CO2 Value\" },\n  { id: \"tVoc\", label: \"tVoc Value\" },\n  { id: \"timestamp\", label: \"Measurement Time\" },\n  { id: \"dateCreated\", label: \"Creation Date\" },\n];\nconst ref = React.createRef();\nconst options = {\n  orientation: 'landscape',\n  unit: 'in',\n  format: [4, 2]\n};\nfunction mapDispatchToProps(dispatch) {\n  return {\n    // addArticle: article => dispatch(addArticle(article))\n  };\n}\nconst mapStateToProps = state => {\n  // console.log(\"StateVal \"+JSON.stringify(state));\n  return {\n    userInfo: state.userInfo,\n    timestamp: state.timestamp,\n    campaings: state.campaings,\n    reduxLoadFlag: state.reduxLoadFlag,\n  };\n};\nconst MapMarker = ({ text }) =>\n  <div style={{\n    color: 'white',\n    background: 'none 0% 0% repeat scroll rgb(255 255 255)',\n    padding: '8x 5px',\n    display: 'inline-flex',\n    textAlign: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '100%',\n    transform: 'translate(-50%, -50%)'\n  }}>\n    <img\n      style={{ width: \"30px\" }}\n      src={logoIcon}\n    />\n    {/* {text} */}\n  </div>;\nclass DashboardClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dateUtility = new DateFnsUtils();\n    this._isMounted = false;\n    let alertNotificationValue = true;\n    this.state = {\n      value: 0,\n      page: 0,\n      loading: false,\n      rowsPerPage: RECORD_PER_PAGE,\n      timeStampVal: new Date().toLocaleTimeString(),\n      lastUsers: \"30 mins ago\",\n      currPolution: \"Normal\",\n      lastPollutionTime: \"Just Now\",\n      totalRecords: \"3000\",\n      pollutionData: this.props.campaings ? this.props.campaings : [],\n      reduxLoadFlag: false,\n      pollutionChartOption: {},\n      highChartOption: {},\n      tempHighChart: {},\n      allDataHighChart: {},\n      center: { lat: 26.261530, lng: 72.965993 },\n      zoom: 16,\n      selectedDate: new Date(),\n      todayItems: 20,\n      allItems: 200,\n      latestData: {},\n      todayData: [],\n      allData: [],\n      pollGraphType: \"co2\",\n      todayDate: new Date(),\n      endDate: null,\n      minSDate: new Date(\"10/18/2020\"),\n      minEDate: new Date(),\n      maxSDate: new Date(),\n      maxEDate: new Date(),\n      formErrors: {\n        startDate: \"\",\n        endDate: \"\",\n      },\n      startDateValid: false,\n      endDateValid: false,\n      isAlertSubs: alertNotificationValue ? true : false,\n      isMailSubs: false,\n      alertTvoc: \"50\",\n      alertCo2: \"400\",\n      alertEmail: \"\",\n      showAlert: 1,\n      showMail: 1,\n      syncTime:  15000,\n      // syncTime: 10000,\n    };\n    this.handleGraphData = this.handleGraphData.bind(this)\n    this.handlePollutionGraphData = this.handlePollutionGraphData.bind(this)\n    this.newHighPollChart = this.newHighPollChart.bind(this)\n    this.tempHighChart = this.tempHighChart.bind(this)\n    this.allDataHighChart = this.allDataHighChart.bind(this)\n\n    this.getLastData = this.getLastData.bind(this)\n    this.getTodayData = this.getTodayData.bind(this)\n    this.getAllData = this.getAllData.bind(this)\n\n    this.handleStartDate = this.handleStartDate.bind(this);\n    this.handleStartDateError = this.handleStartDateError.bind(this);\n    this.backgroundDataApi = this.backgroundDataApi.bind(this);\n    this.backgroundM = this.backgroundM.bind(this);\n    this.sendMail = this.sendMail.bind(this);\n  }\n\n  getToday(dateValue, dateFormat) {\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    let today = new Date(dateValue);\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1;\n    let mName = monthNames[today.getMonth()];\n    const yyyy = today.getFullYear();\n    const hh = today.getHours();\n    const min = today.getMinutes();\n    const sec = today.getSeconds();\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    if (dateFormat) {\n      if (dateFormat == \"date\") {\n        return `${dd}-${mm}-${yyyy}`;\n      } else {\n        return `${hh}:${min}:${sec}`;\n      }\n    }\n    return `${dd} ${mName} ${hh}:${min}:${sec}`;\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  async componentDidMount() {\n\n    this.getLastData();\n    this.getTodayData();\n    this.getAllData();\n\n    // this.handleGraphData();\n    // this.handlePollutionGraphData();\n    // this.newHighPollChart();\n    // this.tempHighChart();\n    clearInterval(this.interval);\n    this.backgroundM();\n  }\n  async backgroundM() {\n    this.interval = setInterval(\n      () => this.backgroundDataApi(), this.state.syncTime\n    );\n  }\n\n  backgroundDataApi() {\n    this.getLastData();\n    this.getTodayData();\n    // this.setState({\n    //   showAlert: true,\n    // })\n    // this.getAllData();\n  }\n  async sendMail(dataObj, emailAddr) {\n    let mailBody = `\n    Dear,\n\n    We have measured danger level air quality. please take appropriate action.\n    <br>Poor air quality exposure may lead to headaches, sleepiness and stagnant, stale, stuffy air. Poor concentration, loss of attention, increased heart rate and slight nausea may also be present.\n    <br>Please take care. Stay safe, Stay Healthy!\n    <br>Thank You\n    <br>\n    Regards\n    <br>\n    Techno Wonders Team.\n  `;\n    const data = {\n      message: mailBody,\n      email: emailAddr,\n      \"tvoc\": dataObj.pollution ? dataObj.pollution.tvoc : \"N/A\",\n      \"co2\": dataObj.pollution ? dataObj.pollution.co2 : \"N/A\",\n      \"temperature\": dataObj.pollution ? dataObj.pollution.temperature : \"N/A\",\n      \"humidity\": dataObj.pollution ? dataObj.pollution.humidity : \"N/A\",\n      \"pressure\": dataObj.pollution ? dataObj.pollution.pressure : \"N/A\"\n    };\n    let apiUrl = \"http://35.193.238.179:9090/api/pollution/send-mail\";\n    try {\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        headers: generalAuthTokenHeader(),\n        body: JSON.stringify(data),\n      })\n        .then(response => {\n          if (response.status === 400) {\n\n          } else if (response.status === 401) {\n\n          } else if (response.ok) {\n          } else {\n\n          }\n          return response.json();\n          // return response.text();\n        })\n        .then(data => {\n          console.log(data)\n          return true;\n        })\n        .catch(error => {\n\n          return response;\n        });\n\n    } catch (error) {\n\n    }\n  }\n  async getLastData() {\n    let apiUrl = \"http://35.193.238.179:9090/api/pollution/top-data\";\n    let lastdata = await userService.fetchGlobalApisWithoutAuth(apiUrl);\n    let alertNotificationValue = false;\n    let mailNotificationObj = {};\n\n    let isAlertSubs = alertNotificationValue ? true : false;\n    let isMailSubs = mailNotificationObj && mailNotificationObj.email ? true : false;\n\n    if (lastdata && lastdata.max_co2) {\n      let co2MaxVal = 0;\n      lastdata.maxPollLevel = \"Good\"\n      if ((lastdata.max_co2 > 250 && lastdata.max_co2 <= 400) || (lastdata.max_tvoc <= 5)) {\n        co2MaxVal = 0;\n        lastdata.maxPollLevel = \"Good\"\n      } else if ((lastdata.max_co2 > 400 && lastdata.max_co2 <= 1000) || (lastdata.max_tvoc > 5 && lastdata.max_tvoc <= 50)) {\n        co2MaxVal = 1;\n        lastdata.maxPollLevel = \"Normal\"\n      } else if ((lastdata.max_co2 > 1000 && lastdata.max_co2 <= 2000) || (lastdata.max_tvoc > 50 && lastdata.max_tvoc <= 325)) {\n        co2MaxVal = 2;\n        lastdata.maxPollLevel = \"Poor Air\"\n      } else if ((lastdata.max_co2 > 2000 && lastdata.max_co2 <= 5000) || (lastdata.max_tvoc > 325 && lastdata.max_tvoc <= 500)) {\n        co2MaxVal = 3;\n        lastdata.maxPollLevel = \"Air Quality Alert\"\n      } else if ((lastdata.max_co2 > 5000) || (lastdata.max_tvoc > 325 && lastdata.max_tvoc <= 500)) {\n        co2MaxVal = 4;\n        lastdata.maxPollLevel = \"Danger Level\"\n      }\n\n      // let co2MaxVal = 0;\n      lastdata.minPollLevel = \"Good\"\n      if ((lastdata.min_co2 > 250 && lastdata.min_co2 <= 400) || (lastdata.min_tvoc <= 5)) {\n        co2MaxVal = 0;\n        lastdata.minPollLevel = \"Good\"\n      } else if ((lastdata.min_co2 > 400 && lastdata.min_co2 <= 1000) || (lastdata.min_tvoc > 5 && lastdata.min_tvoc <= 50)) {\n        co2MaxVal = 1;\n        lastdata.minPollLevel = \"Normal\"\n      } else if ((lastdata.min_co2 > 1000 && lastdata.min_co2 <= 2000) || (lastdata.min_tvoc > 50 && lastdata.min_tvoc <= 325)) {\n        co2MaxVal = 2;\n        lastdata.minPollLevel = \"Poor Air\"\n      } else if ((lastdata.min_co2 > 2000 && lastdata.min_co2 <= 5000) || (lastdata.min_tvoc > 325 && lastdata.min_tvoc <= 500)) {\n        co2MaxVal = 3;\n        lastdata.minPollLevel = \"Air Quality Alert\"\n      } else if ((lastdata.min_co2 > 5000) || (lastdata.min_tvoc > 325 && lastdata.min_tvoc <= 500)) {\n        co2MaxVal = 4;\n        lastdata.minPollLevel = \"Danger Level\"\n      }\n\n      // let co2MaxVal = 0;\n      lastdata.pollLevel = \"Good\"\n      lastdata.pollColor = \"light_green_color\"\n      let showNotification = {};\n      if ((lastdata.pollution.co2 > 250 && lastdata.pollution.co2 <= 400) || (lastdata.pollution.co2 <= 5)) {\n        co2MaxVal = 0;\n        lastdata.pollLevel = \"Good\"\n        lastdata.pollColor = \"light_green_color\"\n        showNotification = {\n          title: \"Air Quality Alert\",\n          message: \"We have measured good air quality\",\n          type: \"success\"\n        };\n      } else if ((lastdata.pollution.co2 > 400 && lastdata.pollution.co2 <= 1000) || (lastdata.pollution.co2 > 5 && lastdata.pollution.co2 <= 50)) {\n        co2MaxVal = 1;\n        lastdata.pollLevel = \"Normal\"\n        lastdata.pollColor = \"orange_color\"\n        showNotification = {\n          title: \"Air Quality Alert\",\n          message: \"We have measured normal air quality\",\n          type: \"success\"\n        };\n      } else if ((lastdata.pollution.co2 > 1000 && lastdata.pollution.co2 <= 2000) || (lastdata.pollution.co2 > 50 && lastdata.pollution.co2 <= 325)) {\n        co2MaxVal = 2;\n        lastdata.pollLevel = \"Poor Air\"\n        lastdata.pollColor = \"light_orange_color\"\n        showNotification = {\n          title: \"Air Quality Alert\",\n          message: \"We have measured medium level poor air quality\",\n          type: \"warning\"\n        };\n      } else if ((lastdata.pollution.co2 > 2000 && lastdata.pollution.co2 <= 5000) || (lastdata.pollution.co2 > 325 && lastdata.pollution.co2 <= 500)) {\n        co2MaxVal = 3;\n        lastdata.pollLevel = \"Air Quality Alert\"\n        lastdata.pollColor = \"light_red_color\"\n        showNotification = {\n          title: \"Air Quality Alert\",\n          message: \"We have measured poor air quality\",\n          type: \"danger\"\n        };\n      } else if ((lastdata.pollution.co2 > 5000) || (lastdata.pollution.co2 > 325 && lastdata.pollution.co2 <= 500)) {\n        co2MaxVal = 4;\n        lastdata.pollLevel = \"Danger Level\"\n        lastdata.pollColor = \"red_color\"\n        showNotification = {\n          title: \"Air Quality Alert\",\n          message: \"We have measured danger level air quality\",\n          type: \"danger\"\n        };\n      }\n\n      if (isAlertSubs && this.state.showAlert) {\n        if (this.state.showAlert == 4) {\n          // showNotification = {\n          //   title: \"Air Quality Alert\",\n          //   message: \"We have measured danger level air quality\",\n          //   type: \"danger\"\n          // };\n          let alertTvoc = mailNotificationObj && mailNotificationObj.tvoc ? mailNotificationObj.tvoc : \"50\";\n          let alertCo2 = mailNotificationObj && mailNotificationObj.co2 ? mailNotificationObj.co2 : \"400\";\n          let alertEmail = mailNotificationObj && mailNotificationObj.email ? mailNotificationObj.email : \"\";\n          if (alertTvoc <= lastdata.pollution.tvoc || alertCo2 <= lastdata.pollution.co2) {\n            userService.showNotification(showNotification)\n            this.setState({\n              showAlert: 1,\n            })\n          }\n        } else {\n          let showAlert = this.state.showAlert\n          this.setState({\n            showAlert: showAlert + 1,\n          })\n        }\n      }\n      if (isMailSubs && this.state.showMail) {\n        if (this.state.showMail == 4) {\n\n          let alertTvoc = mailNotificationObj && mailNotificationObj.tvoc ? mailNotificationObj.tvoc : \"50\";\n          let alertCo2 = mailNotificationObj && mailNotificationObj.co2 ? mailNotificationObj.co2 : \"400\";\n          let alertEmail = mailNotificationObj && mailNotificationObj.email ? mailNotificationObj.email : \"\";\n          if (alertTvoc <= lastdata.pollution.tvoc || alertCo2 <= lastdata.pollution.co2) {\n            this.setState({\n              showMail: 1,\n            })\n            this.sendMail(lastdata, alertEmail);\n          }\n        } else {\n          let showMail = this.state.showMail\n          this.setState({\n            showMail: showMail + 1,\n          })\n        }\n      }\n\n      if (lastdata.max_temperature <= 0) {\n        lastdata.maxTempLevel = \"Cold\"\n      } else if (lastdata.max_temperature > 0 && lastdata.max_temperature < 10) {\n        lastdata.maxTempLevel = \"Cold\"\n      } else if (lastdata.max_temperature > 10 && lastdata.max_temperature < 20) {\n        lastdata.maxTempLevel = \"Cool\"\n      } else if (lastdata.max_temperature > 20 && lastdata.max_temperature < 30) {\n        lastdata.maxTempLevel = \"Warm\"\n      } else if (lastdata.max_temperature > 30 && lastdata.max_temperature < 40) {\n        lastdata.maxTempLevel = \"Hot\"\n      } else {\n        lastdata.maxTempLevel = \"Hot & Sunny\"\n      }\n\n      if (lastdata.min_temperature <= 0) {\n        lastdata.minTempLevel = \"Cold\"\n      } else if (lastdata.min_temperature > 0 && lastdata.min_temperature < 10) {\n        lastdata.minTempLevel = \"Cold\"\n      } else if (lastdata.min_temperature > 10 && lastdata.min_temperature < 20) {\n        lastdata.minTempLevel = \"Cool\"\n      } else if (lastdata.min_temperature > 20 && lastdata.min_temperature < 30) {\n        lastdata.minTempLevel = \"Warm\"\n      } else if (lastdata.min_temperature > 30 && lastdata.min_temperature < 45) {\n        lastdata.minTempLevel = \"Hot\"\n      } else {\n        lastdata.minTempLevel = \"Hot & Sunny\"\n      }\n\n      if (lastdata.pollution.temperature <= 0) {\n        lastdata.tempLevel = \"Cold\"\n      } else if (lastdata.pollution.temperature > 0 && lastdata.pollution.temperature < 10) {\n        lastdata.tempLevel = \"Cold\"\n      } else if (lastdata.pollution.temperature > 10 && lastdata.pollution.temperature < 20) {\n        lastdata.tempLevel = \"Cool\"\n      } else if (lastdata.pollution.temperature > 20 && lastdata.pollution.temperature < 30) {\n        lastdata.tempLevel = \"Warm\"\n      } else if (lastdata.pollution.temperature > 30 && lastdata.pollution.temperature < 40) {\n        lastdata.tempLevel = \"Hot\"\n      } else {\n        lastdata.tempLevel = \"Hot & Sunny\"\n      }\n\n      let latestDataTime = this.getToday(new Date(lastdata.pollution.timestamp));\n      lastdata.latestDataTime = latestDataTime;\n    }\n    this.setState({\n      latestData: lastdata\n    })\n    // console.log(lastdata)\n  }\n\n  async getTodayData() {\n    let todayDate = new Date();\n    let dateVal = this.getToday(this.state.selectedDate, \"date\");\n\n    let apiUrl = \"http://35.193.238.179:9090/api/pollution/data?from_date=\" + dateVal + \"&to_date=\" + dateVal + \"&page=0&size=\" + this.state.todayItems + \"&sort=created,desc\";\n    let todayData = await userService.fetchGlobalApisWithoutAuth(apiUrl);\n    this.setState({\n      todayData: todayData\n    }, () => {\n      this.newHighPollChart(); this.tempHighChart()\n    })\n    console.log(todayData)\n  }\n  tempHighChart() {\n    let pollutionDataArr = [];\n    let chartLabels = [];\n    let colorsLabels = [];\n    let pollutionLabels = [];\n    let dayWiseData = [];\n    if (this.state.todayData && this.state.todayData.length) {\n      this.state.todayData.map((pData, key) => {\n        var day = new Date(pData.timestamp).getDate();\n\n        let todayVal = this.getToday(new Date(pData.timestamp), \"time\");\n\n        if (dayWiseData && dayWiseData[day]) {\n          // console.log(\"main if\", key)\n          let dayData = dayWiseData[day];\n          dayData['data'].push(pData.co2)\n          dayWiseData.map((dData, key) => {\n\n          })\n        } else {\n          // console.log(\"main else\", key)\n          let tempData = []\n          tempData.data = [pData.co2]\n          tempData.day = day\n          tempData.timestamp = pData.timestamp\n          tempData.name = pData.timestamp\n          dayWiseData[day] = tempData\n        }\n\n        let tempPollData = {}\n        tempPollData.y = pData.temperature\n        tempPollData.pollution = pData.pollution\n        tempPollData.dayTemp = \"Normal\"\n        tempPollData.timestamp = new Date(pData.timestamp)\n\n        if (pData.temperature <= 0) {\n          tempPollData.dayTemp = \"Cold\"\n        } else if (pData.temperature > 0 && pData.temperature < 10) {\n          tempPollData.dayTemp = \"Cold\"\n        } else if (pData.temperature > 10 && pData.temperature < 20) {\n          tempPollData.dayTemp = \"Cool\"\n        } else if (pData.temperature > 20 && pData.temperature < 30) {\n          tempPollData.dayTemp = \"Warm\"\n        } else if (pData.temperature > 30 && pData.temperature < 40) {\n          tempPollData.dayTemp = \"Hot\"\n        } else {\n          tempPollData.dayTemp = \"Hot & Sunny\"\n        }\n\n        let colorCode = \"27b35a\"\n        if (pData.temperature <= 0) {\n          colorCode = \"#27b35a\"\n        } else if (pData.temperature > 0 && pData.temperature <= 10) {\n          colorCode = \"#27b35a\"\n        } else if (pData.temperature > 10 && pData.temperature <= 20) {\n          colorCode = \"#2cb327\"\n        } else if (pData.temperature > 20 && pData.temperature <= 30) {\n          colorCode = \"#9ab00a\"\n        } else if (pData.temperature > 30 && pData.temperature <= 40) {\n          colorCode = \"#b0120a\"\n        } else {\n          colorCode = \"#b0120a\"\n        }\n        tempPollData.color = colorCode;\n\n        // pollutionDataArr.push(pData.co2);\n        pollutionDataArr.push(tempPollData);\n        pollutionLabels.push(pData.pollution);\n        chartLabels.push(todayVal);\n\n        colorsLabels.push(colorCode);\n      })\n      // console.log(colorsLabels)\n    }\n\n    let formatedDailyData = []\n    dayWiseData.map(dailyData => {\n      // formatedDailyData.push(dailyData)\n      formatedDailyData = [...formatedDailyData, dailyData]\n    })\n\n    let tempHighChart = {\n      chart: {\n        type: 'spline',\n        backgroundColor: '#ffffff1c',\n        style: { color: '#fff' }\n        // inverted: true,\n        // zoom: \"xy\"\n      },\n      title: {\n        text: 'Temperature (°C) Graph',\n        style: { color: '#fff' }\n      },\n      subtitle: {\n        text: 'Day Wise Temperature Graph',\n        style: { color: '#fff' }\n      },\n      xAxis: {\n        title: {\n          text: 'Time',\n          style: { color: '#fff' },\n        },\n        type: 'category',\n        categories: chartLabels,\n        // categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        labels: {\n          formatter: function () {\n            return chartLabels[this.pos];\n          },\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Temperature (°C)',\n          style: { color: '#fff' },\n        },\n        type: 'logarithmic',\n        min: 1,\n        labels: {\n          overflow: 'justify',\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function () {\n          // console.log(this, this.point.low); // just to see , what data you can access\n          let tempValue = this.point.dayTemp;\n          let colorValue = this.point.color;\n          let yValue = this.point.y;\n          let nameValue = this.series.name;\n          let keyValue = this.point.timestamp;\n          // return '<b>' + this.x +\n          //   '</b>: <b>' + barValue + ' %</b>';\n          return '<span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' + nameValue + ': </td>' +\n            '<td style=\"padding:0\"><b>' + yValue + ' (°C)</b></td></tr><tr><td style=\"color:' + colorValue + ';padding:0\">' + tempValue + '</td></tr></table>'\n\n        }\n      },\n      // tooltip: {\n      //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n      //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n      //   footerFormat: '</table>',\n      //   shared: true,\n      //   useHTML: true\n      // },\n      // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n      colors: colorsLabels,\n      pollutionLabels: pollutionLabels,\n      plotOptions: {\n        columnrange: {\n          dataLabels: {\n            enabled: true,\n            format: '{y}°C'\n          },\n          colorByPoint: true\n        },\n        series: {\n          animation: false\n        },\n        column: {\n          colorByPoint: true\n        },\n        line: {\n          dataLabels: {\n            enabled: true,\n            format: '{y}°C'\n          },\n          enableMouseTracking: true\n        },\n        spline: {\n          marker: {\n            radius: 4,\n            lineColor: '#666666',\n            lineWidth: 1\n          }\n        }\n      },\n      legend: {\n        enabled: true,\n        itemStyle: {\n          color: 'fff'\n        }\n      },\n      credits: {\n        enabled: false\n      },\n      series: [{\n        name: 'Temperature',\n        data: pollutionDataArr,\n        style: { color: '#fff' },\n        color: '#fff'\n      }]\n    };\n    this.setState({\n      tempHighChart: tempHighChart,\n    })\n  }\n  newHighPollChart() {\n    let pollutionDataArr = [];\n    let chartLabels = [];\n    let colorsLabels = [];\n    let pollutionLabels = [];\n    let dayWiseData = [];\n    if (this.state.todayData && this.state.todayData.length) {\n      this.state.todayData.map((pData, key) => {\n        var day = new Date(pData.timestamp).getDate();\n        // if (key > 10) {\n        //   return\n        // }\n        let todayVal = this.getToday(new Date(pData.timestamp), \"time\");\n        if (dayWiseData && dayWiseData[day]) {\n          // console.log(\"main if\", key)\n          let dayData = dayWiseData[day];\n          dayData['data'].push(pData.co2)\n          dayWiseData.map((dData, key) => {\n\n          })\n        } else {\n          // console.log(\"main else\", key)\n          let tempData = []\n          tempData.data = [pData.co2]\n          tempData.day = day\n          tempData.timestamp = pData.timestamp\n          tempData.name = pData.timestamp\n          dayWiseData[day] = tempData\n        }\n\n        let tempPollData = {}\n        let colorCode = \"#27b35a\"\n        if (this.state.pollGraphType == \"co2\") {\n          tempPollData.y = pData.co2\n          tempPollData.timestamp = new Date(pData.timestamp)\n\n          // pollutionDataArr.push(pData.co2);\n          pollutionLabels.push(pData.pollution);\n          chartLabels.push(todayVal);\n          let pollValue = \"Good\";\n          if (pData.co2 > 250 && pData.co2 <= 400) {\n            colorCode = \"#27b35a\"\n            pollValue = \"Good\";\n          } else if (pData.co2 > 400 && pData.co2 <= 1000) {\n            colorCode = \"#27b329\"\n            pollValue = \"Normal\";\n          } else if (pData.co2 > 1000 && pData.co2 <= 2000) {\n            colorCode = \"#b08c0a\"\n            pollValue = \"Poor Air\";\n          } else if (pData.co2 > 2000 && pData.co2 <= 5000) {\n            colorCode = \"#b0120a\"\n            pollValue = \"Air Quality Alert\";\n          } else if (pData.co2 > 5000) {\n            colorCode = \"#b0120a\"\n            pollValue = \"Danger Level\";\n          }\n          tempPollData.pollution = pollValue\n          tempPollData.graphUnitType = \"ppm\"\n          pollutionDataArr.push(tempPollData);\n        } else {\n          tempPollData.y = pData.tvoc\n          // tempPollData.pollution = pData.pollution\n          tempPollData.timestamp = new Date(pData.timestamp)\n          let pollValue = \"Good\";\n          // pollutionDataArr.push(pData.co2);\n          // pollutionDataArr.push(tempPollData);\n          pollutionLabels.push(pData.pollution);\n          chartLabels.push(todayVal);\n          if (pData.tvoc <= 5) {\n            colorCode = \"#27b35a\"\n            pollValue = \"Good\";\n          } else if (pData.tvoc > 5 && pData.tvoc <= 50) {\n            colorCode = \"#27b35a\"\n            pollValue = \"Normal\";\n          } else if (pData.tvoc > 50 && pData.tvoc <= 325) {\n            colorCode = \"#2cb327\"\n            pollValue = \"Poor Air\";\n          } else if (pData.tvoc > 325 && pData.tvoc <= 500) {\n            colorCode = \"#9ab00a\"\n          } else {\n            colorCode = \"#b0120a\"\n            pollValue = \"Danger Level\";\n          }\n          tempPollData.pollution = pollValue\n          tempPollData.graphUnitType = \"ppb\"\n          pollutionDataArr.push(tempPollData);\n        }\n        colorsLabels.push(colorCode);\n      })\n      // console.log(colorsLabels)\n    }\n\n    let formatedDailyData = []\n    dayWiseData.map(dailyData => {\n      // formatedDailyData.push(dailyData)\n      formatedDailyData = [...formatedDailyData, dailyData]\n    })\n\n    let highChartOption = {\n      chart: {\n        type: 'column',\n        backgroundColor: '#ffffff1c',\n        style: { color: '#fff' }\n        // inverted: true,\n        // zoom: \"xy\"\n      },\n      title: {\n        text: 'Air Quality Graph',\n        style: { color: '#fff' }\n      },\n      subtitle: {\n        text: 'Day Wise Air Quality Graph',\n        style: { color: '#fff' }\n      },\n      xAxis: {\n        title: {\n          text: 'Time',\n          style: { color: '#fff' },\n        },\n        type: 'category',\n        categories: chartLabels,\n        labels: {\n          formatter: function () {\n            return chartLabels[this.pos]\n          },\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Units',\n          style: { color: '#fff' },\n        },\n        type: 'logarithmic',\n        min: 1,\n        labels: {\n          overflow: 'justify',\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function () {\n          // console.log(this, this.point.low); // just to see , what data you can access\n          let pollValue = this.point.pollution;\n          let colorValue = this.point.color;\n          let yValue = this.point.y;\n          let nameValue = this.series.name;\n          let keyValue = this.point.timestamp;\n          let unitValue = this.point.graphUnitType;\n          // return '<b>' + this.x +\n          //   '</b>: <b>' + barValue + ' %</b>';\n          return '<span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' +  \"Measurement\" + ': </td>' +\n            '<td style=\"padding:0\"><b>' + yValue + ' ' + unitValue + '</b></td></tr><tr><td style=\"color:' + colorValue + ';padding:0\">' + pollValue + '</td></tr></table>'\n\n        }\n      },\n      // tooltip: {\n      //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n      //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n      //   footerFormat: '</table>',\n      //   shared: true,\n      //   useHTML: true\n      // },\n      // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n      colors: colorsLabels,\n      pollutionLabels: pollutionLabels,\n      plotOptions: {\n        columnrange: {\n          dataLabels: {\n            // enabled: true,\n            //  format: '{y}°C'\n          },\n          colorByPoint: true\n        },\n        series: {\n          animation: false\n        },\n        column: {\n          colorByPoint: true\n        }\n      },\n      legend: {\n        enabled: true,\n        itemStyle: {\n          color: 'fff'\n        }\n      },\n      credits: {\n        enabled: false\n      },\n      series: [{\n        name: 'Pollution',\n        data: pollutionDataArr,\n      }]\n    };\n    this.setState({\n      highChartOption: highChartOption,\n    })\n  }\n  async getAllData() {\n    let apiUrl = \"http://35.193.238.179:9090/api/pollution/data?page=0&size=\" + this.state.allItems + \"&sort=created,desc\";\n    let allData = await userService.fetchGlobalApisWithoutAuth(apiUrl);\n    this.setState({\n      allData: allData\n    }, () => this.allDataHighChart())\n    console.log(allData)\n  }\n  allDataHighChart() {\n    let pollutionDataArr = [];\n    let chartLabels = [];\n    let colorsLabels = [];\n    let pollutionLabels = [];\n    let dayWiseData = [];\n    if (this.state.allData && this.state.allData.length) {\n      this.state.allData.map((pData, key) => {\n        var day = new Date(pData.timestamp).getDate();\n\n        let todayVal = this.getToday(new Date(pData.timestamp));\n\n        let allDataObj = [];\n\n        if (pollutionDataArr && pollutionDataArr.length) {\n          console.log(\"if all\")\n          pollutionDataArr = pollutionDataArr.filter(function (pollData, cKey) {\n            let tmpData = pollData\n            if (pollData.name == \"CO2 (ppm)\") {\n              let tmpData = pollData.data;\n              tmpData.push(pData.co2)\n              tmpData.data = tmpData;\n            }\n            if (pollData.name == \"tVOC (ppb)\") {\n              let tmpData = pollData.data;\n              tmpData.push(pData.tvoc)\n              tmpData.data = tmpData;\n            }\n            if (pollData.name == \"Humidity (g.kg-1)\") {\n              let tmpData = pollData.data;\n              tmpData.push(pData.humidity)\n              tmpData.data = tmpData;\n            }\n            if (pollData.name == \"Pressure (Pa)\") {\n              let tmpData = pollData.data;\n              tmpData.push(pData.pressure)\n              tmpData.data = tmpData;\n            }\n            if (pollData.name == \"Temperature (°C)\") {\n              let tmpData = pollData.data;\n              tmpData.push(pData.temperature)\n              tmpData.data = tmpData;\n            }\n            return tmpData\n          });\n        } else {\n          console.log(\"else all\")\n          let co2Data = {}\n          co2Data.data = [pData.co2]\n          co2Data.name = \"CO2 (ppm)\"\n          co2Data.color = '#0066FF'\n          co2Data.timestamp = new Date(pData.timestamp)\n\n          let tVOCData = {}\n          tVOCData.data = [pData.tvoc]\n          tVOCData.name = \"tVOC (ppb)\"\n          tVOCData.color = '#FF0000'\n          tVOCData.timestamp = new Date(pData.timestamp)\n\n          let humidityData = {}\n          humidityData.data = [pData.humidity]\n          humidityData.name = \"Humidity (g.kg-1)\"\n          humidityData.color = '#0a7eb0'\n          humidityData.timestamp = new Date(pData.timestamp)\n\n          let pressureData = {}\n          pressureData.data = [pData.pressure]\n          pressureData.name = \"Pressure (Pa)\"\n          pressureData.color = '#b00a60'\n          pressureData.timestamp = new Date(pData.timestamp)\n\n          let temperatureData = {}\n          temperatureData.data = [pData.temperature]\n          temperatureData.name = \"Temperature (°C)\"\n          temperatureData.color = '#a20ab0'\n          temperatureData.timestamp = new Date(pData.timestamp)\n\n          // #b0120a', '#ffab91', '#ED5534', '#433C39', '#545150',\n\n          pollutionDataArr.push(co2Data)\n          pollutionDataArr.push(tVOCData)\n          pollutionDataArr.push(humidityData)\n          pollutionDataArr.push(pressureData)\n          pollutionDataArr.push(temperatureData)\n        }\n\n        pollutionLabels.push(pData.pollution);\n        chartLabels.push(todayVal);\n      })\n      // console.log(colorsLabels)\n    }\n\n    console.log(pollutionDataArr)\n\n    let formatedDailyData = []\n    dayWiseData.map(dailyData => {\n      // formatedDailyData.push(dailyData)\n      formatedDailyData = [...formatedDailyData, dailyData]\n    })\n\n    let allDataHighChart = {\n      chart: {\n        // type: 'spline',\n        // inverted: true,\n        // zoom: \"xy\"\n        backgroundColor: '#ffffff1c',\n        style: { color: '#fff' }\n      },\n      title: {\n        text: 'Sequence Data',\n        style: { color: '#fff' }\n      },\n      subtitle: {\n        text: 'Day Wise Graph',\n        style: { color: '#fff' }\n      },\n      xAxis: {\n        accessibility: {\n          rangeDescription: 'Measurement'\n        },\n        type: 'category',\n        categories: chartLabels,\n        labels: {\n          overflow: 'justify',\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Units',\n          style: { color: '#fff' }\n        },\n        labels: {\n          overflow: 'justify',\n          style: {\n            color: '#fff',\n          }\n        }\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function () {\n          // console.log(this, this.point.low); // just to see , what data you can access\n          let pollValue = this.point.pollution;\n          let colorValue = this.point.color;\n          let yValue = this.point.y;\n          let nameValue = this.series.name;\n          let keyValue = this.x;\n          // return '<b>' + this.x +\n          //   '</b>: <b>' + barValue + ' %</b>';\n          return '<span style=\"color:' + colorValue + ';padding:0;font-size:10px\">Measurement</span><br><span style=\"font-size:10px\">' + keyValue + '</span><table><tr><td style=\"padding:0\">' + nameValue + ': </td>' +\n            '<td style=\"padding:0\"><b>' + yValue + '</b></td></tr></table>'\n\n        }\n      },\n      // tooltip: {\n      //   headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n      //   pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      //     '<td style=\"padding:0\"><b>{point.y:.1f} unit</b></td><td>{series.pollutionLabels}</td></tr>',\n      //   footerFormat: '</table>',\n      //   shared: true,\n      //   useHTML: true\n      // },\n      // colors: ['#b0120a', '#ffab91', '#ED5534', '#433C39', '#545150', '#B09187', '#B087A0'],\n      colors: colorsLabels,\n      pollutionLabels: pollutionLabels,\n      plotOptions: {\n        series: {\n          label: {\n            connectorAllowed: false\n          },\n        },\n        columnrange: {\n          colorByPoint: true\n        },\n      },\n      legend: {\n        layout: 'vertical',\n        align: 'right',\n        verticalAlign: 'middle',\n        itemStyle: {\n          color: 'fff'\n        }\n      },\n      column: {\n        colorByPoint: true\n      },\n      credits: {\n        enabled: false\n      },\n      // series: [{\n      //   name: 'Measurement',\n      //   data: pollutionDataArr,\n      // }],\n      series: pollutionDataArr,\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          },\n          chartOptions: {\n            legend: {\n              layout: 'horizontal',\n              align: 'center',\n              verticalAlign: 'bottom'\n            }\n          }\n        }]\n      }\n    };\n    this.setState({\n      allDataHighChart: allDataHighChart,\n    })\n  }\n\n  fetchData() {\n  }\n\n  handleGraphData() {\n    let pollutionData = am4core.create(\"pollutionData\", am4charts.XYChart);\n    // chart.paddingRight = 20;\n    pollutionData.paddingRight = this.props.paddingRight;\n\n    let data = [];\n    if (this.state.pollutionData && this.state.pollutionData.length) {\n      this.state.pollutionData.map((pData, key) => {\n        data.push({ date: new Date(pData.timestamp), name: \"Pollution\", value: pData.co2 });\n      })\n\n      // let visits = 10;\n      // for (let i = 1; i < 366; i++) {\n      //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n      // }\n    }\n\n    pollutionData.data = data;\n\n    let dateAxis = pollutionData.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = pollutionData.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = pollutionData.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    pollutionData.cursor = new am4charts.XYCursor();\n    pollutionData.cursor.behavior = \"none\";\n    pollutionData.seriesContainer.draggable = false;\n    pollutionData.seriesContainer.resizable = false;\n\n    pollutionData.seriesContainer.draggable = false;\n    pollutionData.seriesContainer.resizable = false;\n\n    // let scrollbarX = new am4charts.XYChartScrollbar();\n    // scrollbarX.series.push(series);\n    // pollutionData.scrollbarX = scrollbarX;\n    // scrollbarX.interactionsEnabled = false;\n    this.pollutionData = pollutionData;\n\n  }\n  handlePollutionGraphData() {\n    // Create chart instance\n    let pollutionDataLine = am4core.create(\"pollutionDataLine\", am4charts.XYChart);\n    pollutionDataLine.paddingRight = this.props.paddingRight;\n\n    let pollutionDataArr = [];\n    if (this.state.pollutionData && this.state.pollutionData.length) {\n      this.state.pollutionData.map((pData, key) => {\n        var day = new Date(pData.timestamp).getDate();\n        pollutionDataArr.push({\n          // date: \"\" + new Date(pData.timestamp),\n          // name: \"Pollution\",\n          // units: pData.co2,\n\n          \"country\": \"Day: \" + (day),\n          \"litres\": pData.co2,\n          \"units\": pData.tvoc,\n          \"pollValue\": pData.pollution,\n          \"measureDate\": pData.timestamp,\n        });\n      })\n\n      // let visits = 10;\n      // for (let i = 1; i < 366; i++) {\n      //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n      // }\n    }\n\n    pollutionDataLine.data = pollutionDataArr;\n\n    // Create axes\n    let categoryAxis = pollutionDataLine.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = \"country\";\n    categoryAxis.title.text = \"Countries\";\n\n    let valueAxis = pollutionDataLine.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.title.text = \"Litres sold (M)\";\n\n    // Create series\n    var series = pollutionDataLine.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueY = \"litres\";\n    series.dataFields.categoryX = \"country\";\n    series.name = \"Sales\";\n    series.pollValue = \"pollValue\";\n    series.measureDate = \"measureDate\";\n    series.columns.template.tooltipText = \"Pollution Data\\nPollution: {pollValue}\\nDate: {measureDate}\";\n    series.columns.template.fill = am4core.color(\"#104547\");\n\n    var series2 = pollutionDataLine.series.push(new am4charts.LineSeries());\n    series2.name = \"Units\";\n    series2.stroke = am4core.color(\"#CDA2AB\");\n    series2.strokeWidth = 3;\n    series2.dataFields.valueY = \"units\";\n    series2.dataFields.categoryX = \"country\";\n\n    this.pollutionDataLine = pollutionDataLine\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.paddingRight !== this.props.paddingRight) {\n      this.chart.paddingRight = this.props.paddingRight;\n    }\n    // if (this.chart.paddingRight !== this.props.paddingRight) {\n    //   this.chart.paddingRight = this.props.paddingRight;\n    // }\n\n    console.log(\"outside\")\n    if (this.props.reduxLoadFlag != undefined && this.state.reduxLoadFlag != this.props.reduxLoadFlag) {\n      console.log(\"inside\", this.props)\n      let campaings = [];\n      let userInfo = {};\n      if (this.props.campaings) {\n        let campaingsList = this.props.campaings;\n        campaings = (campaingsList) ? campaingsList : [];\n        if (this.pollutionData) {\n          let data = [];\n          campaings.map((pData, key) => {\n            data.push({ date: new Date(pData.timestamp), name: \"Pollution\", value: pData.co2 });\n          })\n          this.pollutionData.data = data;\n          this.pollutionData.paddingRight = this.props.paddingRight;\n          // console.log(\"insout\", this.props, campaings)\n        }\n      }\n      this.setState({\n        pollutionData: campaings,\n        reduxLoadFlag: this.props.reduxLoadFlag,\n      })\n    }\n  }\n  handleUserInput = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    this.setState({ [name]: value }, () => this.getTodayData());\n  };\n  handleUserInputAll = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    this.setState({ [name]: value }, () => this.getAllData());\n  };\n  handleStartDate = value => {\n    let startDate = true;\n    if (value == null || !this.dateUtility.isValid(value)) {\n      startDate = false;\n    }\n    if (startDate) {\n      this.setState({\n        selectedDate: value,\n      }, () => this.getTodayData())\n\n    }\n    this.setState(\n      {\n        startDate: value,\n        startDateValid: startDate,\n      }\n    );\n  };\n  handleStartDateError(error, value) {\n    this.setState({\n      startDateValid: error || value == \"\" || value == null ? false : true\n    });\n  }\n  render() {\n    const { classes } = this.props;\n    const test = \"test-cover\";\n    const test1 = \"test-cover1\";\n    const test2 = \"test-cover2\";\n    const test3 = \"test-cover3\";\n    const test4 = \"test-cover4\";\n    const clock_cover = \"clock-cover\";\n    const styletest = { padding: \"23px\" };\n    const styletest1 = { padding: \"21px 24px\" };\n    const styletest2 = {\n      padding: \"20px 23px\",\n      background: \"linear-gradient(60deg, #1666ca, #3c86e1)\",\n      boxShadow:\n        \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(168, 198, 234,.4)\"\n    };\n    const styletest3 = {\n      padding: \"19px 25px\",\n      background: \"linear-gradient(60deg, #05b0c5, #20c2d6)\",\n      boxShadow:\n        \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(209, 240, 244,.4)\"\n    };\n    const styletest4 = {\n      background: \"linear-gradient(60deg, #932aad, #a742b9)\",\n      boxShadow:\n        \"0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(214, 176, 224,.4)\"\n    };\n    const clock_style = {\n      width: \"15px\",\n      height: \"15px\",\n      position: \"relative\",\n      top: \"3px\",\n      marginRight: \"3px\"\n    };\n\n    const {\n      currPolution,\n      lastPollutionTime,\n      totalRecords,\n      pollutionData,\n      highChartOption,\n      tempHighChart,\n      allDataHighChart,\n      latestData,\n    } = this.state;\n    return (\n      <div>\n        {/* <NotificationContainer/> */}\n        <GridContainer>\n          <GridItem xs={12} sm={6}>\n            <Card className={`dash-tiles box ${latestData && latestData.pollColor ? latestData.pollColor : \"light_green_color\"}`}>\n              <CardHeader color=\"success\" stats icon>\n                <CardIcon color=\"success\" className={\"box-image-cover new-cover\"} style={styletest}>\n                  <img className=\"card_img\" src={flatIcon} alt=\"logo\" />\n                </CardIcon>\n                <p className={classes.cardCategory + \" white-text current-air\"}>Current Air Quality</p>\n                <h3 className={classes.cardTitle + \" white-text air-quality\"}>{latestData && latestData.pollLevel ? latestData.pollLevel : \"Normal\"}</h3>\n                <span className=\"full-width d-flex\">\n                  {/* <span className=\"pollution-value\"><p>Max Air Quality:</p> {latestData && latestData.maxPollLevel ? latestData.maxPollLevel : \"Normal\"}</span> */}\n                  <span className=\"tempratures\"><p>Max Air Quality</p> {latestData && latestData.maxPollLevel ? latestData.maxPollLevel : \"Normal\"}</span>\n                  <span className=\"tempratures\"><p>Min Air Quality</p> {latestData && latestData.minPollLevel ? latestData.minPollLevel : \"Normal\"}</span>\n                </span>\n                <span className=\"full-width d-flex\">\n                  <span className=\"tempratures\"><p>TVOC Measurement</p> {latestData && latestData.pollution ? latestData.pollution.tvoc + \" ppb\" : \"N/A\"}</span>\n                  <span className=\"tempratures\"><p>CO2 Measurement</p> {latestData && latestData.pollution ? latestData.pollution.co2 + \" ppm\" : \"N/A\"}</span>\n                </span>\n              </CardHeader>\n              <CardFooter stats>\n                <div className={classes.stats + \" white-text\"}>\n                  <img\n                    src={clock}\n                    className={clock_cover + \" white-text\"}\n                    style={clock_style}\n                    alt=\"time\"\n                  />\n                  <span className=\"white-text\">{latestData.latestDataTime && latestData.latestDataTime}</span>\n                </div>\n              </CardFooter>\n            </Card>\n          </GridItem>\n          <GridItem xs={12} sm={6}>\n            <Card className={\"dash-tiles box temp_card_color box_card\"}>\n              <CardHeader color=\"danger\" stats icon>\n                <CardIcon color=\"success\" className={test1 + \" new-cover\"} style={styletest1}>\n                  <img className=\"card_img\" src={sunnycon} alt=\"logo\" />\n                </CardIcon>\n                {/* <p className={classes.cardCategory}>Temperature</p> */}\n                {/* <h3 className={classes.cardTitle}>{latestData && latestData.tempLevel ? latestData.tempLevel + \" (\" + latestData.pollution.temperature + \" °C)\" : \"Normal\"}</h3> */}\n                <h3 className={classes.cardTitle}>{latestData && latestData.tempLevel ? latestData.pollution.temperature + \" °C\" : \"Normal\"}</h3>\n                <span className=\"full-width d-flex\">\n                  <span className=\"tempratures\"><p>Maximun Temp:</p> {latestData && latestData.maxTempLevel ? latestData.max_temperature + \" °C\" : \"Normal\"}</span>\n                  <span className=\"tempratures\"><p>Minimum Temp:</p> {latestData && latestData.minTempLevel ? latestData.min_temperature + \" °C\" : \"Normal\"}</span>\n                </span>\n                <span className=\"full-width d-flex\">\n                  <span className=\"tempratures small\"><p>Temperature:</p> {latestData && latestData.minTempLevel ? latestData.pollution.temperature + \" °C\" : \"Normal\"}</span>\n                  <span className=\"tempratures small\"><p>Humidity:</p> {latestData && latestData.pollution ? latestData.pollution.humidity + \" g.kg-1\" : \"N/A\"}</span>\n                  <span className=\"tempratures small\"><p>Pressure</p> {latestData && latestData.pollution ? latestData.pollution.pressure + \" pa\" : \"N/A\"}</span>\n                </span>\n              </CardHeader>\n              <CardFooter stats>\n                <div className={classes.stats}>\n                  <img\n                    src={clock}\n                    className={clock_cover}\n                    style={clock_style}\n                    alt=\"time\"\n                  />\n                  <span className=\"white-text\">{latestData.latestDataTime && latestData.latestDataTime}</span>\n                </div>\n              </CardFooter>\n            </Card>\n          </GridItem>\n        </GridContainer>\n\n        <span className=\"box-with-bg\">\n          <h3 className=\"heading\">Day Wise Graph</h3>\n          <GridContainer>\n            <div className=\"dashTimePanel\">\n              <FormGroup>\n                <TextField\n                  label=\"Graph Type\"\n                  select\n                  InputLabelProps={{ className: \"required-label\" }}\n                  name=\"pollGraphType\"\n                  autoComplete=\"off\"\n                  // value={this.state.pollGraphType}\n                  data-validators=\"isRequired,isAlpha\"\n                  // onChange={this.handleUserInput}\n                  // variant=\"outlined\"\n                  variant=\"filled\"\n                  size=\"small\"\n                  margin=\"dense\"\n                  SelectProps={{\n                    multiple: false,\n                    value: this.state.pollGraphType,\n                    onChange: this.handleUserInput\n                  }}\n                >\n                  <MenuItem\n                    value={\"co2\"}\n                  >\n                    CO2\n                </MenuItem>\n                  <MenuItem\n                    value={\"tvoc\"}\n                  >\n                    tVoc\n                </MenuItem>\n                </TextField>\n              </FormGroup>\n              <FormGroup>\n                <TextField\n                  label=\"Records\"\n                  select\n                  InputLabelProps={{ className: \"required-label\" }}\n                  name=\"todayItems\"\n                  autoComplete=\"off\"\n                  // value={this.state.todayItems}\n                  data-validators=\"isRequired,isAlpha\"\n                  // onChange={this.handleUserInput}\n                  variant=\"filled\"\n                  size=\"small\"\n                  margin=\"dense\"\n                  SelectProps={{\n                    multiple: false,\n                    value: this.state.todayItems,\n                    onChange: this.handleUserInput\n                  }}\n                >\n                  <MenuItem\n                    value={\"2000\"}\n                  >\n                    Today's All Record\n                </MenuItem>\n                  <MenuItem\n                    value={\"10\"}\n                  >\n                    10\n                </MenuItem>\n                  <MenuItem\n                    value={\"20\"}\n                  >\n                    20\n                </MenuItem>\n                  <MenuItem\n                    value={\"50\"}\n                  >\n                    50\n                </MenuItem>\n                  <MenuItem\n                    value={\"100\"}\n                  >\n                    100\n                </MenuItem>\n                  <MenuItem\n                    value={\"200\"}\n                  >\n                    200\n                </MenuItem>\n                </TextField>\n              </FormGroup>\n              <FormControl >\n                <MuiPickersUtilsProvider\n                  inputVariant=\"standard\"\n                  utils={DateFnsUtils}\n                >\n                  <KeyboardDatePicker\n                    inputVariant=\"standard\"\n                    label=\"Start Date\"\n                    format=\"MM/dd/yyyy\"\n                    margin=\"normal\"\n                    className=\"\"\n                    id=\"start-date-picker-dialog\"\n                    InputLabelProps={{\n                      className: \"required-label\"\n                    }}\n                    InputProps={{ autoComplete: \"off\" }}\n                    name=\"estDate\"\n                    animateYearScrolling={true}\n                    value={this.state.startDate}\n                    minDate={this.state.minSDate}\n                    maxDate={this.state.maxSDate}\n                    minDateMessage={enMsg.startMinDate}\n                    maxDateMessage={enMsg.startMaxDate}\n                    onChange={this.handleStartDate}\n                    onError={this.handleStartDateError}\n                    className=\"KeyboardDatePicker invoice_picker\"\n                    invalidDateMessage={enMsg.invalidDate}\n                    KeyboardButtonProps={{\n                      \"aria-label\": \"change date\",\n                      className: \"date-picker-span\"\n                    }}\n                  />\n                </MuiPickersUtilsProvider>\n                <FormErrors\n                  show={!this.state.startDateValid}\n                  formErrors={this.state.formErrors}\n                  fieldName=\"startDate\"\n                />\n              </FormControl>\n            </div>\n          </GridContainer>\n          <GridContainer>\n            <GridItem xs={12} sm={6}>\n              <HighchartsReact\n                highcharts={Highcharts}\n                options={highChartOption}\n                className=\"chart-css\"\n                style={{ width: \"100%\", height: \"500px\" }}\n                containerProps={{ style: { height: \"500px\" } }}\n              />\n            </GridItem>\n            <GridItem xs={12} sm={6}>\n              <HighchartsReact\n                highcharts={Highcharts}\n                options={tempHighChart}\n                className=\"chart-css\"\n                style={{ width: \"100%\", height: \"500px\" }}\n                containerProps={{ style: { height: \"500px\" } }}\n              />\n            </GridItem>\n          </GridContainer>\n        </span>\n        <span className=\"box-with-bg\">\n          <h3 className=\"heading\">Heading</h3>\n          <GridContainer>\n            <div className=\"dashTimePanel dashTimePanel2\">\n              <FormGroup>\n                <TextField\n                  label=\"Records\"\n                  select\n                  InputLabelProps={{ className: \"required-label\" }}\n                  name=\"allItems\"\n                  autoComplete=\"off\"\n                  // value={this.state.allItems}\n                  data-validators=\"isRequired,isAlpha\"\n                  // onChange={this.handleUserInput}\n                  variant=\"filled\"\n                  size=\"small\"\n                  margin=\"dense\"\n                  SelectProps={{\n                    multiple: false,\n                    value: this.state.allItems,\n                    onChange: this.handleUserInputAll\n                  }}\n                >\n                  <MenuItem\n                    value={\"2000\"}\n                  >\n                    All Record\n                </MenuItem>\n                  <MenuItem\n                    value={\"100\"}\n                  >\n                    100\n                </MenuItem>\n                  <MenuItem\n                    value={\"200\"}\n                  >\n                    200\n                </MenuItem>\n                  <MenuItem\n                    value={\"500\"}\n                  >\n                    500\n                </MenuItem>\n                  <MenuItem\n                    value={\"1000\"}\n                  >\n                    1000\n                </MenuItem>\n                  <MenuItem\n                    value={\"10000\"}\n                  >\n                    10000\n                </MenuItem>\n                </TextField>\n              </FormGroup>\n            </div>\n          </GridContainer>\n          <GridContainer>\n            <GridItem xs={12} sm={12}>\n              <HighchartsReact\n                highcharts={Highcharts}\n                options={allDataHighChart}\n                className=\"chart-css\"\n                style={{ width: \"100%\", height: \"500px\" }}\n                containerProps={{ style: { height: \"500px\" } }}\n              />\n            </GridItem>\n          </GridContainer>\n        </span>\n        {/* <div id=\"pollutionData\" style={{ width: \"100%\", height: \"500px\" }}></div> */}\n        <span className=\"googlemap\">\n          <GridContainer>\n            <GridItem xs={12}>\n              <div style={{ height: '30vh', width: '100%' }}>\n              </div>\n            </GridItem>\n          </GridContainer>\n        </span>\n      </div>\n    );\n  }\n}\n\nDashboardClass.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst Dashboard = connect(\n  mapStateToProps, mapDispatchToProps\n)(DashboardClass);\n\n// export default Form;\nexport default withStyles(dashboardStyle)(Dashboard);"]},"metadata":{},"sourceType":"module"}