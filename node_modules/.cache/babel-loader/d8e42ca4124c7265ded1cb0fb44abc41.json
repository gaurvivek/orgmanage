{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/var/www/html/reactjs/ManagerWork/src/components/Login/ResetPassword.jsx\";\nimport React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, InputLabel, TextField, CircularProgress } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport \"assets/css/login.css\";\nimport logo from \"assets/img/logo.png\";\nimport { FormErrors } from \"./FormErrors\";\nimport { MIN_PASSWORD_LENGTH, PASSWORD_PATTERN, DIGIT_ONLY, OPT_LENGTH, MAX_PASSWORD_LENGTH } from \"__helpers/constants\";\nimport baseRoutes from \"base-routes\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport { NotificationOptions } from \"__helpers/constants\";\nimport { apiPath } from \"api\";\nimport fetch from \"isomorphic-fetch\";\nimport ReactNotification from \"react-notifications-component\";\nimport { store } from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { basePath } from \"base-routes\"; // import { Button, FormGroup, FormControl, InputLabel } from \"react-bootstrap\";\n// import \"./Login.css\";\n\nvar ResetPassword = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResetPassword, _React$Component);\n\n  var _super = _createSuper(ResetPassword);\n\n  function ResetPassword(props) {\n    var _this;\n\n    _classCallCheck(this, ResetPassword);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n\n      if (value.length > MAX_PASSWORD_LENGTH) {\n        return true;\n      }\n\n      _this.setState(_defineProperty({}, name, value), function () {\n        _this.validateField(name, value);\n      });\n    };\n\n    _this.handleDigits = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n\n      if (value.trim() == \"\" || value.match(DIGIT_ONLY)) {\n        _this.setState(_defineProperty({}, name, value), function () {\n          _this.validateField(name, value);\n        });\n      }\n    };\n\n    _this.state = {\n      password: \"\",\n      confirmPassword: \"\",\n      optNumber: \"\",\n      formErrors: {\n        password: \"\",\n        confirmPassword: \"\",\n        optNumber: \"\"\n      },\n      apiPath: apiPath.resetPassword,\n      passwordValid: false,\n      confirmPasswordValid: false,\n      optNumberValid: false,\n      loading: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.handleDigits = _this.handleDigits.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ResetPassword, [{\n    key: \"validateForm\",\n    value: function validateForm() {\n      return this.state.passwordValid && this.state.confirmPasswordValid && this.state.optNumberValid;\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(fieldName, value) {\n      var fieldValidationErrors = this.state.formErrors;\n      var passwordValid = this.state.passwordValid;\n      var confirmPasswordValid = this.state.confirmPasswordValid;\n      var optNumberValid = this.state.optNumberValid;\n\n      switch (fieldName) {\n        case \"password\":\n          passwordValid = true;\n          var errorMessage = \"\";\n\n          if (value.length < MIN_PASSWORD_LENGTH) {\n            passwordValid = false;\n            errorMessage = enMsg.shortPassword;\n          } else if (!value.match(PASSWORD_PATTERN)) {\n            errorMessage = enMsg.passwordPatternValidation;\n            passwordValid = false;\n          }\n\n          fieldValidationErrors.password = errorMessage;\n          break;\n\n        case \"confirmPassword\":\n          fieldValidationErrors.confirmPassword = \"\";\n          confirmPasswordValid = true;\n\n          if (value.length && this.state.password.length && this.state.password !== value) {\n            confirmPasswordValid = false;\n            fieldValidationErrors.confirmPassword = enMsg.confirmPasswordValidation;\n          }\n\n          break;\n\n        case \"optNumber\":\n          optNumberValid = value.length == OPT_LENGTH;\n          fieldValidationErrors.optNumber = optNumberValid ? \"\" : enMsg.OTPLength;\n          break;\n\n        default:\n          passwordValid = true;\n          confirmPasswordValid = true;\n          optNumberValid = true;\n      }\n\n      this.setState({\n        formErrors: fieldValidationErrors,\n        passwordValid: passwordValid,\n        confirmPasswordValid: confirmPasswordValid,\n        optNumberValid: optNumberValid\n      }, this.validateForm);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var _this2 = this;\n\n        var data, showNotification, response, notifiaciton;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                event.preventDefault();\n                data = {\n                  email: this.state.email,\n                  pssword: this.state.password\n                };\n                showNotification = {};\n                _context.prev = 4;\n                _context.next = 7;\n                return fetch(this.state.apiPath, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(data)\n                }).then(function (response) {\n                  alert(response.status == 403);\n\n                  if (response.status == 400 || response.status == 403 || response.status == 404) {\n                    console.log(\"Login Failed.\", response);\n                    showNotification = {\n                      title: enMsg.successResetPasswordTitle,\n                      message: enMsg.successResetPassword,\n                      type: \"danger\"\n                    };\n\n                    _this2.props.history.push(basePath + baseRoutes.login.path);\n                  } else if (response.ok) {\n                    showNotification = {\n                      title: enMsg.successResetPasswordTitle,\n                      message: enMsg.successResetPassword,\n                      type: \"success\"\n                    };\n\n                    _this2.props.history.push(basePath + baseRoutes.login.path);\n\n                    return response.json();\n                  } else {\n                    console.log(\"Login failed.\", response); // https://github.com/developit/unfetch#caveats\n\n                    // https://github.com/developit/unfetch#caveats\n                    var error = new Error(response.statusText); // error.response = response;\n                    // return Promise.reject(error);\n                  }\n                })[\"catch\"](function (error) {\n                  showNotification = {\n                    title: enMsg.failUpdateTitle,\n                    message: enMsg.networkFailedError,\n                    type: \"danger\"\n                  };\n                  console.error(\"You have an error in your code or there are Network issues.\", error); // return response;\n                });\n\n              case 7:\n                response = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n                showNotification = {\n                  title: enMsg.failUpdateTitle,\n                  message: enMsg.networkFailedError,\n                  type: \"danger\"\n                };\n                console.error(\"You have an error in your code or there are Network issues.\", _context.t0);\n\n              case 14:\n                if (showNotification !== undefined && showNotification.title !== undefined && showNotification.message !== undefined && showNotification.type !== undefined) {\n                  this.notificationID = store.removeNotification(this.notificationID);\n\n                  if (this.notificationID == undefined) {\n                    notifiaciton = {\n                      title: showNotification.title,\n                      message: showNotification.message,\n                      type: showNotification.type\n                    };\n                    notifiaciton = Object.assign(NotificationOptions, notifiaciton);\n                    this.notificationID = store.addNotification(notifiaciton);\n                  } //window.location.reload();\n\n                }\n                /* stop loading */\n\n\n                this.setState({\n                  loading: true\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 10]]);\n      }));\n\n      function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-outer-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-inner-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ReactNotification, {\n        key: \"forgot-password-notification\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: logo,\n        alt: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"green-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, \"Reset Password\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        id: \"reset-paasword-form\",\n        noValidate: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"New Password*\",\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleChange,\n        inputProps: {\n          maxLength: MAX_PASSWORD_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.passwordValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"Confirm Password*\",\n        type: \"password\",\n        name: \"confirmPassword\",\n        value: this.state.confirmPassword,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleChange,\n        inputProps: {\n          maxLength: MAX_PASSWORD_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.confirmPasswordValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"confirmPassword\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        label: \"OTP*\",\n        type: \"text\",\n        name: \"optNumber\",\n        value: this.state.optNumber,\n        \"data-validators\": \"isRequired,isAlpha\",\n        onChange: this.handleDigits,\n        inputProps: {\n          maxLength: OPT_LENGTH\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormErrors, {\n        show: !this.state.optNumberValid,\n        formErrors: this.state.formErrors,\n        fieldName: \"optNumber\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"action-btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button // variant=\"contained\"\n      , {\n        color: \"primary\",\n        className: this.state.loading ? \"buttonSuccess\" : \"\",\n        disabled: this.state.loading || !this.validateForm(),\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      }, \"Reset Password\", this.state.loading && /*#__PURE__*/React.createElement(CircularProgress, {\n        size: 24,\n        className: \"buttonProgress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Link, {\n        className: \"forgot-link\",\n        href: baseRoutes.forgotPassword.path,\n        to: baseRoutes.forgotPassword.path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }\n      }, baseRoutes.forgotPassword.pathName), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"signup-cover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        href: baseRoutes.login.path,\n        to: baseRoutes.login.path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 23\n        }\n      }, baseRoutes.login.pathName)))))))));\n    }\n  }]);\n\n  return ResetPassword;\n}(React.Component);\n\nexport { ResetPassword as default };","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/components/Login/ResetPassword.jsx"],"names":["React","Component","Button","FormGroup","FormControl","InputLabel","TextField","CircularProgress","Link","logo","FormErrors","MIN_PASSWORD_LENGTH","PASSWORD_PATTERN","DIGIT_ONLY","OPT_LENGTH","MAX_PASSWORD_LENGTH","baseRoutes","enMsg","NotificationOptions","apiPath","fetch","ReactNotification","store","basePath","ResetPassword","props","handleChange","event","name","target","value","length","setState","validateField","handleDigits","trim","match","state","password","confirmPassword","optNumber","formErrors","resetPassword","passwordValid","confirmPasswordValid","optNumberValid","loading","bind","handleSubmit","fieldName","fieldValidationErrors","errorMessage","shortPassword","passwordPatternValidation","confirmPasswordValidation","OTPLength","validateForm","preventDefault","data","email","pssword","showNotification","method","headers","body","JSON","stringify","then","response","alert","status","console","log","title","successResetPasswordTitle","message","successResetPassword","type","history","push","login","path","ok","json","error","Error","statusText","failUpdateTitle","networkFailedError","undefined","notificationID","removeNotification","notifiaciton","Object","assign","addNotification","maxLength","forgotPassword","pathName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  FormGroup,\n  FormControl,\n  InputLabel,\n  TextField,\n  CircularProgress\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport \"assets/css/login.css\";\nimport logo from \"assets/img/logo.png\";\nimport { FormErrors } from \"./FormErrors\";\nimport {\n  MIN_PASSWORD_LENGTH,\n  PASSWORD_PATTERN,\n  DIGIT_ONLY,\n  OPT_LENGTH,\n  MAX_PASSWORD_LENGTH\n} from \"__helpers/constants\";\nimport baseRoutes from \"base-routes\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport { NotificationOptions } from \"__helpers/constants\";\nimport { apiPath } from \"api\";\nimport fetch from \"isomorphic-fetch\";\n\nimport ReactNotification from \"react-notifications-component\";\nimport { store } from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { basePath } from \"base-routes\";\n// import { Button, FormGroup, FormControl, InputLabel } from \"react-bootstrap\";\n// import \"./Login.css\";\n\nexport default class ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: \"\",\n      confirmPassword: \"\",\n      optNumber: \"\",\n      formErrors: {\n        password: \"\",\n        confirmPassword: \"\",\n        optNumber: \"\"\n      },\n      apiPath: apiPath.resetPassword,\n      passwordValid: false,\n      confirmPasswordValid: false,\n      optNumberValid: false,\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDigits = this.handleDigits.bind(this);\n  }\n\n  validateForm() {\n    return (\n      this.state.passwordValid &&\n      this.state.confirmPasswordValid &&\n      this.state.optNumberValid\n    );\n  }\n\n  handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    if (value.length > MAX_PASSWORD_LENGTH) {\n      return true;\n    }\n    this.setState({ [name]: value }, () => {\n      this.validateField(name, value);\n    });\n  };\n\n  handleDigits = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    if (value.trim() == \"\" || value.match(DIGIT_ONLY)) {\n      this.setState({ [name]: value }, () => {\n        this.validateField(name, value);\n      });\n    }\n  };\n\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let passwordValid = this.state.passwordValid;\n    let confirmPasswordValid = this.state.confirmPasswordValid;\n    let optNumberValid = this.state.optNumberValid;\n    switch (fieldName) {\n      case \"password\":\n        passwordValid = true;\n        let errorMessage = \"\";\n\n        if (value.length < MIN_PASSWORD_LENGTH) {\n          passwordValid = false;\n          errorMessage = enMsg.shortPassword;\n        } else if (!value.match(PASSWORD_PATTERN)) {\n          errorMessage = enMsg.passwordPatternValidation;\n          passwordValid = false;\n        }\n        fieldValidationErrors.password = errorMessage;\n        break;\n\n      case \"confirmPassword\":\n        fieldValidationErrors.confirmPassword = \"\";\n        confirmPasswordValid = true;\n        if (\n          value.length &&\n          this.state.password.length &&\n          this.state.password !== value\n        ) {\n          confirmPasswordValid = false;\n          fieldValidationErrors.confirmPassword =\n            enMsg.confirmPasswordValidation;\n        }\n        break;\n      case \"optNumber\":\n        optNumberValid = value.length == OPT_LENGTH;\n        fieldValidationErrors.optNumber = optNumberValid ? \"\" : enMsg.OTPLength;\n        break;\n      default:\n        passwordValid = true;\n        confirmPasswordValid = true;\n        optNumberValid = true;\n    }\n\n    this.setState(\n      {\n        formErrors: fieldValidationErrors,\n        passwordValid: passwordValid,\n        confirmPasswordValid: confirmPasswordValid,\n        optNumberValid: optNumberValid\n      },\n      this.validateForm\n    );\n  }\n\n  async handleSubmit(event) {\n    this.setState({ loading: true });\n\n    event.preventDefault();\n\n    const data = {\n      email: this.state.email,\n      pssword: this.state.password\n    };\n    let showNotification = {};\n    try {\n      const response = await fetch(this.state.apiPath, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data)\n      })\n        .then(response => {\n          alert(response.status == 403);\n          if (\n            response.status == 400 ||\n            response.status == 403 ||\n            response.status == 404\n          ) {\n            console.log(\"Login Failed.\", response);\n            showNotification = {\n              title: enMsg.successResetPasswordTitle,\n              message: enMsg.successResetPassword,\n              type: \"danger\"\n            };\n            this.props.history.push(basePath + baseRoutes.login.path);\n          } else if (response.ok) {\n            showNotification = {\n              title: enMsg.successResetPasswordTitle,\n              message: enMsg.successResetPassword,\n              type: \"success\"\n            };\n            this.props.history.push(basePath + baseRoutes.login.path);\n            return response.json();\n          } else {\n            console.log(\"Login failed.\", response);\n            // https://github.com/developit/unfetch#caveats\n            let error = new Error(response.statusText);\n\n            // error.response = response;\n            // return Promise.reject(error);\n          }\n        })\n        .catch(error => {\n          showNotification = {\n            title: enMsg.failUpdateTitle,\n            message: enMsg.networkFailedError,\n            type: \"danger\"\n          };\n          console.error(\n            \"You have an error in your code or there are Network issues.\",\n            error\n          );\n          // return response;\n        });\n\n      // throw new Error(error);\n    } catch (error) {\n      showNotification = {\n        title: enMsg.failUpdateTitle,\n        message: enMsg.networkFailedError,\n        type: \"danger\"\n      };\n      console.error(\n        \"You have an error in your code or there are Network issues.\",\n        error\n      );\n    }\n    if (\n      showNotification !== undefined &&\n      showNotification.title !== undefined &&\n      showNotification.message !== undefined &&\n      showNotification.type !== undefined\n    ) {\n      this.notificationID = store.removeNotification(this.notificationID);\n      if (this.notificationID == undefined) {\n        let notifiaciton = {\n          title: showNotification.title,\n          message: showNotification.message,\n          type: showNotification.type\n        };\n        notifiaciton = Object.assign(NotificationOptions, notifiaciton);\n        this.notificationID = store.addNotification(notifiaciton);\n      }\n      //window.location.reload();\n    }\n    /* stop loading */\n    this.setState({ loading: true });\n  }\n\n  render() {\n    return (\n      <div className=\"login-outer-cover\">\n        <div className=\"login-cover\">\n          <div className=\"login-inner-cover\">\n            <ReactNotification key=\"forgot-password-notification\" />\n            <div className=\"logo-content\">\n              <img src={logo} alt=\"logo\" />\n            </div>\n            <div className=\"green-header\">Reset Password</div>\n            <div className=\"login-content\">\n              <div className=\"Login\">\n                <form\n                  onSubmit={this.handleSubmit}\n                  id=\"reset-paasword-form\"\n                  noValidate\n                >\n                  <FormGroup>\n                    {/* <InputLabel>Password</InputLabel> */}\n                    <TextField\n                      label=\"New Password*\"\n                      type=\"password\"\n                      name=\"password\"\n                      value={this.state.password}\n                      data-validators=\"isRequired,isAlpha\"\n                      onChange={this.handleChange}\n                      inputProps={{ maxLength: MAX_PASSWORD_LENGTH }}\n                    />\n                    <FormErrors\n                      show={!this.state.passwordValid}\n                      formErrors={this.state.formErrors}\n                      fieldName=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    {/* <InputLabel>Password</InputLabel> */}\n                    <TextField\n                      label=\"Confirm Password*\"\n                      type=\"password\"\n                      name=\"confirmPassword\"\n                      value={this.state.confirmPassword}\n                      data-validators=\"isRequired,isAlpha\"\n                      onChange={this.handleChange}\n                      inputProps={{ maxLength: MAX_PASSWORD_LENGTH }}\n                    />\n                    <FormErrors\n                      show={!this.state.confirmPasswordValid}\n                      formErrors={this.state.formErrors}\n                      fieldName=\"confirmPassword\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    {/* <InputLabel>Password</InputLabel> */}\n                    <TextField\n                      label=\"OTP*\"\n                      type=\"text\"\n                      name=\"optNumber\"\n                      value={this.state.optNumber}\n                      data-validators=\"isRequired,isAlpha\"\n                      onChange={this.handleDigits}\n                      inputProps={{ maxLength: OPT_LENGTH }}\n                    />\n                    <FormErrors\n                      show={!this.state.optNumberValid}\n                      formErrors={this.state.formErrors}\n                      fieldName=\"optNumber\"\n                    />\n                  </FormGroup>\n                  <div className=\"action-btns\">\n                    <Button\n                      // variant=\"contained\"\n                      color=\"primary\"\n                      className={this.state.loading ? \"buttonSuccess\" : \"\"}\n                      disabled={this.state.loading || !this.validateForm()}\n                      type=\"submit\"\n                    >\n                      Reset Password\n                      {this.state.loading && (\n                        <CircularProgress\n                          size={24}\n                          className=\"buttonProgress\"\n                        />\n                      )}\n                    </Button>\n\n                    <Link\n                      className=\"forgot-link\"\n                      href={baseRoutes.forgotPassword.path}\n                      to={baseRoutes.forgotPassword.path}\n                    >\n                      {baseRoutes.forgotPassword.pathName}\n                    </Link>\n\n                    <div className=\"signup-cover\">\n                      <Link\n                        href={baseRoutes.login.path}\n                        to={baseRoutes.login.path}\n                      >\n                        {baseRoutes.login.pathName}\n                      </Link>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}