{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* In All function we will call token refersh api ,\nin case of token authrization, we will store timestamp on all api call excep logout,\nthen comapare this timestamp agains the token life time variable*/\n// import config from 'config';\nimport { authHeader, reauthorizeTokenHeader } from \"__helpers/auth-header\";\nimport { apiPath } from \"api\";\nimport { store } from \"react-notifications-component\";\nimport sortJsonArray from \"sort-json-array\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { FORBIDDEN_STATUS, INVALID_DATA_POST, NO_DATA_FOUND, SECURITY_ERROR, SECURITY_ERROR_CODE, REDUX_STATE_DATA } from \"__helpers/constants\";\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { DATA_LOADING } from \"__helpers/constants\";\nimport { OK_SUCCESS_STATUS } from \"__helpers/constants\";\nimport { v4 as uuidv4 } from 'uuid';\nexport var userService = {\n  login: login,\n  logout: logout,\n  fetchGlobalApisWithoutAuth: fetchGlobalApisWithoutAuth,\n  showNotification: showNotification\n};\nvar originalSetItem = localStorage.setItem;\n\nlocalStorage.setItem = function (key, value) {\n  var event = new Event(\"itemInserted\");\n  event.value = value; // Optional..\n\n  event.key = key; // Optional..\n\n  document.dispatchEvent(event);\n  originalSetItem.apply(this, arguments);\n};\n\nvar localStorageSetHandler = function localStorageSetHandler(e) {// if(document.querySelector(\".storage-observation\"))\n  //   document.querySelector(\".storage-observation\").textContent = e.value;\n};\n\ndocument.addEventListener(\"itemInserted\", localStorageSetHandler, false);\n\nfunction fetchGlobalApisWithoutAuth(_x) {\n  return _fetchGlobalApisWithoutAuth.apply(this, arguments);\n}\n\nfunction _fetchGlobalApisWithoutAuth() {\n  _fetchGlobalApisWithoutAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apiUrl) {\n    var showNotification, apiResponse, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            showNotification = {};\n            apiResponse = [];\n            _context.prev = 2;\n            _context.next = 5;\n            return fetch(apiUrl, {\n              method: \"GET\",\n              headers: clientTokenHeader()\n            }).then(function (response) {\n              console.log(response);\n\n              if (response.status === SECURITY_ERROR || response.status === FORBIDDEN_STATUS) {\n                showNotification = {\n                  title: enMsg.sessionExpireTitle,\n                  message: enMsg.sessionExpire,\n                  type: \"warning\"\n                };\n                setTimeout(function () {// logout();\n                  // window.location.reload(true);\n                }, 1000); // return Promise.reject(\"\");\n              } else if (response.status === INVALID_DATA_POST) {\n                showNotification = {\n                  title: enMsg.connectionFailed,\n                  message: enMsg.networkFailedError,\n                  type: \"danger\"\n                };\n              } else if (response.ok) {\n                return response.json();\n              } else {\n                showNotification = {\n                  title: enMsg.connectionFailed,\n                  message: enMsg.networkFailedError,\n                  type: \"danger\"\n                };\n              }\n\n              return response.json();\n            }).then(function (data) {\n              if (data.errorCode === SECURITY_ERROR) {\n                setTimeout(function () {\n                  logout();\n                  window.location.reload(true);\n                }, 2000);\n                return Promise.reject(\"\");\n              }\n\n              apiResponse = data;\n              return apiResponse;\n            })[\"catch\"](function (error) {\n              console.log(error);\n              showNotification = {\n                title: enMsg.connectionFailed,\n                message: enMsg.networkFailedError,\n                type: \"danger\"\n              };\n            });\n\n          case 5:\n            response = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n            showNotification = {\n              title: enMsg.connectionFailed,\n              message: enMsg.networkFailedError,\n              type: \"danger\"\n            };\n\n          case 12:\n            return _context.abrupt(\"return\", apiResponse);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n  return _fetchGlobalApisWithoutAuth.apply(this, arguments);\n}\n\nfunction login(username, password) {\n  console.log(\"countForCall3\");\n  var data = {\n    username: username,\n    password: password,\n    grantType: \"password\",\n    scope: \"user\"\n  };\n\n  try {\n    var response = fetch(\"\".concat(apiPath.login), {\n      method: \"POST\",\n      headers: clientTokenHeader(),\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      if (response.status === 400) {\n        showNotification = {\n          title: enMsg.loginFailedTitle,\n          message: enMsg.inValidCredentials,\n          type: \"danger\"\n        };\n        logout();\n      } else if (response.ok) {\n        var accessToken = response.headers.get(\"Authorization\");\n\n        if (accessToken !== undefined) {\n          var userData = window.btoa(data.username + \":\" + data.password);\n          var user = {\n            authdata: window.btoa(userData),\n            accessToken: accessToken\n          };\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          window.location.reload(true);\n          return;\n        }\n      } else {\n        showNotification = {\n          title: enMsg.loginFailedTitle,\n          message: enMsg.inValidCredentials,\n          type: \"danger\"\n        };\n        var error = new Error(response.statusText);\n        logout();\n      }\n\n      return response.text();\n    }).then(function (response) {\n      return true;\n    })[\"catch\"](function (error) {\n      showNotification = {\n        title: enMsg.loginFailedTitle,\n        message: enMsg.networkFailedError,\n        type: \"danger\"\n      };\n      logout();\n      return response;\n    });\n  } catch (error) {\n    logout();\n    showNotification = {\n      title: enMsg.loginFailedTitle,\n      message: enMsg.networkFailedError,\n      type: \"danger\"\n    };\n  }\n}\n\nvar createNotification = function createNotification(showNotification) {\n  if (showNotification !== undefined && showNotification.title !== undefined && showNotification.message !== undefined && showNotification.type !== undefined) {\n    var notificationID = store.removeNotification();\n    var notifiaciton = {\n      title: showNotification.title,\n      message: showNotification.message,\n      type: showNotification.type\n    };\n\n    switch (notifiaciton.type) {\n      case 'info':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'success':\n        NotificationManager.success(notifiaciton.message, notifiaciton.title, 1900);\n        break;\n\n      case 'warning':\n        NotificationManager.warning(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'danger':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 2500);\n        break;\n    }\n  }\n\n  return;\n};\n\nfunction logout(data) {\n  // return;\n  // remove user from local storage to log user out\n  var keysToRemove = [\"user\", \"userDetail\", \"clientAuthToken\", \"tokenTimeStamp\", \"tokenTimeStamp\", \"clientAuthToken\", \"selectedReferral\", DATA_LOADING, REDUX_STATE_DATA];\n\n  for (var _i = 0, _keysToRemove = keysToRemove; _i < _keysToRemove.length; _i++) {\n    var key = _keysToRemove[_i];\n    localStorage.removeItem(key);\n    sessionStorage.removeItem(key);\n  }\n}\n\nfunction showNotification(showNotification) {\n  if (showNotification !== undefined && showNotification.title !== undefined && showNotification.message !== undefined && showNotification.type !== undefined) {\n    var notificationID = store.removeNotification();\n    var notifiaciton = {\n      title: showNotification.title,\n      message: showNotification.message,\n      type: showNotification.type\n    };\n\n    switch (notifiaciton.type) {\n      case 'info':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'success':\n        NotificationManager.success(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'warning':\n        NotificationManager.warning(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'danger':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n\n      case 'quickInfoAlert':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 1500);\n        break;\n\n      case 'successCallBack':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 1500, function () {\n          window.history.back();\n        });\n        break;\n    }\n  }\n\n  return;\n}\n\n;\nwindow.addEventListener(\"itemInserted\", function (e) {\n  console.log(e);\n  document.querySelector(\".storage-observation\").textContent = e.key;\n  document.querySelector(\".storage-observation\").textContent += e.oldValue;\n  document.querySelector(\".storage-observation\").textContent += e.newValue;\n  document.querySelector(\".storage-observation\").textContent += e.url;\n  document.querySelector(\".storage-observation\").textContent += JSON.stringify(e.storageArea);\n});","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/_services/user.service.js"],"names":["authHeader","reauthorizeTokenHeader","apiPath","store","sortJsonArray","enMsg","NotificationContainer","NotificationManager","FORBIDDEN_STATUS","INVALID_DATA_POST","NO_DATA_FOUND","SECURITY_ERROR","SECURITY_ERROR_CODE","REDUX_STATE_DATA","clientTokenHeader","DATA_LOADING","OK_SUCCESS_STATUS","v4","uuidv4","userService","login","logout","fetchGlobalApisWithoutAuth","showNotification","originalSetItem","localStorage","setItem","key","value","event","Event","document","dispatchEvent","apply","arguments","localStorageSetHandler","e","addEventListener","apiUrl","apiResponse","fetch","method","headers","then","response","console","log","status","title","sessionExpireTitle","message","sessionExpire","type","setTimeout","connectionFailed","networkFailedError","ok","json","data","errorCode","window","location","reload","Promise","reject","error","username","password","grantType","scope","body","JSON","stringify","loginFailedTitle","inValidCredentials","accessToken","get","undefined","userData","btoa","user","authdata","Error","statusText","text","createNotification","notificationID","removeNotification","notifiaciton","info","success","warning","keysToRemove","removeItem","sessionStorage","history","back","querySelector","textContent","oldValue","newValue","url","storageArea"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA,SAASA,UAAT,EAAqBC,sBAArB,QAAmD,uBAAnD;AACA,SAASC,OAAT,QAAwB,KAAxB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAAQC,qBAAR,EAA+BC,mBAA/B,QAAyD,qBAAzD;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,mBALF,EAMEC,gBANF,QAOO,qBAPP;AASA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAALA,KADyB;AAEzBC,EAAAA,MAAM,EAANA,MAFyB;AAGzBC,EAAAA,0BAA0B,EAA1BA,0BAHyB;AAIzBC,EAAAA,gBAAgB,EAAhBA;AAJyB,CAApB;AAOP,IAAIC,eAAe,GAAGC,YAAY,CAACC,OAAnC;;AAEAD,YAAY,CAACC,OAAb,GAAuB,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAC1C,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAU,cAAV,CAAZ;AAEAD,EAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd,CAH0C,CAGrB;;AACrBC,EAAAA,KAAK,CAACF,GAAN,GAAYA,GAAZ,CAJ0C,CAIzB;;AAEjBI,EAAAA,QAAQ,CAACC,aAAT,CAAuBH,KAAvB;AAEAL,EAAAA,eAAe,CAACS,KAAhB,CAAsB,IAAtB,EAA4BC,SAA5B;AACD,CATD;;AAWA,IAAIC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAASC,CAAT,EAAY,CACvC;AACA;AACD,CAHD;;AAKAL,QAAQ,CAACM,gBAAT,CAA0B,cAA1B,EAA0CF,sBAA1C,EAAkE,KAAlE;;SACeb,0B;;;;;yFAAf,iBAA0CgB,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACMf,YAAAA,gBADN,GACyB,EADzB;AAEMgB,YAAAA,WAFN,GAEoB,EAFpB;AAAA;AAAA;AAAA,mBAI6BC,KAAK,CAACF,MAAD,EAAS;AAC7BG,cAAAA,MAAM,EAAE,KADqB;AAE7BC,cAAAA,OAAO,EAAE5B,iBAAiB;AAFG,aAAT,CAAL,CAIlB6B,IAJkB,CAIb,UAAAC,QAAQ,EAAI;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,kBAAIA,QAAQ,CAACG,MAAT,KAAoBpC,cAApB,IAAsCiC,QAAQ,CAACG,MAAT,KAAoBvC,gBAA9D,EAAgF;AAC5Ee,gBAAAA,gBAAgB,GAAG;AACfyB,kBAAAA,KAAK,EAAE3C,KAAK,CAAC4C,kBADE;AAEfC,kBAAAA,OAAO,EAAE7C,KAAK,CAAC8C,aAFA;AAGfC,kBAAAA,IAAI,EAAE;AAHS,iBAAnB;AAKAC,gBAAAA,UAAU,CAAC,YAAW,CAClB;AACA;AACH,iBAHS,EAGP,IAHO,CAAV,CAN4E,CAU5E;AACH,eAXD,MAWO,IAAIT,QAAQ,CAACG,MAAT,KAAoBtC,iBAAxB,EAA2C;AAC9Cc,gBAAAA,gBAAgB,GAAG;AACfyB,kBAAAA,KAAK,EAAE3C,KAAK,CAACiD,gBADE;AAEfJ,kBAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFA;AAGfH,kBAAAA,IAAI,EAAE;AAHS,iBAAnB;AAKH,eANM,MAMA,IAAIR,QAAQ,CAACY,EAAb,EAAiB;AACpB,uBAAOZ,QAAQ,CAACa,IAAT,EAAP;AACH,eAFM,MAEA;AACHlC,gBAAAA,gBAAgB,GAAG;AACfyB,kBAAAA,KAAK,EAAE3C,KAAK,CAACiD,gBADE;AAEfJ,kBAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFA;AAGfH,kBAAAA,IAAI,EAAE;AAHS,iBAAnB;AAKH;;AACD,qBAAOR,QAAQ,CAACa,IAAT,EAAP;AACH,aAjCkB,EAkClBd,IAlCkB,CAkCb,UAAAe,IAAI,EAAI;AACV,kBAAIA,IAAI,CAACC,SAAL,KAAmBhD,cAAvB,EAAuC;AACnC0C,gBAAAA,UAAU,CAAC,YAAW;AAClBhC,kBAAAA,MAAM;AACNuC,kBAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACH,iBAHS,EAGP,IAHO,CAAV;AAIA,uBAAOC,OAAO,CAACC,MAAR,CAAe,EAAf,CAAP;AACH;;AACDzB,cAAAA,WAAW,GAAGmB,IAAd;AACA,qBAAOnB,WAAP;AACH,aA5CkB,WA6CZ,UAAA0B,KAAK,EAAI;AACZpB,cAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACA1C,cAAAA,gBAAgB,GAAG;AACfyB,gBAAAA,KAAK,EAAE3C,KAAK,CAACiD,gBADE;AAEfJ,gBAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFA;AAGfH,gBAAAA,IAAI,EAAE;AAHS,eAAnB;AAKH,aApDkB,CAJ7B;;AAAA;AAIYR,YAAAA,QAJZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0DMC,YAAAA,OAAO,CAACC,GAAR;AACAvB,YAAAA,gBAAgB,GAAG;AACfyB,cAAAA,KAAK,EAAE3C,KAAK,CAACiD,gBADE;AAEfJ,cAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFA;AAGfH,cAAAA,IAAI,EAAE;AAHS,aAAnB;;AA3DN;AAAA,6CAkESb,WAlET;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoEA,SAASnB,KAAT,CAAe8C,QAAf,EAAyBC,QAAzB,EAAmC;AACjCtB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,MAAMY,IAAI,GAAG;AACXQ,IAAAA,QAAQ,EAAEA,QADC;AAEXC,IAAAA,QAAQ,EAAEA,QAFC;AAGXC,IAAAA,SAAS,EAAE,UAHA;AAIXC,IAAAA,KAAK,EAAE;AAJI,GAAb;;AAMA,MAAI;AACF,QAAMzB,QAAQ,GAAGJ,KAAK,WAAItC,OAAO,CAACkB,KAAZ,GAAqB;AACzCqB,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE5B,iBAAiB,EAFe;AAGzCwD,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,IAAf;AAHmC,KAArB,CAAL,CAKhBf,IALgB,CAKX,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BxB,QAAAA,gBAAgB,GAAG;AACjByB,UAAAA,KAAK,EAAE3C,KAAK,CAACoE,gBADI;AAEjBvB,UAAAA,OAAO,EAAE7C,KAAK,CAACqE,kBAFE;AAGjBtB,UAAAA,IAAI,EAAE;AAHW,SAAnB;AAKA/B,QAAAA,MAAM;AACP,OAPD,MAOO,IAAIuB,QAAQ,CAACY,EAAb,EAAiB;AACtB,YAAImB,WAAW,GAAG/B,QAAQ,CAACF,OAAT,CAAiBkC,GAAjB,CAAqB,eAArB,CAAlB;;AACA,YAAID,WAAW,KAAKE,SAApB,EAA+B;AAC7B,cAAIC,QAAQ,GAAGlB,MAAM,CAACmB,IAAP,CAAYrB,IAAI,CAACQ,QAAL,GAAgB,GAAhB,GAAsBR,IAAI,CAACS,QAAvC,CAAf;AACA,cAAIa,IAAI,GAAG;AACTC,YAAAA,QAAQ,EAAErB,MAAM,CAACmB,IAAP,CAAYD,QAAZ,CADD;AAETH,YAAAA,WAAW,EAAEA;AAFJ,WAAX;AAIAlD,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B6C,IAAI,CAACC,SAAL,CAAeQ,IAAf,CAA7B;AACApB,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACA;AACD;AACF,OAZM,MAYA;AACLvC,QAAAA,gBAAgB,GAAG;AACjByB,UAAAA,KAAK,EAAE3C,KAAK,CAACoE,gBADI;AAEjBvB,UAAAA,OAAO,EAAE7C,KAAK,CAACqE,kBAFE;AAGjBtB,UAAAA,IAAI,EAAE;AAHW,SAAnB;AAKA,YAAIa,KAAK,GAAG,IAAIiB,KAAJ,CAAUtC,QAAQ,CAACuC,UAAnB,CAAZ;AACA9D,QAAAA,MAAM;AACP;;AACD,aAAOuB,QAAQ,CAACwC,IAAT,EAAP;AACD,KAnCgB,EAoChBzC,IApCgB,CAoCX,UAAAC,QAAQ,EAAI;AAChB,aAAO,IAAP;AACD,KAtCgB,WAsCR,UAAAqB,KAAK,EAAI;AAChB1C,MAAAA,gBAAgB,GAAG;AACjByB,QAAAA,KAAK,EAAE3C,KAAK,CAACoE,gBADI;AAEjBvB,QAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFE;AAGjBH,QAAAA,IAAI,EAAE;AAHW,OAAnB;AAKA/B,MAAAA,MAAM;AACN,aAAOuB,QAAP;AACD,KA9CgB,CAAjB;AA+CD,GAhDD,CAgDE,OAAOqB,KAAP,EAAc;AACd5C,IAAAA,MAAM;AACNE,IAAAA,gBAAgB,GAAG;AACjByB,MAAAA,KAAK,EAAE3C,KAAK,CAACoE,gBADI;AAEjBvB,MAAAA,OAAO,EAAE7C,KAAK,CAACkD,kBAFE;AAGjBH,MAAAA,IAAI,EAAE;AAHW,KAAnB;AAKD;AACF;;AACD,IAAMiC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA9D,gBAAgB,EAAI;AAC7C,MACEA,gBAAgB,KAAKsD,SAArB,IACAtD,gBAAgB,CAACyB,KAAjB,KAA2B6B,SAD3B,IAEAtD,gBAAgB,CAAC2B,OAAjB,KAA6B2B,SAF7B,IAGAtD,gBAAgB,CAAC6B,IAAjB,KAA0ByB,SAJ5B,EAKE;AACA,QAAIS,cAAc,GAAGnF,KAAK,CAACoF,kBAAN,EAArB;AACA,QAAIC,YAAY,GAAG;AACjBxC,MAAAA,KAAK,EAAEzB,gBAAgB,CAACyB,KADP;AAEjBE,MAAAA,OAAO,EAAE3B,gBAAgB,CAAC2B,OAFT;AAGjBE,MAAAA,IAAI,EAAE7B,gBAAgB,CAAC6B;AAHN,KAAnB;;AAKA,YAAQoC,YAAY,CAACpC,IAArB;AACE,WAAK,MAAL;AACE7C,QAAAA,mBAAmB,CAACkF,IAApB,CAAyBD,YAAY,CAACtC,OAAtC,EAA+CsC,YAAY,CAACxC,KAA5D,EAAmE,IAAnE;AACA;;AACF,WAAK,SAAL;AACEzC,QAAAA,mBAAmB,CAACmF,OAApB,CAA4BF,YAAY,CAACtC,OAAzC,EAAkDsC,YAAY,CAACxC,KAA/D,EAAsE,IAAtE;AACA;;AACF,WAAK,SAAL;AACEzC,QAAAA,mBAAmB,CAACoF,OAApB,CAA4BH,YAAY,CAACtC,OAAzC,EAAkDsC,YAAY,CAACxC,KAA/D,EAAsE,IAAtE;AACA;;AACF,WAAK,QAAL;AACEzC,QAAAA,mBAAmB,CAAC0D,KAApB,CAA0BuB,YAAY,CAACtC,OAAvC,EAAgDsC,YAAY,CAACxC,KAA7D,EAAoE,IAApE;AACA;AAZJ;AAcD;;AACD;AACD,CA7BD;;AA8BA,SAAS3B,MAAT,CAAgBqC,IAAhB,EAAsB;AACpB;AACA;AACA,MAAIkC,YAAY,GAAG,CACjB,MADiB,EAEjB,YAFiB,EAGjB,iBAHiB,EAIjB,gBAJiB,EAKjB,gBALiB,EAMjB,iBANiB,EAOjB,kBAPiB,EAQjB7E,YARiB,EASjBF,gBATiB,CAAnB;;AAaA,mCAAgB+E,YAAhB,mCAA8B;AAAzB,QAAIjE,GAAG,oBAAP;AACHF,IAAAA,YAAY,CAACoE,UAAb,CAAwBlE,GAAxB;AACAmE,IAAAA,cAAc,CAACD,UAAf,CAA0BlE,GAA1B;AACD;AACF;;AACD,SAASJ,gBAAT,CAA0BA,gBAA1B,EAA2C;AACzC,MACEA,gBAAgB,KAAKsD,SAArB,IACAtD,gBAAgB,CAACyB,KAAjB,KAA2B6B,SAD3B,IAEAtD,gBAAgB,CAAC2B,OAAjB,KAA6B2B,SAF7B,IAGAtD,gBAAgB,CAAC6B,IAAjB,KAA0ByB,SAJ5B,EAKE;AACA,QAAIS,cAAc,GAAGnF,KAAK,CAACoF,kBAAN,EAArB;AACA,QAAIC,YAAY,GAAG;AACjBxC,MAAAA,KAAK,EAAEzB,gBAAgB,CAACyB,KADP;AAEjBE,MAAAA,OAAO,EAAE3B,gBAAgB,CAAC2B,OAFT;AAGjBE,MAAAA,IAAI,EAAE7B,gBAAgB,CAAC6B;AAHN,KAAnB;;AAKA,YAAQoC,YAAY,CAACpC,IAArB;AACE,WAAK,MAAL;AACE7C,QAAAA,mBAAmB,CAACkF,IAApB,CAAyBD,YAAY,CAACtC,OAAtC,EAA+CsC,YAAY,CAACxC,KAA5D,EAAmE,IAAnE;AACA;;AACF,WAAK,SAAL;AACEzC,QAAAA,mBAAmB,CAACmF,OAApB,CAA4BF,YAAY,CAACtC,OAAzC,EAAkDsC,YAAY,CAACxC,KAA/D,EAAsE,IAAtE;AACA;;AACF,WAAK,SAAL;AACEzC,QAAAA,mBAAmB,CAACoF,OAApB,CAA4BH,YAAY,CAACtC,OAAzC,EAAkDsC,YAAY,CAACxC,KAA/D,EAAsE,IAAtE;AACA;;AACF,WAAK,QAAL;AACEzC,QAAAA,mBAAmB,CAAC0D,KAApB,CAA0BuB,YAAY,CAACtC,OAAvC,EAAgDsC,YAAY,CAACxC,KAA7D,EAAoE,IAApE;AACA;;AACF,WAAK,gBAAL;AACEzC,QAAAA,mBAAmB,CAACkF,IAApB,CAAyBD,YAAY,CAACtC,OAAtC,EAA+CsC,YAAY,CAACxC,KAA5D,EAAmE,IAAnE;AACA;;AACF,WAAK,iBAAL;AACEzC,QAAAA,mBAAmB,CAAC0D,KAApB,CAA0BuB,YAAY,CAACtC,OAAvC,EAAgDsC,YAAY,CAACxC,KAA7D,EAAoE,IAApE,EAA0E,YAAM;AAC9EY,UAAAA,MAAM,CAACmC,OAAP,CAAeC,IAAf;AACD,SAFD;AAGA;AApBJ;AAsBD;;AACD;AACD;;AAAA;AAEDpC,MAAM,CAACvB,gBAAP,CAAwB,cAAxB,EAAwC,UAASD,CAAT,EAAY;AAClDS,EAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACAL,EAAAA,QAAQ,CAACkE,aAAT,CAAuB,sBAAvB,EAA+CC,WAA/C,GAA6D9D,CAAC,CAACT,GAA/D;AACAI,EAAAA,QAAQ,CAACkE,aAAT,CAAuB,sBAAvB,EAA+CC,WAA/C,IAA8D9D,CAAC,CAAC+D,QAAhE;AACApE,EAAAA,QAAQ,CAACkE,aAAT,CAAuB,sBAAvB,EAA+CC,WAA/C,IAA8D9D,CAAC,CAACgE,QAAhE;AACArE,EAAAA,QAAQ,CAACkE,aAAT,CAAuB,sBAAvB,EAA+CC,WAA/C,IAA8D9D,CAAC,CAACiE,GAAhE;AACAtE,EAAAA,QAAQ,CAACkE,aAAT,CAAuB,sBAAvB,EAA+CC,WAA/C,IAA8D3B,IAAI,CAACC,SAAL,CAC5DpC,CAAC,CAACkE,WAD0D,CAA9D;AAGD,CATD","sourcesContent":["/* In All function we will call token refersh api ,\nin case of token authrization, we will store timestamp on all api call excep logout,\nthen comapare this timestamp agains the token life time variable*/\n\n// import config from 'config';\nimport { authHeader, reauthorizeTokenHeader } from \"__helpers/auth-header\";\nimport { apiPath } from \"api\";\nimport { store } from \"react-notifications-component\";\nimport sortJsonArray from \"sort-json-array\";\nimport enMsg from \"__helpers/locale/en/en\";\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport {\n  FORBIDDEN_STATUS,\n  INVALID_DATA_POST,\n  NO_DATA_FOUND,\n  SECURITY_ERROR,\n  SECURITY_ERROR_CODE,\n  REDUX_STATE_DATA\n} from \"__helpers/constants\";\n\nimport { clientTokenHeader } from \"__helpers/auth-header\";\nimport { DATA_LOADING } from \"__helpers/constants\";\nimport { OK_SUCCESS_STATUS } from \"__helpers/constants\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const userService = {\n  login,\n  logout,\n  fetchGlobalApisWithoutAuth,\n  showNotification,\n};\n\nvar originalSetItem = localStorage.setItem;\n\nlocalStorage.setItem = function(key, value) {\n  var event = new Event(\"itemInserted\");\n\n  event.value = value; // Optional..\n  event.key = key; // Optional..\n\n  document.dispatchEvent(event);\n\n  originalSetItem.apply(this, arguments);\n};\n\nvar localStorageSetHandler = function(e) {  \n  // if(document.querySelector(\".storage-observation\"))\n  //   document.querySelector(\".storage-observation\").textContent = e.value;\n};\n\ndocument.addEventListener(\"itemInserted\", localStorageSetHandler, false);\nasync function fetchGlobalApisWithoutAuth(apiUrl) {\n  let showNotification = {};\n  let apiResponse = [];\n  try {\n      const response = await fetch(apiUrl, {\n              method: \"GET\",\n              headers: clientTokenHeader()\n          })\n          .then(response => {\n              console.log(response)\n              if (response.status === SECURITY_ERROR || response.status === FORBIDDEN_STATUS) {\n                  showNotification = {\n                      title: enMsg.sessionExpireTitle,\n                      message: enMsg.sessionExpire,\n                      type: \"warning\"\n                  };\n                  setTimeout(function() {\n                      // logout();\n                      // window.location.reload(true);\n                  }, 1000);\n                  // return Promise.reject(\"\");\n              } else if (response.status === INVALID_DATA_POST) {\n                  showNotification = {\n                      title: enMsg.connectionFailed,\n                      message: enMsg.networkFailedError,\n                      type: \"danger\"\n                  };\n              } else if (response.ok) {\n                  return response.json();\n              } else {\n                  showNotification = {\n                      title: enMsg.connectionFailed,\n                      message: enMsg.networkFailedError,\n                      type: \"danger\"\n                  };\n              }\n              return response.json();\n          })\n          .then(data => {\n              if (data.errorCode === SECURITY_ERROR) {\n                  setTimeout(function() {\n                      logout();\n                      window.location.reload(true);\n                  }, 2000);\n                  return Promise.reject(\"\");\n              }\n              apiResponse = data;\n              return apiResponse;\n          })\n          .catch(error => {\n              console.log(error)\n              showNotification = {\n                  title: enMsg.connectionFailed,\n                  message: enMsg.networkFailedError,\n                  type: \"danger\"\n              };\n          });\n  } catch (error) {\n      console.log(error)\n      showNotification = {\n          title: enMsg.connectionFailed,\n          message: enMsg.networkFailedError,\n          type: \"danger\"\n      };\n  }\n  // createNotification(showNotification);\n  return apiResponse;\n}\nfunction login(username, password) {\n  console.log(\"countForCall3\");\n  const data = {\n    username: username,\n    password: password,\n    grantType: \"password\",\n    scope: \"user\"\n  };\n  try {\n    const response = fetch(`${apiPath.login}`, {\n      method: \"POST\",\n      headers: clientTokenHeader(),\n      body: JSON.stringify(data),\n    })\n    .then(response => {\n      if (response.status === 400) {\n        showNotification = {\n          title: enMsg.loginFailedTitle,\n          message: enMsg.inValidCredentials,\n          type: \"danger\"\n        };\n        logout();\n      } else if (response.ok) {\n        let accessToken = response.headers.get(\"Authorization\");\n        if (accessToken !== undefined) {\n          let userData = window.btoa(data.username + \":\" + data.password);\n          let user = {\n            authdata: window.btoa(userData),\n            accessToken: accessToken\n          };\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          window.location.reload(true);\n          return;\n        }\n      } else {\n        showNotification = {\n          title: enMsg.loginFailedTitle,\n          message: enMsg.inValidCredentials,\n          type: \"danger\"\n        };\n        let error = new Error(response.statusText);\n        logout();\n      }\n      return response.text();\n    })\n    .then(response => {\n      return true;\n    }).catch(error => {\n      showNotification = {\n        title: enMsg.loginFailedTitle,\n        message: enMsg.networkFailedError,\n        type: \"danger\"\n      };\n      logout();\n      return response;\n    });\n  } catch (error) {\n    logout();\n    showNotification = {\n      title: enMsg.loginFailedTitle,\n      message: enMsg.networkFailedError,\n      type: \"danger\"\n    };\n  }\n}\nconst createNotification = showNotification => {\n  if (\n    showNotification !== undefined &&\n    showNotification.title !== undefined &&\n    showNotification.message !== undefined &&\n    showNotification.type !== undefined\n  ) {\n    let notificationID = store.removeNotification();\n    let notifiaciton = {\n      title: showNotification.title,\n      message: showNotification.message,\n      type: showNotification.type\n    };\n    switch (notifiaciton.type) {\n      case 'info':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'success':\n        NotificationManager.success(notifiaciton.message, notifiaciton.title, 1900);\n        break;\n      case 'warning':\n        NotificationManager.warning(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'danger':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 2500);\n        break;\n    }\n  }\n  return;\n};\nfunction logout(data) {\n  // return;\n  // remove user from local storage to log user out\n  let keysToRemove = [\n    \"user\",\n    \"userDetail\",\n    \"clientAuthToken\",\n    \"tokenTimeStamp\",\n    \"tokenTimeStamp\",\n    \"clientAuthToken\",\n    \"selectedReferral\",\n    DATA_LOADING,\n    REDUX_STATE_DATA,\n\n  ];\n\n  for (let key of keysToRemove) {\n    localStorage.removeItem(key);\n    sessionStorage.removeItem(key);\n  }\n}\nfunction showNotification(showNotification){\n  if (\n    showNotification !== undefined &&\n    showNotification.title !== undefined &&\n    showNotification.message !== undefined &&\n    showNotification.type !== undefined\n  ) {\n    let notificationID = store.removeNotification();\n    let notifiaciton = {\n      title: showNotification.title,\n      message: showNotification.message,\n      type: showNotification.type\n    };\n    switch (notifiaciton.type) {\n      case 'info':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'success':\n        NotificationManager.success(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'warning':\n        NotificationManager.warning(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'danger':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 3500);\n        break;\n      case 'quickInfoAlert':\n        NotificationManager.info(notifiaciton.message, notifiaciton.title, 1500);\n        break;\n      case 'successCallBack':\n        NotificationManager.error(notifiaciton.message, notifiaciton.title, 1500, () => {\n          window.history.back();\n        });\n        break;\n    }\n  }\n  return;\n};\n\nwindow.addEventListener(\"itemInserted\", function(e) {\n  console.log(e);\n  document.querySelector(\".storage-observation\").textContent = e.key;\n  document.querySelector(\".storage-observation\").textContent += e.oldValue;\n  document.querySelector(\".storage-observation\").textContent += e.newValue;\n  document.querySelector(\".storage-observation\").textContent += e.url;\n  document.querySelector(\".storage-observation\").textContent += JSON.stringify(\n    e.storageArea\n  );\n});\n\n"]},"metadata":{},"sourceType":"module"}