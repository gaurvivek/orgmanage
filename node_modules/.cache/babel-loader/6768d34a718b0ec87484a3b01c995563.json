{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/html/reactjs/ManagerWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/html/reactjs/ManagerWork/src/views/Tasks/TasksPopup.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogActions, DialogContent, Select, DialogTitle, IconButton, TextField, MenuItem, InputLabel, Button } from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uid } from \"__helpers/utils\";\nimport { taskList, reduxLoad } from 'js/actions';\nimport { userService } from \"_services/user.service\";\n\nvar AddTask = function AddTask(props) {\n  var openProjects = props.openProjects,\n      confirmModalClose = props.confirmModalClose,\n      loading = props.loading,\n      projectId = props.projectId,\n      taskId = props.taskId;\n  var dispatch = useDispatch();\n  var taskListArr = useSelector(function (state) {\n    return state.taskList;\n  });\n  var updatedTask = taskListArr.filter(function (tList) {\n    if (tList.uid == taskId) {\n      return tList;\n    }\n  });\n  var errorList = {\n    taskName: \"\",\n    taskDescription: \"\"\n  };\n  var errorValidList = {\n    getTaskValid: true,\n    getTaskDescriptionValid: true\n  };\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskName = _useState2[0],\n      setTaskName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskDescription = _useState4[0],\n      setTaskDescription = _useState4[1];\n\n  var _useState5 = useState(\"new\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      taskStatus = _useState6[0],\n      setTaskStatus = _useState6[1];\n\n  var _useState7 = useState(\"low\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      taskPriority = _useState8[0],\n      setTaskPriority = _useState8[1];\n\n  var _useState9 = useState(errorList),\n      _useState10 = _slicedToArray(_useState9, 2),\n      getError = _useState10[0],\n      setError = _useState10[1];\n\n  var _useState11 = useState(errorValidList),\n      _useState12 = _slicedToArray(_useState11, 2),\n      formValid = _useState12[0],\n      setFormValid = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      getProjectValid = _useState14[0],\n      setProjectValid = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loader = _useState16[0],\n      setLoader = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      getProjectDescriptionValid = _useState18[0],\n      setProjectDescriptionValid = _useState18[1];\n\n  useEffect(function () {\n    if (taskId) {\n      if (updatedTask && updatedTask.length) {\n        setTaskName(updatedTask[0].taskName);\n        setTaskDescription(updatedTask[0].taskDescription);\n        setTaskStatus(updatedTask[0].taskStatus);\n        setTaskPriority(updatedTask[0].taskPriority);\n        setFormValid({});\n      } else {\n        var showNotification = {\n          title: 'Task Update',\n          message: 'Task not found',\n          type: \"danger\"\n        };\n        userService.showNotification(showNotification);\n        setTimeout(function () {\n          confirmModalClose();\n        }, 1000);\n      }\n    }\n  }, [openProjects]);\n\n  var validateForm = function validateForm() {\n    console.log(formValid);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var _updatedTask, data, showNotification;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setLoader(true);\n              dispatch(reduxLoad(false));\n              taskListArr = taskListArr && taskListArr.length ? taskListArr : [];\n\n              if (taskId) {\n                _updatedTask = taskListArr.filter(function (tList) {\n                  if (tList.uid == taskId) {\n                    tList.taskName = taskName;\n                    tList.taskDescription = taskDescription;\n                    tList.taskPriority = taskPriority;\n                    tList.taskStatus = taskStatus;\n                  }\n\n                  return tList;\n                });\n                dispatch(taskList(_updatedTask));\n              } else {\n                data = {\n                  uid: uid(),\n                  projectId: projectId,\n                  taskName: taskName,\n                  taskDescription: taskDescription,\n                  taskPriority: taskPriority,\n                  taskStatus: taskStatus,\n                  createDate: new Date()\n                };\n                taskListArr.push(data);\n                dispatch(taskList(taskListArr));\n              }\n\n              setTaskName(\"\");\n              setTaskDescription(\"\");\n              setTaskStatus(\"new\");\n              setTaskPriority(\"low\");\n              setLoader(false);\n              setFormValid(errorValidList);\n              dispatch(reduxLoad(true));\n              showNotification = {\n                title: taskId ? 'Update Task' : 'Create Task',\n                message: taskId ? 'Task updated successfully.' : 'Task created successfully.',\n                type: \"success\"\n              };\n              userService.showNotification(showNotification);\n              setTimeout(function () {\n                confirmModalClose();\n              }, 100);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleInput = function handleInput(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    var getErrorList = getError;\n    var getFormValid = formValid;\n\n    switch (name) {\n      case 'taskName':\n        setTaskName(value);\n        var projectValid = value.trim().length > 0;\n        getErrorList.taskName = projectValid ? '' : \"Enter task name\";\n\n        if (projectValid) {\n          delete getFormValid.getTaskValid;\n        } else {\n          getFormValid.getTaskValid = true;\n        }\n\n        break;\n\n      case 'taskDescription':\n        setTaskDescription(value);\n        var projectDescriptionValid = value.trim().length > 0;\n        getErrorList.taskDescription = projectDescriptionValid ? '' : \"Enter task description\";\n\n        if (projectDescriptionValid) {\n          delete getFormValid.getTaskDescriptionValid;\n        } else {\n          getFormValid.getTaskDescriptionValid = true;\n        }\n\n        break;\n\n      case 'taskStatus': // setTaskStatus(value);\n\n      case 'taskPriority': // setTaskPriority(value);\n\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    className: \"call-modal\",\n    maxWidth: 'lg',\n    open: openProjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    className: \"add-modal-title\",\n    id: \"discharge-planner-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, taskId ? \"Update\" : \"Create\", \" Tasks\", /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: confirmModalClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"\",\n    label: \"Task Name\",\n    className: \"full-width-input\",\n    name: \"taskName\",\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    value: taskName,\n    onChange: function onChange(e) {\n      return handleInput(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormErrors, {\n    show: formValid.getTaskValid,\n    formErrors: getError,\n    fieldName: \"taskName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Task Priority\",\n    select: true,\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    name: \"taskPriority\",\n    className: \"full-width-input\",\n    autoComplete: \"off\",\n    value: taskPriority,\n    \"data-validators\": \"isRequired,isAlpha\",\n    onChange: function onChange(e) {\n      return setTaskPriority(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"low\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, \"Low\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"medium\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"high\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, \"High\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Task Status\",\n    select: true,\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    name: \"taskStatus\",\n    className: \"full-width-input\",\n    autoComplete: \"off\",\n    value: taskStatus,\n    \"data-validators\": \"isRequired,isAlpha\",\n    onChange: function onChange(e) {\n      return setTaskStatus(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"new\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }, \"New\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"progress\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 29\n    }\n  }, \"Progress\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"done\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 29\n    }\n  }, \"Done\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dollar_modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: \"Task Description\",\n    className: \"full-width-input\",\n    name: \"taskDescription\",\n    InputLabelProps: {\n      className: \"required-label\"\n    },\n    multiline: true,\n    rows: 3,\n    value: taskDescription,\n    onChange: function onChange(e) {\n      return handleInput(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormErrors, {\n    show: formValid.getTaskDescriptionValid,\n    formErrors: getError,\n    fieldName: \"taskDescription\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    className: \"modal-actions\",\n    justify: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"btn1\",\n    disabled: Object.entries(formValid || {}).length > 0 || loader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 21\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 24,\n    className: \"buttonProgress\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }), taskId ? \"Update\" : \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    className: \"btn2\",\n    onClick: confirmModalClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, \"Cancel\"))));\n};\n\nexport default AddTask;","map":{"version":3,"sources":["/var/www/html/reactjs/ManagerWork/src/views/Tasks/TasksPopup.jsx"],"names":["React","useState","useEffect","Dialog","DialogActions","DialogContent","Select","DialogTitle","IconButton","TextField","MenuItem","InputLabel","Button","CloseIcon","CircularProgress","FormErrors","useDispatch","useSelector","uid","taskList","reduxLoad","userService","AddTask","props","openProjects","confirmModalClose","loading","projectId","taskId","dispatch","taskListArr","state","updatedTask","filter","tList","errorList","taskName","taskDescription","errorValidList","getTaskValid","getTaskDescriptionValid","setTaskName","setTaskDescription","taskStatus","setTaskStatus","taskPriority","setTaskPriority","getError","setError","formValid","setFormValid","getProjectValid","setProjectValid","loader","setLoader","getProjectDescriptionValid","setProjectDescriptionValid","length","showNotification","title","message","type","setTimeout","validateForm","console","log","handleSubmit","event","preventDefault","data","createDate","Date","push","handleInput","e","target","name","value","getErrorList","getFormValid","projectValid","trim","projectDescriptionValid","className","Object","entries"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    Select,\n    DialogTitle,\n    IconButton,\n    TextField,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { FormErrors } from \"components/Login/FormErrors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uid } from \"__helpers/utils\";\nimport { taskList, reduxLoad } from 'js/actions';\nimport { userService } from \"_services/user.service\";\n\nconst AddTask = (props) => {\n    const { openProjects, confirmModalClose, loading, projectId, taskId } = props;\n    const dispatch = useDispatch();\n    let taskListArr = useSelector((state) => state.taskList);\n    const updatedTask = taskListArr.filter((tList) => {\n        if (tList.uid == taskId) {\n            return tList;\n        }\n    })\n    const errorList = {\n        taskName: \"\",\n        taskDescription: \"\",\n    }\n    const errorValidList = {\n        getTaskValid: true,\n        getTaskDescriptionValid: true,\n    }\n    const [taskName, setTaskName] = useState(\"\")\n    const [taskDescription, setTaskDescription] = useState(\"\")\n    const [taskStatus, setTaskStatus] = useState(\"new\")\n    const [taskPriority, setTaskPriority] = useState(\"low\")\n    const [getError, setError] = useState(errorList)\n    const [formValid, setFormValid] = useState(errorValidList)\n    const [getProjectValid, setProjectValid] = useState(false)\n    const [loader, setLoader] = useState(false)\n    const [getProjectDescriptionValid, setProjectDescriptionValid] = useState(false)\n    \n    useEffect(() => {\n        if(taskId){\n            if (updatedTask && updatedTask.length){\n                setTaskName(updatedTask[0].taskName);\n                setTaskDescription(updatedTask[0].taskDescription);\n                setTaskStatus(updatedTask[0].taskStatus);\n                setTaskPriority(updatedTask[0].taskPriority);\n                setFormValid({})\n            }else{\n                const showNotification = {\n                    title: 'Task Update',\n                    message: 'Task not found',\n                    type: \"danger\",\n                }\n                userService.showNotification(showNotification);\n                setTimeout(function () {\n                    confirmModalClose();\n                }, 1000);\n            }\n        }\n    }, [openProjects])\n    const validateForm = () => {\n        console.log(formValid)\n    }\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setLoader(true);\n        dispatch(reduxLoad(false))\n        taskListArr = taskListArr && taskListArr.length ? taskListArr : [];\n        if (taskId) {\n            const updatedTask = taskListArr.filter((tList) => {\n                if (tList.uid == taskId) {\n                    tList.taskName = taskName;\n                    tList.taskDescription = taskDescription;\n                    tList.taskPriority = taskPriority;\n                    tList.taskStatus = taskStatus;\n                }\n                return tList;\n            })\n            dispatch(taskList(updatedTask));\n        } else {\n            const data = {\n                uid: uid(),\n                projectId: projectId,\n                taskName: taskName,\n                taskDescription: taskDescription,\n                taskPriority: taskPriority,\n                taskStatus: taskStatus,\n                createDate: new Date(),\n            }\n            taskListArr.push(data)\n            dispatch(taskList(taskListArr));\n        }\n        setTaskName(\"\");\n        setTaskDescription(\"\");\n        setTaskStatus(\"new\");\n        setTaskPriority(\"low\");\n        setLoader(false);\n        setFormValid(errorValidList)\n        dispatch(reduxLoad(true))\n        const showNotification = {\n            title: taskId ? 'Update Task' : 'Create Task',\n            message: taskId ? 'Task updated successfully.' : 'Task created successfully.',\n            type: \"success\",\n        }\n        userService.showNotification(showNotification);\n        setTimeout(function () {\n            confirmModalClose();\n        }, 100);\n    }\n    const handleInput = (e) => {\n        const { name, value } = e.target;\n        let getErrorList = getError;\n        let getFormValid = formValid;\n        switch (name) {\n            case 'taskName':\n                setTaskName(value);\n                let projectValid = value.trim().length > 0;\n                getErrorList.taskName = projectValid ? '' : \"Enter task name\";\n                if (projectValid) {\n                    delete getFormValid.getTaskValid;\n                } else {\n                    getFormValid.getTaskValid = true;\n                }\n                break;\n            case 'taskDescription':\n                setTaskDescription(value);\n                let projectDescriptionValid = value.trim().length > 0;\n                getErrorList.taskDescription = projectDescriptionValid ? '' : \"Enter task description\";\n                if (projectDescriptionValid) {\n                    delete getFormValid.getTaskDescriptionValid;\n                } else {\n                    getFormValid.getTaskDescriptionValid = true;\n                }\n                break;\n            case 'taskStatus':\n            // setTaskStatus(value);\n            case 'taskPriority':\n            // setTaskPriority(value);\n        }\n    }\n    return (\n        <Dialog\n            className=\"call-modal\"\n            maxWidth={'lg'}\n            open={openProjects}\n        >\n            <DialogTitle className=\"add-modal-title\" id=\"discharge-planner-dialog-title\">\n                {taskId ? \"Update\" : \"Create\"} Tasks\n                <IconButton aria-label=\"close\">\n                    <CloseIcon onClick={confirmModalClose} />\n                </IconButton>\n            </DialogTitle>\n            <form onSubmit={handleSubmit} noValidate>\n                <DialogContent>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            id=\"\"\n                            label=\"Task Name\"\n                            className=\"full-width-input\"\n                            name=\"taskName\"\n                            InputLabelProps={{ className: \"required-label\" }}\n                            value={taskName}\n                            onChange={e => handleInput(e)} />\n                        <FormErrors\n                            show={formValid.getTaskValid}\n                            formErrors={getError}\n                            fieldName=\"taskName\"\n                        />\n                    </div>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            label=\"Task Priority\"\n                            select\n                            InputLabelProps={{ className: \"required-label\" }}\n                            name=\"taskPriority\"\n                            className=\"full-width-input\"\n                            autoComplete=\"off\"\n                            value={taskPriority}\n                            data-validators=\"isRequired,isAlpha\"\n                            onChange={e => setTaskPriority(e.target.value)}\n                        >\n                            <MenuItem\n                                value={\"low\"}\n                            >\n                                Low\n                            </MenuItem>\n                            <MenuItem\n                                value={\"medium\"}\n                            >\n                                Medium\n                            </MenuItem>\n                            <MenuItem\n                                value={\"high\"}\n                            >\n                                High\n                            </MenuItem>\n                        </TextField>\n                    </div>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            label=\"Task Status\"\n                            select\n                            InputLabelProps={{ className: \"required-label\" }}\n                            name=\"taskStatus\"\n                            className=\"full-width-input\"\n                            autoComplete=\"off\"\n                            value={taskStatus}\n                            data-validators=\"isRequired,isAlpha\"\n                            onChange={e => setTaskStatus(e.target.value)}\n                        >\n                            <MenuItem\n                                value={\"new\"}\n                            >\n                                New\n                            </MenuItem>\n                            <MenuItem\n                                value={\"progress\"}\n                            >\n                                Progress\n                            </MenuItem>\n                            <MenuItem\n                                value={\"done\"}\n                            >\n                                Done\n                            </MenuItem>\n                        </TextField>\n                    </div>\n                    <div className=\"dollar_modal\">\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"Task Description\"\n                            className=\"full-width-input\"\n                            name=\"taskDescription\"\n                            InputLabelProps={{ className: \"required-label\" }}\n                            multiline\n                            rows={3}\n                            value={taskDescription}\n                            onChange={e => handleInput(e)} />\n                        <FormErrors\n                            show={formValid.getTaskDescriptionValid}\n                            formErrors={getError}\n                            fieldName=\"taskDescription\"\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions className=\"modal-actions\" justify=\"center\">\n                    <Button type=\"submit\" className=\"btn1\" disabled={Object.entries(formValid || {}).length > 0 || loader}>\n                        {loading && (\n                            <CircularProgress\n                                size={24}\n                                className=\"buttonProgress\"\n                            />\n                        )}\n                        {taskId ? \"Update\" : \"Create\"}\n                    </Button>\n                    <Button color=\"primary\" className=\"btn2\" onClick={confirmModalClose}>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    )\n}\n\nexport default AddTask"]},"metadata":{},"sourceType":"module"}